/**********************************************************************
 * Copyright (C) 2006-2015 by Consultingwerk Ltd. ("CW") -            *
 * www.consultingwerk.de and other contributors as listed             *
 * below.  All Rights Reserved.                                       *
 *                                                                    *
 *  Software is distributed on an "AS IS", WITHOUT WARRANTY OF ANY    *
 *   KIND, either express or implied.                                 *
 *                                                                    *
 *  Contributors:                                                     *
 *                                                                    *
 **********************************************************************/
/*------------------------------------------------------------------------
    File        : Service
    Purpose     : Generic Service (Interface) for Business Entity Requests
                  from the JSDO
    Syntax      : 
    Description : 
    Author(s)   : Mike Fechner / Consultingwerk Ltd.
    Created     : Tue May 19 16:42:22 CEST 2015
    Notes       : Not supported on OpenEdge 11.3 - as we rely on the JSON 
                  Before Image support only available form OpenEdge 11.4 on
  ----------------------------------------------------------------------*/

@openapi.openedge.export FILE(type="REST", executionMode="singleton", useReturnValue="false", writeDataSetBeforeImage="false").

ROUTINE-LEVEL ON ERROR UNDO, THROW.

USING Consultingwerk.*                               FROM PROPATH .
USING Consultingwerk.Assertion.*                     FROM PROPATH .
USING Consultingwerk.Framework.*                     FROM PROPATH .
USING Consultingwerk.OERA.*                          FROM PROPATH .
USING Consultingwerk.OERA.BusinessEntityDescriptor.* FROM PROPATH .
USING Consultingwerk.OERA.JsdoGenericService.*       FROM PROPATH .  
USING Consultingwerk.Util.*                          FROM PROPATH .
USING Progress.Lang.*                                FROM PROPATH .

{Consultingwerk/products.i}

CLASS Consultingwerk.OERA.JsdoGenericService.Service: 

    DEFINE VARIABLE oConfig AS IConfigurationProvider NO-UNDO . 

    /*------------------------------------------------------------------------------
        Purpose: Constructor for the Service class
        Notes:   
    ------------------------------------------------------------------------------*/
	CONSTRUCTOR PUBLIC Service ():
        
        DEFINE VARIABLE cFileName AS CHARACTER NO-UNDO.

		SUPER ().

        FileAssert:Exists (".restapplicationsettings":U) .
        
        ASSIGN cFileName = FileHelper:FindFile (".restapplicationsettings":U) .
        
        ASSIGN oConfig = {Consultingwerk/get-service.i Consultingwerk.Framework.IConfigurationProvider
                                                       "NEW ConfigurationProvider (cFileName)"} .
		
	END CONSTRUCTOR.

    /*------------------------------------------------------------------------------
        Purpose: Generic Count Service Interface 
        Notes:   
        @param pcEntityName The name of the Business Entity
        @param pcFilter The filter parameter
        @param piNumRecs OUTPUT The number of records returned by the query 
    ------------------------------------------------------------------------------*/
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="false").
    @progress.service.resourceMapping(type="REST", operation="invoke", URI="/count?filter=~{filter~}", alias="", mediaType="application/json").
    METHOD PUBLIC VOID Count (pcEntityName AS CHARACTER,
                              pcFilter AS CHARACTER,
                              OUTPUT piNumRecs AS INTEGER):  
    
        DEFINE VARIABLE oFetchDataRequest AS CountRecordsRequest NO-UNDO . 
        DEFINE VARIABLE cBufferName       AS CHARACTER           NO-UNDO .
        DEFINE VARIABLE cOrderBy          AS CHARACTER           NO-UNDO .
        DEFINE VARIABLE oBuffers          AS CharacterHolder     NO-UNDO .
        DEFINE VARIABLE hDataset          AS HANDLE              NO-UNDO. 
        
        oBuffers = NEW CharacterHolder () . 
        ServiceInterface:InvokeMethod (pcEntityName,
                                       "GetTopNavBuffers":U,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oBuffers) .
        
        ASSIGN cBufferName = ENTRY (1, oBuffers:Value) .
        
        oFetchDataRequest = NEW CountRecordsRequest () . 
        oFetchDataRequest:NumRecords = 100 . 
        
        /* When counting takes more than a second, assume almost 10000 records ... */
        oFetchDataRequest:StopAfter = 1 .
        oFetchDataRequest:StopAfterNumResults = 9999 . 
        
        IF pcFilter BEGINS "~{":U THEN 
            THIS-OBJECT:FetchDataRequestFromFilter (oFetchDataRequest, pcFilter, cBufferName, OUTPUT cOrderBy) .

        oFetchDataRequest:Tables = cBufferName . 

        Consultingwerk.OERA.ServiceInterface:InvokeMethod 
              (pcEntityName,
               "CountResultRecords":U,
               INPUT-OUTPUT DATASET-HANDLE hDataset,
               oFetchDataRequest) .

        piNumRecs = oFetchDataRequest:NumResults .
    
        FINALLY:
            IF VALID-HANDLE (hDataset) THEN 
                DELETE OBJECT hDataset NO-ERROR . 
                
            ErrorHelper:ResetErrorStatus() .	
        END FINALLY.
    
    END METHOD . 

    /*------------------------------------------------------------------------------
        Purpose: Assigns the properties of the given FetchDataRequest instance from 
                 a character string representing an ABL Filter 
        Notes:   
        @param poFetchDataRequest The FetchDataRequest instance to assign values to
        @param pcFilter The characcter string representing the ABL Filter instance
        @param pcBufferName The Buffer name for the query string 
        @param pcOrderBy OUTPUT The order by value 
    ------------------------------------------------------------------------------*/
	METHOD PROTECTED VOID FetchDataRequestFromFilter (poFetchDataRequest AS FetchDataRequest, 
	                                                  pcFilter AS CHARACTER,
	                                                  pcBufferName AS CHARACTER,
	                                                  OUTPUT pcOrderBy AS CHARACTER):
        
        DEFINE VARIABLE oFilterParameter  AS FilterParameter  NO-UNDO . 
        DEFINE VARIABLE oQueryParser      AS QueryParser      NO-UNDO . 
        DEFINE VARIABLE lcFilter          AS LONGCHAR         NO-UNDO . 
        DEFINE VARIABLE i                 AS INTEGER          NO-UNDO .
        
        FIX-CODEPAGE (lcFilter) = Codepages:UTF-8 .

        lcFilter = pcFilter . 		
		
        oFilterParameter = NEW FilterParameter () . 
        oFilterParameter:Deserialize (lcFilter) .
        
        IF oFilterParameter:top > 0 THEN 
            poFetchDataRequest:NumRecords = oFilterParameter:top .
        
        IF oFilterParameter:Skip > 0 THEN 
            poFetchDataRequest:Skip  = oFilterParameter:Skip .           
                    
        IF oFilterParameter:orderBy > "":U THEN DO:
            DO i = 1 TO NUM-ENTRIES (oFilterParameter:orderBy):
            
                IF i > 1 THEN 
                    pcOrderBy = pcOrderBy + " BY ":U . 
                    
                ASSIGN pcOrderBy = pcOrderBy + SUBSTITUTE ("&1.&2":U, pcBufferName, ENTRY (i, oFilterParameter:orderBy)) .
            
            END.
        END.

        IF oFilterParameter:ablFilter > "":U THEN DO:
             oQueryParser = NEW QueryParser () . 
             oQueryParser:BufferName = pcBufferName .
                
             poFetchDataRequest:Queries = oQueryParser:ParseQueryString (oFilterParameter:ablFilter):GetExpression() +
             
                                          IF pcOrderBy > "":U THEN 
                                              SUBSTITUTE (" BY &1":U,
                                                          pcOrderBy) 
                                          ELSE "":U .       
        END.       
        ELSE IF pcOrderBy > "":U THEN 
            poFetchDataRequest:Queries = SUBSTITUTE (" BY &1":U, pcOrderBy) . 

	END METHOD .

    /*------------------------------------------------------------------------------
        Purpose: Generic GetData (get/read) Service Interface 
        Notes:   
        @param pcEntityName The name of the Business Entity
        @param pcFilter The filter parameter
        @param pcNumRecords The numRecords value from the http client, see method ParseNumRecords
        @param pcStopAfter The stopAfter value from the http client, see method ParseStopAfter
        @param phDataset The Dataset to return to the client 
    ------------------------------------------------------------------------------*/
	@openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
	METHOD PUBLIC VOID GetData (pcEntityName AS CHARACTER, 
	                            pcFilter AS CHARACTER,
	                            pcNumRecords AS CHARACTER, 
	                            pcStopAfter AS CHARACTER, 
	                            OUTPUT DATASET-HANDLE phDataset):
		
        DEFINE VARIABLE oFetchDataRequest AS FetchDataRequest NO-UNDO . 
        DEFINE VARIABLE oSchemaHelper     AS SchemaHelper     NO-UNDO .
        DEFINE VARIABLE hQuery            AS HANDLE           NO-UNDO .
        DEFINE VARIABLE hBuffer           AS HANDLE           NO-UNDO .
        DEFINE VARIABLE hFetchBuffer      AS HANDLE           NO-UNDO .
        DEFINE VARIABLE hFetchDataset     AS HANDLE           NO-UNDO .
        DEFINE VARIABLE cBufferName       AS CHARACTER        NO-UNDO .
        DEFINE VARIABLE i                 AS INTEGER          NO-UNDO .
        DEFINE VARIABLE cOrderBy          AS CHARACTER        NO-UNDO .
        DEFINE VARIABLE iSeq              AS INTEGER          NO-UNDO .
        DEFINE VARIABLE oBuffers          AS CharacterHolder  NO-UNDO .
        DEFINE VARIABLE hDataset          AS HANDLE           NO-UNDO . 
        DEFINE VARIABLE cKeyFields        AS CHARACTER        NO-UNDO .
        DEFINE VARIABLE cFieldSubstitute  AS CHARACTER        NO-UNDO .
        
        DEFINE VARIABLE iNumRecords       AS INTEGER          NO-UNDO INIT ? .
        DEFINE VARIABLE iStopAfter        AS INTEGER          NO-UNDO INIT ? .
      
        IF pcNumRecords > "":U THEN 
            ASSIGN iNumRecords = THIS-OBJECT:ParseNumRecords (pcNumRecords) .
            
        IF pcStopAfter > "":U THEN 
            ASSIGN iStopAfter = THIS-OBJECT:ParseStopAfter (pcStopAfter) .            
        
        oBuffers = NEW CharacterHolder () . 
        ServiceInterface:InvokeMethod (pcEntityName,
                                       "GetTopNavBuffers":U,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oBuffers) .
        
        ASSIGN cBufferName = ENTRY (1, oBuffers:Value) .
        
        oFetchDataRequest = NEW FetchDataRequest () . 
        oFetchDataRequest:NumRecords = 100 . 
        
        IF pcFilter BEGINS "~{":U THEN 
            THIS-OBJECT:FetchDataRequestFromFilter (oFetchDataRequest, pcFilter, cBufferName, OUTPUT cOrderBy) .

        oFetchDataRequest:Tables = "*":U . 

        IF iNumRecords <> ? THEN 
            ASSIGN oFetchDataRequest:NumRecords = iNumRecords . 
            
        IF iStopAfter <> ? THEN 
            ASSIGN oFetchDataRequest:StopAfter = iStopAfter .

        IF oFetchDataRequest:Queries BEGINS " BY ":U THEN 
            oFetchDataRequest:Queries = SUBSTITUTE ("for each &1&2":U, cBufferName, oFetchDataRequest:Queries) .

        ServiceInterface:FetchData (pcEntityName,
                                    oFetchDataRequest,
                                    OUTPUT DATASET-HANDLE hFetchDataset) .
		
        oSchemaHelper = NEW SchemaHelper () . 

        phDataset = oSchemaHelper:AddFieldsToDataset (hFetchDataset, "id,seq":U) .        
        
        ASSIGN iSeq         = oFetchDataRequest:Skip
               hFetchBuffer = hFetchDataset:GET-BUFFER-HANDLE (cBufferName)
               hBuffer      = phDataset:GET-BUFFER-HANDLE (1)
               hQuery       = QueryHelper:CreatePreparedQuery (hFetchBuffer,
                                                               SUBSTITUTE ("PRESELECT EACH &1 &2":U,
                                                                           cBufferName,
                                                                           (IF cOrderBy > "":U THEN "BY ":U + cOrderBy ELSE "":U)))                
               cKeyFields   = BufferHelper:UniqueKeyFields (hFetchBuffer, FALSE, FALSE).

        DO WHILE NOT hQuery:QUERY-OFF-END ON ERROR UNDO, THROW:
            iSeq = iSeq + 1 .
            
            hBuffer:BUFFER-CREATE () .
            
            hBuffer::seq = iSeq . 
            hBuffer::id = TRIM (BufferHelper:BufferFieldSubstitute (hFetchBuffer, cKeyFields, "&1|&2|&3|&4|&5|&6|&7|&8|&9":U, FALSE), "|":U) .
            hBuffer:BUFFER-COPY (hFetchBuffer) .
            
            hQuery:GET-NEXT () . 
            hBuffer:BUFFER-RELEASE () .
        END.    		

        GarbageCollectorHelper:DeleteObject (hQuery) .

        DO i = 1 TO phDataset:NUM-BUFFERS ON ERROR UNDO, THROW:		
		    IF phDataset:GET-BUFFER-HANDLE (i):NAME = cBufferName THEN 
		        NEXT . 
		
            ASSIGN hBuffer      = phDataset:GET-BUFFER-HANDLE (i) 
                   hFetchBuffer = hFetchDataset:GET-BUFFER-HANDLE (hBuffer:NAME) 
                   hQuery       = QueryHelper:CreatePreparedQuery (hFetchBuffer) 
                   cKeyFields   = BufferHelper:UniqueKeyFields (hFetchBuffer, FALSE, FALSE) .
                   
            DO WHILE NOT hQuery:QUERY-OFF-END ON ERROR UNDO, THROW:		    
		        hBuffer:BUFFER-CREATE () .
		        hBuffer::seq = ? . 
		        hBuffer::id = TRIM (BufferHelper:BufferFieldSubstitute (hFetchBuffer, cKeyFields, "&1|&2|&3|&4|&5|&6|&7|&8|&9":U, FALSE), "|":U) .
		        hBuffer:BUFFER-COPY (hFetchBuffer) .
		        hQuery:GET-NEXT () .
		        hBuffer:BUFFER-RELEASE () .
		    END.
		
		    FINALLY:
                GarbageCollectorHelper:DeleteObject (hQuery) .
            END FINALLY.
		END.
		
        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .
            
            UNDO, THROW err . 
        END CATCH.

		FINALLY:
            IF VALID-HANDLE (phDataset) THEN 
                DELETE OBJECT phDataset .

            IF VALID-HANDLE (hFetchDataset) THEN 
                DELETE OBJECT hFetchDataset .
        END FINALLY.

	END METHOD .

    /*------------------------------------------------------------------------------
        Purpose: Generic CreateData (post/create) Service Interface 
        Notes:   Uses a LONGCHAR as INPUT-OUTPUT for the Dataset, to allow to map this
                 to the actual data types of the fields in the Dataset from the business entity.
                 The default mapping for JSON number would be a DECIMAL fields, which 
                 would cause conflicts integer fields in the business entity while
                 updating 
        @param pcEntityName The name of the Business Entity
        @param lcDataset The JSON Representation of the Dataset to update  
    ------------------------------------------------------------------------------*/
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
    METHOD PUBLIC VOID CreateData (pcEntityName AS CHARACTER, 
                                   INPUT-OUTPUT lcDataset AS LONGCHAR):            
              
        THIS-OBJECT:ProcessUpdate (pcEntityName, INPUT-OUTPUT lcDataset) .

    END METHOD.

    /*------------------------------------------------------------------------------
        Purpose: Generic DeleteData (post/create) Service Interface 
        Notes:   Uses a LONGCHAR as INPUT-OUTPUT for the Dataset, to allow to map this
                 to the actual data types of the fields in the Dataset from the business entity.
                 The default mapping for JSON number would be a DECIMAL fields, which 
                 would cause conflicts integer fields in the business entity while
                 updating 
        @param pcEntityName The name of the Business Entity
        @param lcDataset The JSON Representation of the Dataset to update  
    ------------------------------------------------------------------------------*/
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
    METHOD PUBLIC VOID DeleteData (pcEntityName AS CHARACTER, 
                                   INPUT-OUTPUT lcDataset AS LONGCHAR):            
              
        THIS-OBJECT:ProcessUpdate (pcEntityName, INPUT-OUTPUT lcDataset) .

    END METHOD.
        
    /*------------------------------------------------------------------------------
        Purpose: Generic Invoke Method Service Interface 
        Notes:   
        @param pcEntityName The name of the Business Entity
        @param pcMethodName The name of the method to invoke
        @param plcDataset The JSON representation of the INPUT/OUTPUT ProDataset
        @param plcParameter The JSON Serializable INPUT/OUTPUT Parameter 
    ------------------------------------------------------------------------------*/
	@openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="false").
	METHOD PUBLIC VOID InvokeWithSerializableObject (pcEntityName AS CHARACTER,
	                                                 pcMethodName AS CHARACTER, 
	                                                 INPUT-OUTPUT plcDataset   AS LONGCHAR, 
	                                                 INPUT-OUTPUT plcParameter AS LONGCHAR):
		
        DEFINE VARIABLE hDataset         AS HANDLE                               NO-UNDO .
        DEFINE VARIABLE oParameter       AS GetBusinessEntityDescriptorParameter NO-UNDO .
        DEFINE VARIABLE oMethod          AS IInvokableMethodDescriptor           NO-UNDO . 
        DEFINE VARIABLE oMethodParameter AS ISerializable                        NO-UNDO . 
        DEFINE VARIABLE lcDataset        AS LONGCHAR                             NO-UNDO . 
        
        oParameter = NEW GetBusinessEntityDescriptorParameter () .
         
        ServiceInterface:InvokeMethod (pcEntityName,
                                       "GetBusinessEntityDescriptor":U,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oParameter) .
    
        IF VALID-HANDLE (hDataset) THEN   
            DELETE OBJECT hDataset .
		
		ASSIGN hDataset = ? 
		       oMethod  = oParameter:Descriptor:InvokableMethods:GetItem (pcMethodName) .        

		IF NOT VALID-OBJECT (oMethod) THEN 
		    UNDO, THROW NEW UnableToInvokeMethodException (SUBSTITUTE ("Unable to invoke method &1 without descriptor"{&TRAN},
		                                                               pcMethodName),
		                                                   0) . 
		
		oMethodParameter = DYNAMIC-NEW (oMethod:ParameterClassName) () .

        IF oMethod:DatasetInput AND plcDataset > "":U THEN DO:
            SErviceInterface:FetchDataset (pcEntityName, 
                                           OUTPUT DATASET-HANDLE hDataset) .
            hDataset:READ-JSON ("longchar":U, lcDataset) .
        END.

        ServiceInterface:InvokeMethod (pcEntityName,
                                       pcMethodName,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oMethodParameter) .

        IF VALID-OBJECT (oMethodParameter) THEN 
            ASSIGN plcParameter = oMethodParameter:Serialize() .
        ELSE 
            ASSIGN plcParameter = ? . 

        IF oMethod:DatasetOutput AND VALID-HANDLE (hDataset) THEN

        /* Mike Fechner, Consultingwerk Ltd. 19.05.2015
           JSON before image only form OE11.4 on */
        hDataset:WRITE-JSON ("longchar":U, lcDataset, TRUE, ?, ?, ?
&IF NOT PROVERSION BEGINS "10" AND NOT PROVERSION BEGINS "11.0" AND NOT PROVERSION BEGINS "11.1" AND NOT PROVERSION BEGINS "11.2" AND NOT PROVERSION BEGINS "11.3" &THEN        
                             , TRUE
&ENDIF                             
                             ) .
        ELSE
            lcDataset = ? .
    
        ASSIGN plcDataset = lcDataset . 
    
        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .
            
            UNDO, THROW err . 
        END CATCH.
    
        FINALLY:
            IF VALID-HANDLE (hDataset) THEN 
                DELETE OBJECT hDataset . 	
        END FINALLY.
    
	END METHOD .

    /*------------------------------------------------------------------------------
        Purpose: Parses the optional NumRecords argument
        Notes:   Supports optional "all" and "one"   
        @param pcNumRecords The NumRecords argument as received from the http client
        @return The numeric value for num records
    ------------------------------------------------------------------------------*/
	METHOD PROTECTED INTEGER ParseNumRecords (pcNumRecords AS CHARACTER):
		
		IF pcNumRecords = "all":U THEN 
		    RETURN 0 .
		    
		IF pcNumRecords = "one":U THEN 
		    RETURN 1 .
		   
        RETURN IntegerType:ConvertFromString (pcNumRecords) .		   
		
	END METHOD .

    /*------------------------------------------------------------------------------
        Purpose: Parses the optional StopAfter argument
        Notes:   Supports optional "disabled" and "none"   
        @param pcStopAfter The StopAfter argument as received from the http client
        @return The numeric value for stop after
    ------------------------------------------------------------------------------*/
    METHOD PROTECTED INTEGER ParseStopAfter (pcStopAfter AS CHARACTER):
        
        IF pcStopAfter = "disabled":U OR pcStopAfter = "none":U THEN 
            RETURN 0 .
            
        RETURN IntegerType:ConvertFromString (pcStopAfter) .          
        
    END METHOD .

    /*------------------------------------------------------------------------------
        Purpose: Processes Create/Update/Delete operations 
        Notes:   Worker method for CreateData, DeleteData and UpdateData as the 
                 rest adapter does not support using the same method for all three 
                 verbs - but all methods can share the same implementation
        @param pcEntityName The name of the Business Entity
        @param lcDataset The JSON Representation of the Dataset to update  
    ------------------------------------------------------------------------------*/
	METHOD PROTECTED VOID ProcessUpdate (pcEntityName AS CHARACTER, 
                                         INPUT-OUTPUT lcDataset AS LONGCHAR):
		
        DEFINE VARIABLE hDataset AS HANDLE NO-UNDO.

        ServiceInterface:FetchDataset (pcEntityName,
                                       OUTPUT DATASET-HANDLE hDataset) .

        hDataset:READ-JSON ("longchar":U, lcDataset) .
              
        ServiceInterface:SaveChanges (pcEntityName,
                                      INPUT-OUTPUT DATASET-HANDLE hDataset) .

        /* Mike Fechner, Consultingwerk Ltd. 19.05.2015
           JSON before image only form OE11.4 on */
        hDataset:WRITE-JSON ("longchar":U, lcDataset, TRUE, ?, ?, ?
&IF NOT PROVERSION BEGINS "10" AND NOT PROVERSION BEGINS "11.0" AND NOT PROVERSION BEGINS "11.1" AND NOT PROVERSION BEGINS "11.2" AND NOT PROVERSION BEGINS "11.3" &THEN        
                             , TRUE
&ENDIF                             
                             ) .

        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .
            
            UNDO, THROW err . 
        END CATCH.

        FINALLY:
            IF VALID-HANDLE (hDataset) THEN 
                DELETE OBJECT hDataset .		
        END FINALLY.

	END METHOD .

    /*------------------------------------------------------------------------------
        Purpose: Generic UpdateData (put/update) Service Interface 
        Notes:   Uses a LONGCHAR as INPUT-OUTPUT for the Dataset, to allow to map this
                 to the actual data types of the fields in the Dataset from the business entity.
                 The default mapping for JSON number would be a DECIMAL fields, which 
                 would cause conflicts integer fields in the business entity while
                 updating 
        @param pcEntityName The name of the Business Entity
        @param lcDataset The JSON Representation of the Dataset to update  
    ------------------------------------------------------------------------------*/
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
    METHOD PUBLIC VOID UpdateData (pcEntityName AS CHARACTER, 
                                   INPUT-OUTPUT lcDataset AS LONGCHAR):            

        THIS-OBJECT:ProcessUpdate (pcEntityName, INPUT-OUTPUT lcDataset) .

    END METHOD.
    
END CLASS.
