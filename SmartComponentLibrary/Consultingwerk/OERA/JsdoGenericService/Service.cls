/**********************************************************************
 * Copyright (C) 2006-2016 by Consultingwerk Ltd. ("CW") -            *
 * www.consultingwerk.de and other contributors as listed             *
 * below.  All Rights Reserved.                                       *
 *                                                                    *
 *  Software is distributed on an "AS IS", WITHOUT WARRANTY OF ANY    *
 *   KIND, either express or implied.                                 *
 *                                                                    *
 *  Contributors:                                                     *
 *                                                                    *
 **********************************************************************/
/*------------------------------------------------------------------------
    File        : Service
    Purpose     : Generic Service (Interface) for Business Entity Requests
                  from the JSDO
    Syntax      :
    Description :
    Author(s)   : Mike Fechner / Consultingwerk Ltd.
    Created     : Tue May 19 16:42:22 CEST 2015
    Notes       : Not supported on OpenEdge 11.3 - as we rely on the JSON
                  Before Image support only available form OpenEdge 11.4 on
  ----------------------------------------------------------------------*/

@openapi.openedge.export FILE(type="REST", executionMode="singleton", useReturnValue="false", writeDataSetBeforeImage="false").

ROUTINE-LEVEL ON ERROR UNDO, THROW.

USING Consultingwerk.*                               FROM PROPATH .
USING Consultingwerk.Assertion.*                     FROM PROPATH .
USING Consultingwerk.Exceptions.*                    FROM PROPATH .
USING Consultingwerk.Framework.*                     FROM PROPATH .
USING Consultingwerk.OERA.*                          FROM PROPATH .
USING Consultingwerk.OERA.BusinessEntityDescriptor.* FROM PROPATH .
USING Consultingwerk.OERA.JsdoGenericService.*       FROM PROPATH .
USING Consultingwerk.Util.*                          FROM PROPATH .
USING Progress.Json.ObjectModel.*                    FROM PROPATH .
USING Progress.Lang.*                                FROM PROPATH .

{Consultingwerk/products.i}

CLASS Consultingwerk.OERA.JsdoGenericService.Service:


    &IF DEFINED (PacificWebSpeed) NE 0 &THEN
    /**
     * Purpose: Gets and sets the reference to the current IWebRequest
     * Notes:   Applies only to PASOE WebHandlers
     */
    DEFINE PUBLIC PROPERTY WebRequest AS OpenEdge.Web.IWebRequest NO-UNDO
    GET.
    SET.
    &ENDIF

    /**
     * Purpose: Constructor for the Service class
     * Notes:
     */
    CONSTRUCTOR PUBLIC Service ():

        DEFINE VARIABLE cFileName AS CHARACTER              NO-UNDO .
        DEFINE VARIABLE oConfig   AS IConfigurationProvider NO-UNDO .

        SUPER ().

        oConfig = {Consultingwerk/get-service.i Consultingwerk.Framework.IConfigurationProvider} .

        IF NOT VALID-OBJECT (oConfig) THEN DO:
            FileAssert:Exists (".restapplicationsettings":U) .

            ASSIGN cFileName = FileHelper:FindFile (".restapplicationsettings":U) .

            ASSIGN oConfig = {Consultingwerk/get-service.i Consultingwerk.Framework.IConfigurationProvider
                                                           "NEW ConfigurationProvider (cFileName)"} .
        END.

    END CONSTRUCTOR.

    /**
     * Purpose: Generic Count Service Interface
     * Notes:
     * @param pcEntityName The name of the Business Entity
     * @param pcFilter The filter parameter
     * @param piNumRecs OUTPUT The number of records returned by the query
     */
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="false").
    @progress.service.resourceMapping(type="REST", operation="invoke", URI="/count?filter=~{filter~}", alias="", mediaType="application/json").
    METHOD PUBLIC VOID Count (pcEntityName AS CHARACTER,
                              pcFilter AS CHARACTER,
                              OUTPUT piNumRecs AS INTEGER):

        DEFINE VARIABLE oFetchDataRequest AS CountRecordsRequest          NO-UNDO .
        DEFINE VARIABLE cBufferName       AS CHARACTER                    NO-UNDO .
        DEFINE VARIABLE cOrderBy          AS CHARACTER                    NO-UNDO .
        DEFINE VARIABLE oBuffers          AS CharacterHolder              NO-UNDO .
        DEFINE VARIABLE hDataset          AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE oCustomization    AS IGenericServiceCustomization NO-UNDO .

        ServiceInterface:Activate () .

        oBuffers = NEW CharacterHolder () .
        ServiceInterface:InvokeMethod (pcEntityName,
                                       "GetTopNavBuffers":U,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oBuffers) .

        ASSIGN cBufferName = ENTRY (1, oBuffers:Value) .

        oFetchDataRequest = NewCountRecordsRequest (pcEntityName, pcFilter) .
        oFetchDataRequest:NumRecords = 100 .

        /* When counting takes more than a second, assume almost 10000 records ... */
        oFetchDataRequest:StopAfter = 1 .
        oFetchDataRequest:StopAfterNumResults = 9999 .

        IF pcFilter BEGINS "~{":U THEN
            THIS-OBJECT:FetchDataRequestFromFilter (oFetchDataRequest, pcFilter, cBufferName, OUTPUT cOrderBy) .

        IF oFetchDataRequest:Tables = "":U THEN
            oFetchDataRequest:Tables = "*":U .

&IF DEFINED (PacificWebSpeed) NE 0 &THEN
        IF VALID-OBJECT (THIS-OBJECT:WebRequest) THEN DO:
            oCustomization = {Consultingwerk/get-service.i IGenericServiceCustomization} .

            IF VALID-OBJECT (oCustomization) THEN
                oCustomization:CustomizeCountParameter (pcEntityName,
                                                        THIS-OBJECT:WebRequest,
                                                        oFetchDataRequest) .
        END.
&ENDIF

        Consultingwerk.OERA.ServiceInterface:InvokeMethod
              (pcEntityName,
               "CountResultRecords":U,
               INPUT-OUTPUT DATASET-HANDLE hDataset,
               oFetchDataRequest) .

        piNumRecs = oFetchDataRequest:NumResults .

        FINALLY:
            IF VALID-HANDLE (hDataset) THEN
                DELETE OBJECT hDataset NO-ERROR .

            ServiceInterface:Deactivate () .

            ErrorHelper:ResetErrorStatus() .
        END FINALLY.

    END METHOD .

    /**
     * Purpose: Assigns the properties of the given FetchDataRequest instance from
     *          a character string representing an ABL Filter
     * Notes:
     * @param poFetchDataRequest The FetchDataRequest instance to assign values to
     * @param pcFilter The characcter string representing the ABL Filter instance
     * @param pcBufferName The Buffer name for the query string
     * @param pcOrderBy OUTPUT The order by value
     */
    METHOD PROTECTED VOID FetchDataRequestFromFilter (poFetchDataRequest AS FetchDataRequest,
                                                      pcFilter AS CHARACTER,
                                                      pcBufferName AS CHARACTER,
                                                      OUTPUT pcOrderBy AS CHARACTER):

        DEFINE VARIABLE oFilterParameter  AS FilterParameter   NO-UNDO .
        DEFINE VARIABLE oQueryParser      AS QueryParser       NO-UNDO .
        DEFINE VARIABLE lcFilter          AS LONGCHAR          NO-UNDO .
        DEFINE VARIABLE i                 AS INTEGER           NO-UNDO .
        DEFINE VARIABLE cFilterTable      AS CHARACTER         NO-UNDO .
        DEFINE VARIABLE oJsonObject       AS JsonObject        NO-UNDO .
        DEFINE VARIABLE oObjectModel      AS ObjectModelParser NO-UNDO .
        DEFINE VARIABLE oFormat           AS NumericFormat     NO-UNDO .
        DEFINE VARIABLE iEntry            AS INTEGER           NO-UNDO .
        DEFINE VARIABLE cNames            AS CHARACTER         NO-UNDO .

        FIX-CODEPAGE (lcFilter) = Codepages:UTF-8 .

        /* SCL-514: Perform JSON Serialization/Deserialization with AMERICAN
                    numeric format to avoid issues with decimal point interpretation */
        oFormat = SessionHelper:GetNumericFormat() .
        SessionHelper:SetDefaultNumericFormat() .

        lcFilter = pcFilter .

        oObjectModel = NEW ObjectModelParser () .

        oJsonObject = CAST (oObjectModel:Parse (lcFilter), JsonObject).

        /* SCL-1327 Add Support for Named Query references as part of the JSON */
        ASSIGN cNames = ArrayHelper:ToList(oJsonObject:GetNames())
               iEntry = LOOKUP ("NamedQuery":U, cNames) .

        IF iEntry > 0 THEN
            poFetchDataRequest:NamedQuery = THIS-OBJECT:ParseNamedQuery (oJsonObject) .

        oFilterParameter = NEW FilterParameter () .
        oFilterParameter:DeserializeFromJsonObject (oJsonObject) .

        IF oFilterParameter:tableRef > "":U THEN DO:
            IF oFilterParameter:viewTables > "":U THEN
                poFetchDataRequest:Tables = SUBSTITUTE ("&1,&2":U,
                                                        oFilterParameter:tableRef,
                                                        oFilterParameter:viewTables) .
            ELSE
                poFetchDataRequest:Tables = oFilterParameter:tableRef .

            cFilterTable = oFilterParameter:tableRef .
        END.
        ELSE
            cFilterTable = pcBufferName .

        IF oFilterParameter:top > 0 THEN
            poFetchDataRequest:NumRecords = oFilterParameter:top .

        IF oFilterParameter:Skip > 0 THEN
            poFetchDataRequest:Skip  = oFilterParameter:Skip .

        IF oFilterParameter:orderBy > "":U THEN DO:
            DO i = 1 TO NUM-ENTRIES (oFilterParameter:orderBy):

                IF i > 1 THEN
                    pcOrderBy = pcOrderBy + " BY ":U .

                ASSIGN pcOrderBy = pcOrderBy + SUBSTITUTE ("&1.&2":U,
                                                           cFilterTable,
                                                           ENTRY (i, oFilterParameter:orderBy)) .

            END.
        END.

        IF oFilterParameter:ablFilter > "":U THEN DO:
             oQueryParser = NEW QueryParser () .
             oQueryParser:BufferName = cFilterTable .

             poFetchDataRequest:Queries = oQueryParser:ParseQueryString (oFilterParameter:ablFilter):GetExpression() +

                                          IF pcOrderBy > "":U THEN
                                              SUBSTITUTE (" BY &1":U,
                                                          pcOrderBy)
                                          ELSE "":U .
        END.
        ELSE IF pcOrderBy > "":U THEN
            poFetchDataRequest:Queries = SUBSTITUTE (" BY &1":U, pcOrderBy) .

        FINALLY:
            IF VALID-OBJECT (oFormat) THEN
                SessionHelper:SetNumericFormat (oFormat) .

            GarbageCollectorHelper:DeleteObject (oObjectModel) .
            GarbageCollectorHelper:DeleteObject (oJsonObject) .
        END FINALLY.

    END METHOD .

    /**
     * Purpose: Generic GetData (get/read) Service Interface
     * Notes:
     * @param pcEntityName The name of the Business Entity
     * @param pcFilter The filter parameter
     * @param pcNumRecords The numRecords value from the http client, see method ParseNumRecords
     * @param pcStopAfter The stopAfter value from the http client, see method ParseStopAfter
     * @param phDataset The Dataset to return to the client
     */
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
    METHOD PUBLIC VOID GetData (pcEntityName AS CHARACTER,
                                pcFilter AS CHARACTER,
                                pcNumRecords AS CHARACTER,
                                pcStopAfter AS CHARACTER,
                                OUTPUT DATASET-HANDLE phDataset):

        DEFINE VARIABLE oFetchDataRequest         AS FetchDataRequest             NO-UNDO .
        DEFINE VARIABLE oSchemaHelper             AS SchemaHelper                 NO-UNDO .
        DEFINE VARIABLE hQuery                    AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE hBuffer                   AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE hFetchBuffer              AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE hFetchDataset             AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE cBufferName               AS CHARACTER                    NO-UNDO .
        DEFINE VARIABLE i                         AS INTEGER                      NO-UNDO .
        DEFINE VARIABLE cOrderBy                  AS CHARACTER                    NO-UNDO .
        DEFINE VARIABLE iSeq                      AS INTEGER                      NO-UNDO .
        DEFINE VARIABLE oBuffers                  AS CharacterHolder              NO-UNDO .
        DEFINE VARIABLE hDataset                  AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE cKeyFields                AS CHARACTER                    NO-UNDO .
        DEFINE VARIABLE iEntries                  AS INTEGER                      NO-UNDO .
        DEFINE VARIABLE oQueryParser              AS QueryParser                  NO-UNDO .
        DEFINE VARIABLE cAllTables                AS CHARACTER                    NO-UNDO .

        DEFINE VARIABLE iNumRecords               AS INTEGER                      NO-UNDO INITIAL ? .
        DEFINE VARIABLE iStopAfter                AS INTEGER                      NO-UNDO INITIAL ? .
        DEFINE VARIABLE oCustomization            AS IGenericServiceCustomization NO-UNDO .

        ServiceInterface:Activate () .

        IF pcNumRecords > "":U THEN
            ASSIGN iNumRecords = THIS-OBJECT:ParseNumRecords (pcNumRecords) .

        IF pcStopAfter > "":U THEN
            ASSIGN iStopAfter = THIS-OBJECT:ParseStopAfter (pcStopAfter) .

        oBuffers = NEW CharacterHolder () .
        ServiceInterface:InvokeMethod (pcEntityName,
                                       "GetTopNavBuffers":U,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oBuffers) .

        ASSIGN cBufferName = ENTRY (1, oBuffers:Value) .

        oFetchDataRequest = NewFetchDataRequest (pcEntityName, pcFilter) .
        oFetchDataRequest:NumRecords = 100 .

        IF pcFilter BEGINS "~{":U THEN
            THIS-OBJECT:FetchDataRequestFromFilter (oFetchDataRequest, pcFilter, cBufferName, OUTPUT cOrderBy) .

        IF oFetchDataRequest:Tables = "":U THEN
            oFetchDataRequest:Tables = "*":U .
        ELSE
            cBufferName = ENTRY (1, oFetchDataRequest:Tables) .

        IF iNumRecords <> ? THEN
            ASSIGN oFetchDataRequest:NumRecords = iNumRecords .

        IF iStopAfter <> ? THEN
            ASSIGN oFetchDataRequest:StopAfter = iStopAfter .

        IF oFetchDataRequest:Queries > "":U THEN DO:
            oQueryParser = NEW QueryParser () .

            oQueryParser:BufferName = cBufferName .
            oQueryParser:ParseQueryString (oFetchDataRequest:Queries) .

            IF oQueryParser:ByClause = "":U THEN DO:
                ASSIGN cOrderBy                  = THIS-OBJECT:DefaultSort (pcEntityName, cBufferName)
                       oFetchDataRequest:Queries = oFetchDataRequest:Queries + " ":U + cOrderBy .

                IF cOrderBy BEGINS "BY ":U THEN
                    ASSIGN cOrderBy = SUBSTRING (cOrderBy, 4) .
            END.

        END.
        ELSE DO:
            ASSIGN cOrderBy                  = THIS-OBJECT:DefaultSort (pcEntityName, cBufferName)
                   oFetchDataRequest:Queries = " ":U + cOrderBy .

            IF cOrderBy BEGINS "BY ":U THEN
                ASSIGN cOrderBy = SUBSTRING (cOrderBy, 4) .
        END.

        IF oFetchDataRequest:Queries BEGINS " BY ":U THEN
            oFetchDataRequest:Queries = SUBSTITUTE ("for each &1&2":U,
                                                    cBufferName,
                                                    oFetchDataRequest:Queries) .

&IF DEFINED (PacificWebSpeed) NE 0 &THEN
        IF VALID-OBJECT (THIS-OBJECT:WebRequest) THEN DO:
            oCustomization = {Consultingwerk/get-service.i IGenericServiceCustomization} .

            IF VALID-OBJECT (oCustomization) THEN
                oCustomization:CustomizeFetchDataParameter (pcEntityName,
                                                            THIS-OBJECT:WebRequest,
                                                            oFetchDataRequest) .
        END.
&ENDIF

        ServiceInterface:FetchData (pcEntityName,
                                    oFetchDataRequest,
                                    OUTPUT DATASET-HANDLE hFetchDataset) .

        oSchemaHelper = NEW SchemaHelper () .

        ASSIGN cAllTables = ListHelper:ExpandListEntries (oFetchDataRequest:Tables,
                                                          DatasetHelper:BufferNames (hFetchDataset))

               phDataset  = oSchemaHelper:AddFieldsToDataset (hFetchDataset, "id,seq":U, cAllTables) .

        ASSIGN iSeq         = oFetchDataRequest:Skip
               hFetchBuffer = hFetchDataset:GET-BUFFER-HANDLE (cBufferName)
               hBuffer      = phDataset:GET-BUFFER-HANDLE (1)
               hQuery       = QueryHelper:CreatePreparedQuery (hFetchBuffer,
                                                               SUBSTITUTE ("PRESELECT EACH &1 &2":U,
                                                                           cBufferName,
                                                                           (IF cOrderBy > "":U THEN "BY ":U + cOrderBy ELSE "":U)))
               cKeyFields   = BufferHelper:UniqueKeyFields (hFetchBuffer, FALSE, FALSE)
               iEntries     = NUM-ENTRIES (cKeyFields).

        DO WHILE NOT hQuery:QUERY-OFF-END ON ERROR UNDO, THROW:
            iSeq = iSeq + 1 .

            hBuffer:BUFFER-CREATE () .

            hBuffer::seq = iSeq .

            IF iEntries < 10 THEN
                hBuffer::id = TRIM (BufferHelper:BufferFieldSubstitute (hFetchBuffer, cKeyFields, "&1|&2|&3|&4|&5|&6|&7|&8|&9":U, FALSE), "|":U) .
            ELSE
                hBuffer::id = BufferHelper:ConcatenateFieldValues (hFetchBuffer, cKeyFields, "|":U) .

            hBuffer:BUFFER-COPY (hFetchBuffer) .

            hQuery:GET-NEXT () .
            hBuffer:BUFFER-RELEASE () .
        END.

        GarbageCollectorHelper:DeleteObject (hQuery) .

        DO i = 1 TO phDataset:NUM-BUFFERS ON ERROR UNDO, THROW:
            IF phDataset:GET-BUFFER-HANDLE (i):NAME = cBufferName THEN
                NEXT .

            ASSIGN hBuffer      = phDataset:GET-BUFFER-HANDLE (i)
                   hFetchBuffer = hFetchDataset:GET-BUFFER-HANDLE (hBuffer:NAME)
                   hQuery       = QueryHelper:CreatePreparedQuery (hFetchBuffer)
                   cKeyFields   = BufferHelper:UniqueKeyFields (hFetchBuffer, FALSE, FALSE) .

            DO WHILE NOT hQuery:QUERY-OFF-END ON ERROR UNDO, THROW:
                hBuffer:BUFFER-CREATE () .
                hBuffer::seq = ? .
                hBuffer::id = TRIM (BufferHelper:BufferFieldSubstitute (hFetchBuffer, cKeyFields, "&1|&2|&3|&4|&5|&6|&7|&8|&9":U, FALSE), "|":U) .
                hBuffer:BUFFER-COPY (hFetchBuffer) .
                hQuery:GET-NEXT () .
                hBuffer:BUFFER-RELEASE () .
            END.

            FINALLY:
                GarbageCollectorHelper:DeleteObject (hQuery) .
            END FINALLY.
        END.

        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .

            UNDO, THROW err .
        END CATCH.

        FINALLY:
            IF VALID-HANDLE (phDataset) THEN
                DELETE OBJECT phDataset .

            IF VALID-HANDLE (hFetchDataset) THEN
                DELETE OBJECT hFetchDataset .

            ServiceInterface:Deactivate () .
        END FINALLY.

    END METHOD .

    /**
     * Purpose: Generic CreateData (post/create) Service Interface
     * Notes:   Uses a LONGCHAR as INPUT-OUTPUT for the Dataset, to allow to map this
     *          to the actual data types of the fields in the Dataset from the business entity.
     *          The default mapping for JSON number would be a DECIMAL fields, which
     *          would cause conflicts integer fields in the business entity while
     *          updating
     * @param pcEntityName The name of the Business Entity
     * @param lcDataset The JSON Representation of the Dataset to update
     */
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
    METHOD PUBLIC VOID CreateData (pcEntityName AS CHARACTER,
                                   INPUT-OUTPUT lcDataset AS LONGCHAR):

        THIS-OBJECT:ProcessUpdate (pcEntityName, INPUT-OUTPUT lcDataset) .

    END METHOD.

    /**
     * Purpose: Returns the default sort of the table from the Business Entity Descriptor
     * Notes:
     * @param pcEntityName The name of the Business Entity
     * @param pcTable The name of the temp-table
     * @return CHARACTER
     */
    METHOD PROTECTED CHARACTER DefaultSort (pcEntityName AS CHARACTER,
                                            pcTable AS CHARACTER):

        DEFINE VARIABLE oParameter  AS GetBusinessEntityDescriptorParameter NO-UNDO .
        DEFINE VARIABLE hDataset    AS HANDLE                               NO-UNDO .

        oParameter = NEW GetBusinessEntityDescriptorParameter (FALSE) .

        ServiceInterface:InvokeMethod (pcEntityName,
                                       "GetBusinessEntityDescriptor":U,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oParameter) .

        IF NOT oParameter:Descriptor:Tables:ContainsName (pcTable) THEN
            RETURN "":U .

        RETURN oParameter:Descriptor:Tables:GetItem (pcTable):DefaultSort .

        FINALLY:
            IF VALID-HANDLE (hDataset) THEN
                DELETE OBJECT hDataset .
        END FINALLY.

    END METHOD.


    /**
     * Purpose: Generic DeleteData (post/create) Service Interface
     * Notes:   Uses a LONGCHAR as INPUT-OUTPUT for the Dataset, to allow to map this
     *          to the actual data types of the fields in the Dataset from the business entity.
     *          The default mapping for JSON number would be a DECIMAL fields, which
     *          would cause conflicts integer fields in the business entity while
     *          updating
     * @param pcEntityName The name of the Business Entity
     * @param lcDataset The JSON Representation of the Dataset to update
     */
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
    METHOD PUBLIC VOID DeleteData (pcEntityName AS CHARACTER,
                                   INPUT-OUTPUT lcDataset AS LONGCHAR):

        THIS-OBJECT:ProcessUpdate (pcEntityName, INPUT-OUTPUT lcDataset) .

    END METHOD.

    /**
     * Purpose: Generic Invoke Method Service Interface
     * Notes:
     * @param pcEntityName The name of the Business Entity
     * @param pcMethodName The name of the method to invoke
     * @param plcDataset The JSON representation of the INPUT/OUTPUT ProDataset
     * @param plcParameter The JSON Serializable INPUT/OUTPUT Parameter
     */
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="false").
    METHOD PUBLIC VOID InvokeWithSerializableObject (pcEntityName AS CHARACTER,
                                                     pcMethodName AS CHARACTER,
                                                     INPUT-OUTPUT plcDataset   AS LONGCHAR,
                                                     INPUT-OUTPUT plcParameter AS LONGCHAR):

        DEFINE VARIABLE hDataset         AS HANDLE                               NO-UNDO .
        DEFINE VARIABLE oParameter       AS GetBusinessEntityDescriptorParameter NO-UNDO .
        DEFINE VARIABLE oMethod          AS IInvokableMethodDescriptor           NO-UNDO .
        DEFINE VARIABLE oMethodParameter AS ISerializable                        NO-UNDO .
        DEFINE VARIABLE lcDataset        AS LONGCHAR                             NO-UNDO .

        ServiceInterface:Activate () .

        oParameter = NEW GetBusinessEntityDescriptorParameter () .

        ServiceInterface:InvokeMethod (pcEntityName,
                                       "GetBusinessEntityDescriptor":U,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oParameter) .

        IF VALID-HANDLE (hDataset) THEN
            DELETE OBJECT hDataset .

        ASSIGN hDataset = ?
               oMethod  = oParameter:Descriptor:InvokableMethods:GetItem (pcMethodName) .

        IF NOT VALID-OBJECT (oMethod) THEN
            UNDO, THROW NEW UnableToInvokeMethodException (SUBSTITUTE ("Unable to invoke method &1 without descriptor"{&TRAN},
                                                                       pcMethodName),
                                                           0) .

        DO ON ERROR UNDO, THROW:
            oMethodParameter = DYNAMIC-NEW (oMethod:ParameterClassName) () .

            oMethodParameter:Deserialize (plcParameter) .

            CATCH err AS Progress.Lang.Error:
                UNDO, THROW NEW UnableToDeserializeParameterObjectException (err,
                                                                             SUBSTITUTE ("Error deserializing the parameter object: &1"{&TRAN}, err:GetMessage(1)),
                                                                             0) .
            END CATCH.
        END.

        /* Mike Fechner, Consultingwerk Ltd. 05.06.2016
           SCL-1344: InvokeMethod should be passing an empty dataset to the
                     Business Entity Method when the JSON message did not
                     contain any JSON data for the dataset parameter*/
        ServiceInterface:FetchDataset (pcEntityName,
                                       OUTPUT DATASET-HANDLE hDataset) .

        IF oMethod:DatasetInput AND plcDataset > "":U THEN
            hDataset:READ-JSON ("longchar":U, plcDataset) .

        ServiceInterface:InvokeMethod (pcEntityName,
                                       pcMethodName,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oMethodParameter) .

        IF VALID-OBJECT (oMethodParameter) THEN
            ASSIGN plcParameter = oMethodParameter:Serialize() .
        ELSE
            ASSIGN plcParameter = ? .

        IF oMethod:DatasetOutput AND VALID-HANDLE (hDataset) THEN

        /* Mike Fechner, Consultingwerk Ltd. 19.05.2015
           JSON before image only form OE11.4 on */
        hDataset:WRITE-JSON ("longchar":U, lcDataset, TRUE, ?, ?, ?
&IF NOT PROVERSION BEGINS "10" AND NOT PROVERSION BEGINS "11.0" AND NOT PROVERSION BEGINS "11.1" AND NOT PROVERSION BEGINS "11.2" AND NOT PROVERSION BEGINS "11.3" &THEN
                             , TRUE
&ENDIF
                             ) .
        ELSE
            lcDataset = ? .

        ASSIGN plcDataset = lcDataset .

        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .

            UNDO, THROW err .
        END CATCH.

        FINALLY:
            IF VALID-HANDLE (hDataset) THEN
                DELETE OBJECT hDataset .

            ServiceInterface:Deactivate () .
        END FINALLY.

    END METHOD .

&IF NOT PROVERSION BEGINS "10" AND NOT PROVERSION EQ "11.0" AND NOT PROVERSION EQ "11.1" AND NOT PROVERSION EQ "11.2" AND NOT PROVERSION EQ "11.3" &THEN
    /**
     * Purpose: Generic Invoke Method Service Interface
     * Notes:   Pacific WebSpeed variant
     * @param pcEntityName The name of the Business Entity
     * @param pcMethodName The name of the method to invoke
     * @param poJsonObject The JsonObject with the request data
     * @return The JsonObject with the response data
     */
    METHOD PUBLIC JsonObject InvokeWithSerializableObject (pcEntityName AS CHARACTER,
                                                           pcMethodName AS CHARACTER,
                                                           poJsonObject AS JsonObject):

        DEFINE VARIABLE hDataset         AS HANDLE                               NO-UNDO .
        DEFINE VARIABLE oParameter       AS GetBusinessEntityDescriptorParameter NO-UNDO .
        DEFINE VARIABLE oMethod          AS IInvokableMethodDescriptor           NO-UNDO .
        DEFINE VARIABLE oMethodParameter AS JsonSerializable                     NO-UNDO .
        DEFINE VARIABLE oRequest         AS JsonObject                           NO-UNDO .
        DEFINE VARIABLE oResponse        AS JsonObject                           NO-UNDO .
        DEFINE VARIABLE oCustomization   AS IGenericServiceCustomization         NO-UNDO .

        ServiceInterface:Activate () .

        oParameter = NEW GetBusinessEntityDescriptorParameter () .

        ServiceInterface:InvokeMethod (pcEntityName,
                                       "GetBusinessEntityDescriptor":U,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset,
                                       oParameter) .

        IF VALID-HANDLE (hDataset) THEN
            DELETE OBJECT hDataset .

        ASSIGN hDataset = ?
               oMethod  = oParameter:Descriptor:InvokableMethods:GetItem (pcMethodName) .

        IF NOT VALID-OBJECT (oMethod) THEN
            UNDO, THROW NEW UnableToInvokeMethodException (SUBSTITUTE ("Unable to invoke method &1 without descriptor"{&TRAN},
                                                                       pcMethodName),
                                                           0) .

        IF poJsonObject:Has ("request":U) THEN
            oRequest = poJsonObject:GetJsonObject("request":U) .

        IF VALID-OBJECT (oRequest) AND oRequest:Has ("plcParameter":U) THEN
        DO ON ERROR UNDO, THROW:
            oMethodParameter = DYNAMIC-NEW (oMethod:ParameterClassName) () .

            oMethodParameter:DeserializeFromJsonObject (oRequest:GetJsonObject("plcParameter":U)) .

            CATCH err AS Progress.Lang.Error:
                UNDO, THROW NEW UnableToDeserializeParameterObjectException (err,
                                                                             SUBSTITUTE ("Error deserializing the parameter object: &1"{&TRAN}, err:GetMessage(1)),
                                                                             0) .
            END CATCH.
        END.

        /* Mike Fechner, Consultingwerk Ltd. 05.06.2016
           SCL-1344: InvokeMethod should be passing an empty dataset to the
                     Business Entity Method when the JSON message did not
                     contain any JSON data for the dataset parameter*/
        ServiceInterface:FetchDataset (pcEntityName,
                                       OUTPUT DATASET-HANDLE hDataset) .

        IF oMethod:DatasetInput AND VALID-OBJECT (oRequest) AND oRequest:Has ("plcDataset":U) THEN
            hDataset:READ-JSON ("JsonObject":U, oRequest:GetJsonObject("plcDataset":U)) .

&IF DEFINED (PacificWebSpeed) NE 0 &THEN
        IF VALID-OBJECT (THIS-OBJECT:WebRequest) THEN DO:
            oCustomization = {Consultingwerk/get-service.i IGenericServiceCustomization} .

            IF VALID-OBJECT (oCustomization) THEN
                oCustomization:CustomizeInvokeMethodParameter (pcEntityName,
                                                               pcMethodName,
                                                               THIS-OBJECT:WebRequest,
                                                               INPUT-OUTPUT oMethodParameter) .
        END.
&ENDIF

        ServiceInterface:InvokeMethod (pcEntityName,
                                       pcMethodName,
                                       INPUT-OUTPUT DATASET-HANDLE hDataset BY-REFERENCE,
                                       oMethodParameter) .

        oResponse = NEW JsonObject() .

        IF VALID-OBJECT (oMethodParameter) THEN
            oResponse:Add ("plcParameter":U,
                           oMethodParameter:ToJsonObject()) .

        IF oMethod:DatasetOutput AND VALID-HANDLE (hDataset) THEN
            oResponse:Add ("plcDataset":U,
                           JsonHelper:FromDataset(hDataset)) .

        RETURN oResponse .

        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .

            UNDO, THROW err .
        END CATCH.

        FINALLY:
            IF VALID-HANDLE (hDataset) THEN
                DELETE OBJECT hDataset .

            ServiceInterface:Deactivate () .
        END FINALLY.

    END METHOD .

    /**
     * Purpose: Generic Invoke Business Task Service Interface
     * Notes:   Pacific WebSpeed variant
     * @param poBusinessTask The Business Task Catalog Data instance
     * @param pcMethodName The name of the method to invoke
     * @param poJsonObject The JsonObject with the request data
     * @return The JsonObject with the response data
     */
    METHOD PUBLIC JsonObject InvokeBusinessTask (poBusinessTask AS IBusinessTaskCatalogData,
                                                 pcMethodName AS CHARACTER,
                                                 poJsonObject AS JsonObject):

        DEFINE VARIABLE hDataset1        AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE hDataset2        AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE hDataset3        AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE hDataset4        AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE hDataset5        AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE iDatasetCount    AS INTEGER                      NO-UNDO INITIAL 0 .
        DEFINE VARIABLE oMethod          AS IBusinessTaskMethodData      NO-UNDO .
        DEFINE VARIABLE oMethodParameter AS JsonSerializable             NO-UNDO .
        DEFINE VARIABLE oRequest         AS JsonObject                   NO-UNDO .
        DEFINE VARIABLE oResponse        AS JsonObject                   NO-UNDO .
        DEFINE VARIABLE i                AS INTEGER                      NO-UNDO .
        DEFINE VARIABLE oCustomization   AS IGenericServiceCustomization NO-UNDO .

        ServiceInterface:Activate () .

        oMethod = poBusinessTask:GetMethod (pcMethodName) .

        IF NOT VALID-OBJECT (oMethod) THEN
            UNDO, THROW NEW UnableToInvokeMethodException (SUBSTITUTE ("Unable to invoke method &1 without descriptor"{&TRAN},
                                                                       pcMethodName),
                                                           0) .

        IF poJsonObject:Has ("request":U) THEN
            oRequest = poJsonObject:GetJsonObject("request":U) .

        IF VALID-OBJECT (oRequest) AND oRequest:Has ("plcParameter":U) THEN
        DO ON ERROR UNDO, THROW:
            oMethodParameter = DYNAMIC-NEW (oMethod:ParameterClass:TypeName) () .

            oMethodParameter:DeserializeFromJsonObject (oRequest:GetJsonObject("plcParameter":U)) .

            CATCH err AS Progress.Lang.Error:
                UNDO, THROW NEW UnableToDeserializeParameterObjectException (err,
                                                                             SUBSTITUTE ("Error deserializing the parameter object: &1"{&TRAN}, err:GetMessage(1)),
                                                                             0) .
            END CATCH.
        END.

        /* Mike Fechner, Consultingwerk Ltd. 05.06.2016
           SCL-1344: InvokeMethod should be passing an empty dataset to the
                     Business Entity Method when the JSON message did not
                     contain any JSON data for the dataset parameter*/
        DO i = 1 TO EXTENT (oMethod:DatasetHandles):

            ASSIGN iDatasetCount = iDatasetCount + 1.

            IF oMethod:DatasetParameterMode[i] = DatasetParameterModeEnum:Input OR
               oMethod:DatasetParameterMode[i] = DatasetParameterModeEnum:InputOutput THEN DO:

               oMethod:DatasetHandles[i]:EMPTY-DATASET () .

                IF oRequest:Has (oMethod:DatasetHandles[i]:NAME) THEN
                    oMethod:DatasetHandles[i]:READ-JSON ("JsonObject":U, oRequest:GetJsonObject(oMethod:DatasetHandles[i]:NAME)) .
            END.

            CASE i:
                WHEN 1 THEN ASSIGN hDataset1 = oMethod:DatasetHandles[i] .
                WHEN 2 THEN ASSIGN hDataset2 = oMethod:DatasetHandles[i] .
                WHEN 3 THEN ASSIGN hDataset3 = oMethod:DatasetHandles[i] .
                WHEN 4 THEN ASSIGN hDataset4 = oMethod:DatasetHandles[i] .
                WHEN 5 THEN ASSIGN hDataset5 = oMethod:DatasetHandles[i] .
            END CASE .

        END.

&IF DEFINED (PacificWebSpeed) NE 0 &THEN
        IF VALID-OBJECT (THIS-OBJECT:WebRequest) THEN DO:
            oCustomization = {Consultingwerk/get-service.i IGenericServiceCustomization} .

            IF VALID-OBJECT (oCustomization) THEN
                oCustomization:CustomizeInvokeMethodParameter (poBusinessTask:BusinessTaskName,
                                                               pcMethodName,
                                                               THIS-OBJECT:WebRequest,
                                                               INPUT-OUTPUT oMethodParameter) .
        END.
&ENDIF

        CASE iDatasetCount:
            WHEN 0 THEN
                ServiceInterface:InvokeTask (poBusinessTask:BusinessTaskName,
                                             pcMethodName,
                                             oMethodParameter) .
            WHEN 1 THEN
                ServiceInterface:InvokeTask (poBusinessTask:BusinessTaskName,
                                             pcMethodName,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset1 BY-REFERENCE,
                                             oMethodParameter) .
            WHEN 2 THEN
                ServiceInterface:InvokeTask (poBusinessTask:BusinessTaskName,
                                             pcMethodName,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset1 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset2 BY-REFERENCE,
                                             oMethodParameter) .
            WHEN 3 THEN
                ServiceInterface:InvokeTask (poBusinessTask:BusinessTaskName,
                                             pcMethodName,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset1 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset2 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset3 BY-REFERENCE,
                                             oMethodParameter) .
            WHEN 4 THEN
                ServiceInterface:InvokeTask (poBusinessTask:BusinessTaskName,
                                             pcMethodName,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset1 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset2 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset3 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset4 BY-REFERENCE,
                                             oMethodParameter) .
            WHEN 5 THEN
                ServiceInterface:InvokeTask (poBusinessTask:BusinessTaskName,
                                             pcMethodName,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset1 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset2 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset3 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset4 BY-REFERENCE,
                                             INPUT-OUTPUT DATASET-HANDLE hDataset5 BY-REFERENCE,
                                             oMethodParameter) .
        END CASE .

        oResponse = NEW JsonObject() .

        IF VALID-OBJECT (oMethodParameter) THEN
            oResponse:Add ("plcParameter":U,
                           oMethodParameter:ToJsonObject()) .

        /* Mike Fechner, Consultingwerk Ltd. 05.06.2016
           SCL-1344: InvokeMethod should be passing an empty dataset to the
                     Business Entity Method when the JSON message did not
                     contain any JSON data for the dataset parameter*/
        DO i = 1 TO EXTENT (oMethod:DatasetHandles):

            IF oMethod:DatasetParameterMode[i] = DatasetParameterModeEnum:Output OR
               oMethod:DatasetParameterMode[i] = DatasetParameterModeEnum:InputOutput THEN DO:

                oResponse:Add (oMethod:DatasetHandles[i]:NAME,
                               JsonHelper:FromDataset(oMethod:DatasetHandles[i])) .
            END.
        END .

        RETURN oResponse .

        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .

            UNDO, THROW err .
        END CATCH.

        FINALLY:
            ServiceInterface:Deactivate () .
        END FINALLY.

    END METHOD .
&ENDIF

    /**
     * Purpose: Factory method for the CountRecordsRequest object passed to the
     *          ServiceInterface for the Count request
     * Notes:   Overridable method, so that extended versions of the Service.cls can
     *          inject extended CountRecordsRequest implementations
     * @param pcEntityName The entiy name of the current request
     * @param pcFilter The filter parameter value of the current request
     * @return The FetchDataRequest instance
     */
    METHOD PROTECTED CountRecordsRequest NewCountRecordsRequest (pcEntityName AS CHARACTER,
                                                                 pcFilter AS CHARACTER):

        RETURN NEW CountRecordsRequest () .

    END METHOD .

    /**
     * Purpose: Factory method for the FetchDataRequest object passed to the
     *          ServiceInterface for the GetData request
     * Notes:   Overridable method, so that extended versions of the Service.cls can
     *          inject extended FetchDataRequest implementations
     * @param pcEntityName The entiy name of the current request
     * @param pcFilter The filter parameter value of the current request
     * @return The FetchDataRequest instance
     */
    METHOD PROTECTED FetchDataRequest NewFetchDataRequest (pcEntityName AS CHARACTER,
                                                           pcFilter AS CHARACTER):

        RETURN NEW FetchDataRequest () .

    END METHOD .

    /**
     * Purpose: Parses the NamedQuery property of the Json Document
     * Notes:   Supports "NamedQuery" : "a simple name" for a NamedQueryParameter
     *          with only the name property set or a
     * @param poJsonObject The JsonObject to parse the NamedQuery property of
     * @return The resulting INamedQueryParameter instance
     */
    METHOD PROTECTED INamedQueryParameter ParseNamedQuery (poJsonObject AS JsonObject):

        DEFINE VARIABLE cPropertyName    AS CHARACTER            NO-UNDO .
        DEFINE VARIABLE oQueryJsonObject AS JsonObject           NO-UNDO .
        DEFINE VARIABLE oParameterArray  AS JsonArray            NO-UNDO .
        DEFINE VARIABLE oParameterObject AS JsonObject           NO-UNDO .
        DEFINE VARIABLE oNamedQuery      AS INamedQueryParameter NO-UNDO .
        DEFINE VARIABLE i                AS INTEGER              NO-UNDO .

        ASSIGN cPropertyName = JsonHelper:ExactPropertyName(poJsonObject, "NamedQuery":U) .

        IF cPropertyName = ? THEN
            UNDO, THROW NEW Exception ("Invalid Named Query Parameter.":U, 0) .

        CASE poJsonObject:GetType (cPropertyName):

            WHEN JsonDataType:STRING THEN
                RETURN NEW NamedQueryParameter (poJsonObject:GetCharacter (cPropertyName)) .
            WHEN JsonDataType:OBJECT THEN DO:

                oQueryJsonObject = poJsonObject:GetJsonObject (cPropertyName) .

                ASSIGN cPropertyName = JsonHelper:ExactPropertyName(oQueryJsonObject, "name":U) .

                IF cPropertyName = ? THEN
                    UNDO, THROW NEW Exception ("Named Query Parameter does not contain name.":U, 0) .

                oNamedQuery = NEW NamedQueryParameter (oQueryJsonObject:GetCharacter (cPropertyName)) .

                ASSIGN cPropertyName = JsonHelper:ExactPropertyName(oQueryJsonObject, "parameters":U) .

                IF cPropertyName > "":U THEN DO:

                    IF oQueryJsonObject:GetType (cPropertyName) <> JsonDataType:ARRAY THEN
                        UNDO, THROW NEW Exception ("Named Query Parameter must be passed as a JSON array.":U, 0) .

                    oParameterArray = oQueryJsonObject:GetJsonArray(cPropertyName) .

                    DO i = 1 TO oParameterArray:Length ON ERROR UNDO, THROW:

                        oParameterObject = oParameterArray:GetJsonObject(i) .

                        oNamedQuery:Parameters:Add (THIS-OBJECT:ParseNamedQueryParameter (oParameterObject)) .

                        CATCH err AS Progress.Lang.Error:
                            UNDO, THROW NEW Exception (err,
                                                       SUBSTITUTE ("Error processing Named Query Parameter List: &1":U,
                                                                   err:GetMessage (1)),
                                                       0) .
                        END CATCH.
                    END.
                END.

                RETURN oNamedQuery .
            END.
            OTHERWISE
                UNDO, THROW NEW Exception ("Unsupported Named Query type.":U, 0) .
        END CASE .

    END METHOD.

    /**
     * Purpose: Parses a single entry of the NamedQuery parameter array
     * Notes:
     * @param poJsonObject The JsonObject to parse the NamedQuery parameter from
     * @return The resulting NamedQueryParameterEntry instance
     */
    METHOD PROTECTED NamedQueryParameterEntry ParseNamedQueryParameter (poJsonObject AS JsonObject):

        DEFINE VARIABLE oEntry AS NamedQueryParameterEntry NO-UNDO .

        DEFINE VARIABLE cNameProperty  AS CHARACTER NO-UNDO .
        DEFINE VARIABLE cTypeProperty  AS CHARACTER NO-UNDO .
        DEFINE VARIABLE cValueProperty AS CHARACTER NO-UNDO .

        ASSIGN cNameProperty  = JsonHelper:ExactPropertyName(poJsonObject, "name":U)
               cTypeProperty  = JsonHelper:ExactPropertyName(poJsonObject, "type":U)
               cValueProperty = JsonHelper:ExactPropertyName(poJsonObject, "value":U) .

        Assert:NotNullOrEmpty(cNameProperty,  "Name Property":U) .
        Assert:NotNullOrEmpty(cTypeProperty,  "Type Property":U) .
        Assert:NotNullOrEmpty(cValueProperty, "Value Property":U) .

        oEntry = NEW NamedQueryParameterEntry () .

        ASSIGN oEntry:Name = poJsonObject:GetCharacter(cNameProperty) .

        CASE poJsonObject:GetCharacter(cTypeProperty):

            WHEN "character":U THEN
                oEntry:Value = NEW CharacterHolder (poJsonObject:GetCharacter(cValueProperty)) .
            WHEN "date":U THEN
                oEntry:Value = NEW DateHolder (poJsonObject:GetDate(cValueProperty)) .
            WHEN "datetime":U THEN
                oEntry:Value = NEW DateTimeHolder (poJsonObject:GetDatetime(cValueProperty)) .
            WHEN "datetime-tz":U THEN
                oEntry:Value = NEW DateTimeTzHolder (poJsonObject:GetDatetimeTZ(cValueProperty)) .
            WHEN "decimal":U THEN
                oEntry:Value = NEW DecimalHolder (poJsonObject:GetDecimal(cValueProperty)) .
            WHEN "int64":U THEN
                oEntry:Value = NEW Int64Holder (poJsonObject:GetInt64(cValueProperty)) .
            WHEN "integer":U THEN
                oEntry:Value = NEW IntegerHolder (poJsonObject:GetInteger(cValueProperty)) .
            WHEN "logical":U THEN
                oEntry:Value = NEW LogicalHolder (poJsonObject:GetLogical(cValueProperty)) .
            WHEN "object":U THEN
                oEntry:Value = poJsonObject:GetJsonObject(cValueProperty) .

        END CASE .

        RETURN oEntry .

    END METHOD .

    /**
     * Purpose: Parses the optional NumRecords argument
     * Notes:   Supports optional "all" and "one"
     * @param pcNumRecords The NumRecords argument as received from the http client
     * @return The numeric value for num records
     */
    METHOD PROTECTED INTEGER ParseNumRecords (pcNumRecords AS CHARACTER):

        IF pcNumRecords = "all":U THEN
            RETURN 0 .

        IF pcNumRecords = "one":U THEN
            RETURN 1 .

        RETURN IntegerType:ConvertFromString (pcNumRecords) .

    END METHOD .

    /**
     * Purpose: Parses the optional StopAfter argument
     * Notes:   Supports optional "disabled" and "none"
     * @param pcStopAfter The StopAfter argument as received from the http client
     * @return The numeric value for stop after
     */
    METHOD PROTECTED INTEGER ParseStopAfter (pcStopAfter AS CHARACTER):

        IF pcStopAfter = "disabled":U OR pcStopAfter = "none":U THEN
            RETURN 0 .

        RETURN IntegerType:ConvertFromString (pcStopAfter) .

    END METHOD .

&IF NOT PROVERSION BEGINS "10" AND NOT PROVERSION EQ "11.0" AND NOT PROVERSION EQ "11.1" AND NOT PROVERSION EQ "11.2" AND NOT PROVERSION EQ "11.3" &THEN
    /**
     * Purpose: Processes Create/Update/Delete operations
     * Notes:   Notes:   Pacific WebSpeed variant
     * @param pcEntityName The name of the Business Entity
     * @param poJsonObject The JSON Representation of the Dataset to update
     * @return The JsonObject with the result of the update operation
     */
    METHOD PUBLIC JsonObject ProcessUpdate (pcEntityName AS CHARACTER,
                                            poJsonObject AS JsonObject):

        DEFINE VARIABLE hDataset       AS HANDLE                       NO-UNDO .
        DEFINE VARIABLE oParameter     AS Progress.Lang.Object         NO-UNDO .
        DEFINE VARIABLE oCustomization AS IGenericServiceCustomization NO-UNDO .

        ObjectAssert:IsValid(poJsonObject, "poJsonObject":U) .

        ServiceInterface:Activate () .

        ServiceInterface:FetchDataset (pcEntityName,
                                       OUTPUT DATASET-HANDLE hDataset) .

        hDataset:READ-JSON ("JsonObject":U, poJsonObject) .

&IF DEFINED (PacificWebSpeed) NE 0 &THEN
        IF VALID-OBJECT (THIS-OBJECT:WebRequest) THEN DO:
            oCustomization = {Consultingwerk/get-service.i IGenericServiceCustomization} .

            IF VALID-OBJECT (oCustomization) THEN
                oParameter = oCustomization:CustomizeSaveChangesParameter (pcEntityName,
                                                                           THIS-OBJECT:WebRequest) .
        END.

        IF VALID-OBJECT (oParameter) THEN
            ServiceInterface:SaveChanges (pcEntityName,
                                          INPUT-OUTPUT DATASET-HANDLE hDataset BY-REFERENCE,
                                          oParameter) .
        ELSE
&ENDIF
            ServiceInterface:SaveChanges (pcEntityName,
                                          INPUT-OUTPUT DATASET-HANDLE hDataset BY-REFERENCE) .

        RETURN JsonHelper:FromDataset (hDataset) .

        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .

            UNDO, THROW err .
        END CATCH.

        FINALLY:
            IF VALID-HANDLE (hDataset) THEN
                DELETE OBJECT hDataset .

            ServiceInterface:Deactivate () .
        END FINALLY.

    END METHOD .
&ENDIF

    /**
     * Purpose: Processes Create/Update/Delete operations
     * Notes:   Worker method for CreateData, DeleteData and UpdateData as the
     *          rest adapter does not support using the same method for all three
     *          verbs - but all methods can share the same implementation
     * @param pcEntityName The name of the Business Entity
     * @param lcDataset The JSON Representation of the Dataset to update
     */
    METHOD PROTECTED VOID ProcessUpdate (pcEntityName AS CHARACTER,
                                         INPUT-OUTPUT lcDataset AS LONGCHAR):

        DEFINE VARIABLE hDataset AS HANDLE NO-UNDO.

        ServiceInterface:Activate () .

        ServiceInterface:FetchDataset (pcEntityName,
                                       OUTPUT DATASET-HANDLE hDataset) .

        hDataset:READ-JSON ("longchar":U, lcDataset) .

        ServiceInterface:SaveChanges (pcEntityName,
                                      INPUT-OUTPUT DATASET-HANDLE hDataset) .

        /* Mike Fechner, Consultingwerk Ltd. 19.05.2015
           JSON before image only form OE11.4 on */
        hDataset:WRITE-JSON ("longchar":U, lcDataset, TRUE, ?, ?, ?
&IF NOT PROVERSION BEGINS "10" AND NOT PROVERSION BEGINS "11.0" AND NOT PROVERSION BEGINS "11.1" AND NOT PROVERSION BEGINS "11.2" AND NOT PROVERSION BEGINS "11.3" &THEN
                             , TRUE
&ENDIF
                             ) .

        CATCH err AS Progress.Lang.Error:
            LogManager:WriteError (err) .

            UNDO, THROW err .
        END CATCH.

        FINALLY:
            IF VALID-HANDLE (hDataset) THEN
                DELETE OBJECT hDataset .

            ServiceInterface:Deactivate () .
        END FINALLY.

    END METHOD .

    /**
     * Purpose: Generic SubmitData (submit/create/delete/update) Service Interface
     * Notes:   Uses a LONGCHAR as INPUT-OUTPUT for the Dataset, to allow to map this
     *          to the actual data types of the fields in the Dataset from the business
     *          entity. The default mapping for JSON number would be a DECIMAL fields,
     *          which would cause conflicts integer fields in the business entity while
     *          updating
     * @param pcEntityName The name of the Business Entity
     * @param lcDataset The JSON Representation of the Dataset to update
     */
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
    METHOD PUBLIC VOID SubmitData (pcEntityName AS CHARACTER,
                                   INPUT-OUTPUT lcDataset AS LONGCHAR):

        THIS-OBJECT:ProcessUpdate (pcEntityName, INPUT-OUTPUT lcDataset) .

    END METHOD.

    /**
     * Purpose: Generic UpdateData (put/update) Service Interface
     * Notes:   Uses a LONGCHAR as INPUT-OUTPUT for the Dataset, to allow to map this
     *          to the actual data types of the fields in the Dataset from the business entity.
     *          The default mapping for JSON number would be a DECIMAL fields, which
     *          would cause conflicts integer fields in the business entity while
     *          updating
     * @param pcEntityName The name of the Business Entity
     * @param lcDataset The JSON Representation of the Dataset to update
     */
    @openapi.openedge.export(type="REST", useReturnValue="false", writeDataSetBeforeImage="true").
    METHOD PUBLIC VOID UpdateData (pcEntityName AS CHARACTER,
                                   INPUT-OUTPUT lcDataset AS LONGCHAR):

        THIS-OBJECT:ProcessUpdate (pcEntityName, INPUT-OUTPUT lcDataset) .

    END METHOD.

END CLASS.
