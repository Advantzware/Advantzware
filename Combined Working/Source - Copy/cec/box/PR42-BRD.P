/* ---------------------------------------------- cec/box/pr42-brd.p 2/93 cd  */
/* box - 2 sheet                                                              */
/* -------------------------------------------------------------------------- */

def input  parameter v-vend-no like e-item-vend.vend-no NO-UNDO.
def output parameter v-vend-list AS CHAR NO-UNDO.

def shared var cocode as cha no-undo.
def shared var locode as cha no-undo.
def shared var qty as INT NO-UNDO.
def var j as int no-undo.
def var i as int no-undo.
def var zzz as DEC no-undo.
def var call_id as recid no-undo.

def shared buffer xest for est.
def shared buffer xef  for ef.
def shared buffer xeb  for eb.

{cec/print4.i shared shared}
{cec/print42.i shared}

def new shared var maxco as int no-undo.
def var tmp-waste as de extent 99 no-undo.
def var max-w as de no-undo.
def var fr-mshts as de no-undo.
def var rm-wt$ as de no-undo.
def var rm-wt% as de no-undo.

def var rm-wt  as de no-undo.
def var cumul as dec no-undo.
def var v-on-f as int no-undo.
def var v-spo as dec no-undo.
def var v-line like est-op.line no-undo.
def var v-setup like e-item-vend.setup no-undo.
def var v-qty as dec decimals 10 no-undo.
def var v-uom  like b-uom no-undo.
def var v-cost like b-cost no-undo.
def var v-msh  like b-msh no-undo.
def var v-out  as   int no-undo.
DEF VAR v-num-up AS INT NO-UNDO. 
def var v-msf  as   dec no-undo.
DEF VAR lv-bestvend-id AS ROWID NO-UNDO.
DEF VAR lv-save-vend LIKE v-vend-no NO-UNDO.
DEF VAR ll-foam AS LOG NO-UNDO.
DEF VAR hld-qty LIKE save-qty NO-UNDO.
def var v-num-out as int NO-UNDO.
DEF VAR ld-rm-rate AS DEC NO-UNDO.
DEF VAR v-board-total AS DEC NO-UNDO.
DEF VAR v-run-total AS DEC NO-UNDO.
DEF VAR v-purchased AS LOG NO-UNDO.

DEF VAR old-save-qty LIKE save-qty NO-UNDO.
DEF VAR old-b-qty LIKE b-qty NO-UNDO.

def shared var v-drop-rc as log no-undo.

def shared workfile w-form
    field form-no like xef.form-no
    field min-msf as   log.

{cec/msfcalc.i}

{sys/inc/foamcost.i}
{sys/inc/ceboard.i}
{sys/inc/cecpurwas.i}

find first ce-ctrl {sys/look/ce-ctrlW.i} no-lock no-error.

lv-save-vend = v-vend-no.

for each xef where xef.company = xest.company
               and xef.est-no    eq xest.est-no
               and (xef.form-no eq v-form-no or (not vmclean2))
    NO-LOCK
    BY xef.form-no
    with frame brd2 no-labels no-box width 80 down stream-io:

 RUN sys/inc/numup.p (xef.company, xef.est-no, xef.form-no, OUTPUT v-num-up).

 RUN est/ef-#out.p (ROWID(xef), OUTPUT v-out).

 RUN cec/isitfoam.p (ROWID(xef), OUTPUT ll-foam).
               
 tmp-waste = 0. /* zero array */
 find first item {sys/look/itemW.i} and
    item.i-no = xef.board no-lock no-error.
 if avail item then find first e-item of item no-lock no-error.
 find first xeb 
     where xeb.company = xest.company 
       and xeb.est-no   eq xest.est-no 
       and xeb.form-no eq xef.form-no 
     no-lock no-error.

 IF xest.est-type EQ 6 THEN DO:
   RUN cec/box/prokalk2.p (500, ?).

   /*
   b-waste = 0.

   for each est-op where est-op.company = xest.company and
                         est-op.est-no = xest.est-no and
                         est-op.s-num eq xef.form-no
                     and est-op.line  gt 500 
       by est-op.d-seq desc by est-op.line desc:

     run sys/inc/numout.p (recid(est-op), output v-on-f).

     if est-op.op-sb then
       b-waste = b-waste + (est-op.op-waste / v-on-f).
     else
       tmp-waste[xeb.blank-no] = tmp-waste[xeb.blank-no] +
                                 (est-op.op-waste / (xeb.num-up * v-out)).

     if b-waste = ? then b-waste = 0.

     {sys/inc/roundup.i b-waste}
     {sys/inc/roundup.i tmp-waste[xeb.blank-no]}
   end.
   max-w = 0.
   do i = 1 to 99:
     if tmp-waste[i] gt max-w then
     max-w = tmp-waste[i].
   end.
   /* max-w = most waste for blank fed ops this sheet */
   b-waste = b-waste + max-w.
  */
   b-waste = spo.
 END.

 ELSE DO:
   RUN cec/com/prokalk.p.

   b-waste = 0.
   for each est-op where est-op.company = xest.company
                     aND est-op.est-no = xest.est-no
                     AND est-op.line > 500          and
                         est-op.s-num = xef.form-no and
                         est-op.b-num = 0 NO-LOCK:
     run sys/inc/numout.p (recid(est-op), output v-num-out).
     b-waste = b-waste + (est-op.op-waste / v-num-out).
   end.
   for each est-op where est-op.company = xest.company
                     aND est-op.est-no = xest.est-no
                     AND est-op.line > 500          and
                         est-op.s-num = xef.form-no and
                         est-op.b-num ne 0 no-lock:
     run sys/inc/numout.p (recid(est-op), output v-num-out).
     b-waste = b-waste + (est-op.op-waste / (v-num-up * v-num-out)).
   end.
   {sys/inc/roundup.i b-waste}
   r-spo[xef.form-no] = xef.gsh-qty - t-shtfrm[xef.form-no] - b-waste.
 END.

 IF r-spo[xef.form-no] LT 0 THEN
    r-spo[xef.form-no] = 0.

 if avail e-item then
 find first e-item-vend of e-item
     where e-item-vend.item-type eq yes
       and e-item-vend.vend-no   eq (IF lv-save-vend EQ "bestvendor" THEN ""
                                     ELSE lv-save-vend)
     no-lock no-error.

 printboard: do:
  if avail item then 
  find first item-bom 
      where item-bom.company  eq cocode
        and item-bom.parent-i eq item.i-no
        AND item-bom.line# LT 9
      no-lock no-error.
  if avail item-bom and not avail e-item-vend then leave printboard.
  
  /* board */
  if xef.board ne "" then
  do with frame aa no-labels no-box stream-io:
    FIND FIRST est-op
        WHERE est-op.company EQ xef.company
          AND est-op.est-no  EQ xef.est-no
          AND est-op.qty     EQ v-op-qty
          AND est-op.s-num   EQ xef.form-no
          AND est-op.line    GE 500
        NO-LOCK NO-ERROR.

    IF ll-foam THEN DO:
      v-out = 1.
      RUN cec/foamblks.p (ROWID(xef), OUTPUT v-num-up).
    END.

    assign
     v-setup  = 0
     /* msf for  job */
     hld-qty   = t-blkqty[xef.form-no].

    IF cecpurwaste-log AND xeb.pur-man THEN
       ASSIGN
       save-qty = t-shtfrm[xef.form-no]
       old-save-qty = t-shtfrm[xef.form-no] + b-waste + r-spo[xef.form-no]
       old-b-qty = old-save-qty *
                 if v-corr then (xef.gsh-len * xef.gsh-wid * .000007)
                           else (xef.gsh-len * xef.gsh-wid / 144000).
    ELSE
       save-qty  = t-shtfrm[xef.form-no] + b-waste + r-spo[xef.form-no].

    ASSIGN
     b-qty     = save-qty *
                 if v-corr then (xef.gsh-len * xef.gsh-wid * .000007)
                           else (xef.gsh-len * xef.gsh-wid / 144000)
     v-msf     = b-qty                     
     save-qty  = save-qty * v-num-up * v-out.

    if t-blkqty[xef.form-no] eq 0 then t-blkqty[xef.form-no] = qty.

    {cec/pr4-brd.i}

    v-purchased = xeb.pur-man.

    IF b-uom EQ "MSF" THEN DO:
      IF  v-board-cost-from-blank AND ll-foam THEN 
          ASSIGN
            v-board-total = b-msh * (xeb.t-len * xeb.t-wid * (IF xeb.t-dep > 0 THEN xeb.t-dep ELSE 1) / 144) * hld-qty / 1000
            v-run-total   = b-msh * (xeb.t-len * xeb.t-wid * (IF xeb.t-dep > 0 THEN xeb.t-dep ELSE 1) / 144) 
                            * r-spo[xef.form-no] * b-msh / 1000.
          
      ELSE
          ASSIGN
             v-board-total = (if v-corr then (xef.gsh-len * xef.gsh-wid * .000007)
                                 else (xef.gsh-len * xef.gsh-wid / 144000))
                         * t-shtfrm[xef.form-no] * b-msh
             v-run-total = (if v-corr then (xef.gsh-len * xef.gsh-wid * .000007)
                                 else (xef.gsh-len * xef.gsh-wid / 144000))
                         * r-spo[xef.form-no] * b-msh.
      ASSIGN
             /*b-cost = b-cost / save-qty * t-blkqty[xef.form-no].*/
             b-cost = v-board-total / ((t-blkqty[xef.form-no] / 1000))

             /*b-tot  = b-cost * (t-blkqty[xef.form-no] / 1000)
             b-totw = (b-tot / t-shtfrm[xef.form-no]) * b-waste*/
             b-totw = (v-board-total / t-shtfrm[xef.form-no]) * b-waste.

    END.
    ELSE
       ASSIGN
          b-cost = b-cost / save-qty * t-blkqty[xef.form-no]
          v-board-total  = b-cost * (t-blkqty[xef.form-no] / 1000)
          v-run-total = (b-cost * (r-spo[xef.form-no] * v-num-up * v-out / 1000))
          b-totw = (v-board-total / t-shtfrm[xef.form-no]) * b-waste.

    IF cecpurwaste-log AND xeb.pur-man THEN
       ASSIGN
          save-qty = old-save-qty
          b-qty = old-b-qty
          v-msf = b-qty.

    /* cost per sht * #wasted shts */
    if NOT xeb.pur-man AND xef.nc = no then
       assign  b-msh = 0  b-cost = 0  b-tot = 0  b-totw = 0 v-setup = 0
               v-board-total = 0 v-run-total = 0.

    ASSIGN
      dm-tot[3] = dm-tot[3] + b-totw + v-setup
      dm-tot[5] = dm-tot[5] + /*b-tot*/ v-board-total + b-totw + v-setup
      r-spo$[xef.form-no] = (/*b-tot*/ v-board-total / t-shtfrm[xef.form-no]) * r-spo[xef.form-no]
      /* add run spoil */
      dm-tot[5] = dm-tot[5] + r-spo$[xef.form-no].

    /***b-msh = b-tot / (t-shtfrm[xef.form-no] / 1000).***/

    display
      string(xef.form-no,"99") + "-0" format "x(4)"
      item.i-name format "x(20)" item.basis-w item.cal format ">9.999<"
      v-vend-no
      "$" + string(b-msh,">>>>9.99") format "x(9)" to 50 b-uom space(0)
      v-setup when v-setup ne 0 format ">>>9.99" to 63
      /*b-cost*/ v-board-total / ((t-blkqty[xef.form-no] / 1000)) +
                (v-setup / (t-blkqty[xef.form-no] / 1000)) 
                                format ">>>>9.99" to 71
      /*b-tot*/ v-board-total + v-setup format ">>>>>9.99" to 80 skip
      space(5)
      "Board MR  Waste"
      b-waste format ">>>>>9" to 50 space(0) " Sht" space(0)
      (/*b-tot*/ v-board-total / t-shtfrm[xef.form-no]) * b-waste format ">>>9.99" to 63
      /* cost of waste amortized per 1000 of all blanks on this form */
      (b-waste * (/*b-tot*/ v-board-total / t-shtfrm[xef.form-no])) /
      (t-blkqty[xef.form-no] / 1000) format ">>>>9.99" to 71
      b-totw to 80 format ">>>>>9.99" skip
      space(5)
      "Board Run Waste"
      r-spo[xef.form-no] format ">>>>>9" to 50 space(0) " Sht" space(0)
      /* cost of spoil amortized per 1000 of all blanks on this form */
      /*(b-cost * (r-spo[xef.form-no] * v-num-up * v-out / 1000)) /
          (t-blkqty[xef.form-no] / 1000)*/
          v-run-total / (t-blkqty[xef.form-no] / 1000)
        format ">>>>9.99" to 71
      /*(b-cost * (r-spo[xef.form-no] * v-num-up * v-out / 1000)) */
         v-run-total 
      format ">>>>>9.99" to 80 skip with stream-io .

    lin-count = lin-count + 1.

    if NOT xeb.pur-man AND not avail item-bom then do:
       find first brd where brd.form-no = xef.form-no and
                            brd.i-no    = xef.board
                            no-error.
       
       if not avail brd then
       do:
          create brd.
          assign brd.form-no = xef.form-no
                 brd.blank-no = 00
                 brd.i-no    = xef.board
                 brd.dscr    = xef.brd-dscr
                 brd.basis-w = item.basis-w.
       end.
      
       ASSIGN
       brd.qty = t-shtfrm[xef.form-no] + b-waste + r-spo[xef.form-no]
       brd.qty-uom = "EA"
       brd.sc-uom = b-uom
       brd.cost = b-msh + (v-setup / b-qty)
       brd.len  = if xef.gsh-len ne 0 then xef.gsh-len else xef.lsh-len
       brd.wid  = if xef.gsh-wid ne 0 then xef.gsh-wid else xef.lsh-wid
       brd.cost-m = b-cost +
                    ((v-setup +
                     (b-cost * ((b-waste + r-spo[xef.form-no]) *
                                                  v-num-up * v-out / 1000))) /
                     (t-blkqty[xef.form-no] / 1000)).
    end.

    zzz = 0.
    if xef.fr-msh ne 0 then
    do:
      if xef.fr-uom = "MSH" then
      zzz =  (t-shtfrm[xef.form-no] / 1000) * xef.fr-msh.
      else
      if xef.fr-uom = "MSF" then
      zzz =  v-msf * xef.fr-msh.
      else
      if xef.fr-uom = "TON" then
      zzz = ((v-msf * xef.weight) / 2000) * xef.fr-msh.
      else
      if xef.fr-uom = "CWT" then
      zzz = ((v-msf * xef.weight) / 100 ) * xef.fr-msh.
      PUT space(5) "Freight In Costs" "$" +
        string(xef.fr-msh,">>>9.99") to 50 space(1) xef.fr-uom
        zzz to 80 skip.
    end.
    ASSIGN
    fr-mshts = zzz
    dm-tot[5] = dm-tot[5] +  fr-mshts.
  end.

  /* rm handling chg per cwt*/
  ld-rm-rate = IF xeb.pur-man THEN rm-rate-f ELSE ctrl[3].
  IF ld-rm-rate GT 0 THEN
    ASSIGN
     rm-wt    = v-msf * item.basis-w
     rm-wt$   = (rm-wt / 100) * ld-rm-rate
     ctrl2[3] = ctrl2[3] + rm-wt$.

  /* distribute cost to each blank */
  for each xeb of xef:
  find first blk where blk.snum = xeb.form-no and
    blk.bnum = xeb.blank-no and
    blk.id   = xeb.part-no no-error.
  if ctrl[3] ne 0 then
     blk.lab = blk.lab + (rm-wt$ * blk.pct).

  blk.cost = blk.cost + ((/*b-tot*/ v-board-total + v-setup + b-totw + fr-mshts + rm-wt$ + /*rm-wt% +*/
  + (b-cost * (r-spo[xef.form-no] * v-num-up * v-out / 1000))) * blk.pct).
  end.
  find xeb where recid(xeb) = call_id no-lock no-error.

  /*v-dec = t-blkqty[xef.form-no] / (t-blksht[xef.form-no] * v-out).
  {sys/inc/roundup.i v-dec}
  xef.gsh-qty = v-dec + b-waste + r-spo[xef.form-no].*/
 end. 
  
 if xef.board ne "" then
 printmed-lin:
 do with frame aaxx2 no-labels no-box stream-io:
   /* If bom (medium/liner) exist, then only print item
      code with the bom items calculated as costs */
   if avail(item) then 
   find first item-bom 
       where item-bom.company  eq cocode
         and item-bom.parent-i eq item.i-no
         AND item-bom.line# LT 9
       no-lock no-error.
   if avail(item-bom) then do:
     display xef.brd-dscr "     -----Bill of materials:" WITH STREAM-IO.
     run cec/box/pr42-mfl.p (v-vend-no, (not avail e-item-vend)). /* medium-flute-liner-laminate */
   end.
 end.

 /*task 06091001*/
 IF vprint AND v-purchased THEN
    v-vend-no = lv-save-vend.
end.

call_id = recid(item).

/* end ---------------------------------- copr. 1992  advanced software, inc. */
