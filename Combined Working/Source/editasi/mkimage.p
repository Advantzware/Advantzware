/* mkimage.p */

DEFINE INPUT PARAMETER file-name AS CHARACTER NO-UNDO.

DEFINE VARIABLE primflds AS CHARACTER NO-UNDO.
DEFINE VARIABLE fld-type AS CHARACTER NO-UNDO.
DEFINE VARIABLE fld-frmt AS CHARACTER NO-UNDO.
DEFINE VARIABLE i AS INTEGER NO-UNDO.

OUTPUT TO 'editasi/dbimage.p'.
PUT UNFORMATTED '/* dbimage.p - generated '
  TODAY FORMAT '99/99/9999' ' */' SKIP(1)
  '/* this program was generated by mkimage.p and should not be modified */' SKIP
  '/* modifications should be made to the auto generation program        */' SKIP.
FIND dictdb._file WHERE dictdb._file._file-name = file-name NO-LOCK.
RUN 'editasi/primflds.p' (dictdb._file._file-name,OUTPUT primflds).
PUT UNFORMATTED SKIP(1)
  'DEFINE INPUT PARAMETER action AS CHARACTER NO-UNDO.' SKIP
  'DEFINE INPUT-OUTPUT PARAMETER key_value AS CHARACTER NO-UNDO.' SKIP
  'DEFINE INPUT-OUTPUT PARAMETER table_rowid AS ROWID NO-UNDO.' SKIP(1).
PUT UNFORMATTED
  'IF table_rowid NE ? THEN' SKIP
  'FIND ' dictdb._file._file-name
  ' WHERE ROWID(' dictdb._file._file-name ') = table_rowid'
  ' NO-LOCK NO-ERROR.' SKIP
  'CASE action:' SKIP.
RUN Create_Case ('FIRST').
RUN Create_Case ('NEXT').
RUN Create_Case ('PREV').
RUN Create_Case ('LAST').
RUN Create_Case ('GET').
PUT UNFORMATTED
  '  WHEN ~"APPLY~" THEN' SKIP
  '  DO:' SKIP
  '    IF table_rowid NE ? THEN' SKIP
  '    FIND ' dictdb._file._file-name
  ' WHERE ROWID(' dictdb._file._file-name ') = table_rowid'
  ' EXCLUSIVE-LOCK NO-ERROR.' SKIP
  '    ~{editasi/dbimage.i}' SKIP
  '  END.' SKIP
  '  WHEN ~"APPLY-ALL~" THEN' SKIP
  '  FOR EACH ' dictdb._file._file-name ' ~{editasi/dbimage.whr} EXCLUSIVE-LOCK:' SKIP
  '    ~{editasi/dbimage.i}' SKIP
  '  END.' SKIP
  'END CASE.' SKIP
  'IF AVAILABLE ' dictdb._file._file-name ' THEN' SKIP
  'DO:' SKIP
  '  ASSIGN' SKIP
  '    key_value = FILL(~",~",' NUM-ENTRIES(primflds) - 1 ')' SKIP.
DO i = 1 TO NUM-ENTRIES(primflds):
  RUN "editasi/get_type.p" (dictdb._file._file-name,ENTRY(i,primflds),OUTPUT fld-type).
  PUT UNFORMATTED '    ENTRY(' i ',key_value) = '.
  IF fld-type NE 'STRING' THEN
  PUT UNFORMATTED 'STRING('.
  PUT UNFORMATTED dictdb._file._file-name '.' ENTRY(i,primflds).
  IF fld-type NE 'STRING' THEN
  PUT UNFORMATTED ')'.
  PUT UNFORMATTED SKIP.
END.
PUT UNFORMATTED '    table_rowid = ROWID(' dictdb._file._file-name ').' SKIP
  '  OUTPUT TO editasi/table.d.' SKIP.
FOR EACH dictdb._field OF dictdb._file NO-LOCK:
  DO i = 0 TO dictdb._field._extent:
    IF dictdb._field._extent NE 0 AND i = dictdb._field._extent THEN
    LEAVE.
    PUT UNFORMATTED '  EXPORT ~"' dictdb._field._field-name.
    IF dictdb._field._extent NE 0 THEN
    PUT UNFORMATTED '[' i + 1 ']'.
    PUT UNFORMATTED '~"'.
    PUT UNFORMATTED ' ' dictdb._file._file-name '.' dictdb._field._field-name.
    IF dictdb._field._extent NE 0 THEN
    PUT UNFORMATTED '[' i + 1 ']'.
    PUT UNFORMATTED '.' SKIP.
  END.
END.
PUT UNFORMATTED '  OUTPUT CLOSE.' SKIP 'END.' SKIP.
OUTPUT TO 'editasi/dbimage.i'.
OUTPUT CLOSE.

PROCEDURE Create_Case:
  DEFINE INPUT PARAMETER action AS CHARACTER NO-UNDO.

  PUT UNFORMATTED
    '  WHEN ~"' action '~" THEN' SKIP
    '  FIND ' (IF action = 'GET' THEN 'FIRST' ELSE action)
    ' ' dictdb._file._file-name.
  IF action = 'GET' AND primflds NE '' THEN
  DO:
    PUT UNFORMATTED SKIP '       WHERE '.
    DO i = 1 TO NUM-ENTRIES(primflds):
      RUN "editasi/get_type.p" (dictdb._file._file-name,ENTRY(i,primflds),OUTPUT fld-type).
      IF i NE 1 THEN
      PUT UNFORMATTED '         AND '.
      PUT UNFORMATTED
        dictdb._file._file-name '.' ENTRY(i,primflds) ' GE '.
      IF NOT CAN-DO('STRING,LOGICAL',fld-type) THEN
      PUT UNFORMATTED CAPS(fld-type) '('.
      IF fld-type = 'LOGICAL' THEN
      PUT UNFORMATTED
        '(IF ENTRY(' i ',key_value) = ~"yes~" THEN yes ELSE no)'.
      ELSE
      PUT UNFORMATTED 'ENTRY(' i ',key_value)'.
      IF NOT CAN-DO('STRING,LOGICAL',fld-type) THEN
      PUT UNFORMATTED ')'.
      PUT UNFORMATTED SKIP.
    END.
    PUT UNFORMATTED '      '.
  END.
  ELSE
  PUT UNFORMATTED ' ~{editasi/dbimage.whr}'.
  PUT UNFORMATTED
    ' NO-LOCK NO-ERROR.' SKIP.
END PROCEDURE.
