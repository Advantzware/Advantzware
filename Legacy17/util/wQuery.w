&ANALYZE-SUSPEND _VERSION-NUMBER AB_v10r12 GUI ADM2
&ANALYZE-RESUME
&Scoped-define WINDOW-NAME wWin
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS wWin 
/*------------------------------------------------------------------------
  File: pt/wQuery.w
  Description: Generic Program to allow users to build/save/open reports for display in Excel
  Input Parameters: <none>
  Output Parameters: <none>
  History: First draft - MYT - 9/22/16
           Revision: MYT - 5/14/17 - clean up build query issues
  Notes:
------------------------------------------------------------------------*/
/*          This .W file was created with the Progress AB.              */
/*----------------------------------------------------------------------*/

/* Create an unnamed pool to store all the widgets created 
     by this procedure. This is a good default which assures
     that this procedure's triggers and internal procedures 
     will execute in this procedure's storage, and that proper
     cleanup will occur on deletion of the procedure. */

CREATE WIDGET-POOL.

/* ***************************  Definitions  ************************** */

/* Parameters Definitions ---                                           */

/* Local Variable Definitions ---                                       */
&SCOPED-DEFINE FRAME-NAME f-main
&SCOPED-DEFINE IN IN FRAME {&FRAME-NAME}
&SCOPED-DEFINE SV SCREEN-VALUE {&IN}
&SCOPED-DEFINE LeaveList ~
tOpenParen-1,~
tOpenParen-2,~
tOpenParen-3,~
tOpenParen-4,~
tOpenParen-5,~
tOpenParen-6,~
tOpenParen-7,~
tOpenParen-8,~
tOpenParen-9,~
tOpenParen-10,~
tOpenParen-11,~
tOpenParen-12,~
tOpenParen-13,~
tOpenParen-14,~
tOpenParen-15,~
tOpenParen-16,~
tOpenParen-17,~
tOpenParen-18,~
tOpenParen-19,~
tOpenParen-20,~
tCloseParen-1,~
tCloseParen-2,~
tCloseParen-3,~
tCloseParen-4,~
tCloseParen-5,~
tCloseParen-6,~
tCloseParen-7,~
tCloseParen-8,~
tCloseParen-9,~
tCloseParen-10,~
tCloseParen-11,~
tCloseParen-12,~
tCloseParen-13,~
tCloseParen-14,~
tCloseParen-15,~
tCloseParen-16,~
tCloseParen-17,~
tCloseParen-18,~
tCloseParen-19,~
tCloseParen-20,~
cbWhere-1,~
cbWhere-2,~
cbWhere-3,~
cbWhere-4,~
cbWhere-5,~
cbWhere-6,~
cbWhere-7,~
cbWhere-8,~
cbWhere-9,~
cbWhere-10,~
cbWhere-11,~
cbWhere-12,~
cbWhere-13,~
cbWhere-14,~
cbWhere-15,~
cbWhere-16,~
cbWhere-17,~
cbWhere-18,~
cbWhere-19,~
cbWhere-20,~
cbOp-1,~
cbOp-2,~
cbOp-3,~
cbOp-4,~
cbOp-5,~
cbOp-6,~
cbOp-7,~
cbOp-8,~
cbOp-9,~
cbOp-10,~
cbOp-11,~
cbOp-12,~
cbOp-13,~
cbOp-14,~
cbOp-15,~
cbOp-16,~
cbOp-17,~
cbOp-18,~
cbOp-19,~
cbOp-20,~
cbAnd-1,~
cbAnd-2,~
cbAnd-3,~
cbAnd-4,~
cbAnd-6,~
cbAnd-7,~
cbAnd-8,~
cbAnd-9,~
cbAnd-11,~
cbAnd-12,~
cbAnd-13,~
cbAnd-14,~
cbAnd-16,~
cbAnd-17,~
cbAnd-18,~
cbAnd-19,~
cbOf-2,~
cbOf-3,~
cbOf-4,~
cbRel-2,~
cbRel-3,~
cbRel-4

DEF VAR cDataType AS CHAR EXTENT 20 NO-UNDO.
DEF VAR cColList AS CHAR NO-UNDO.
DEF VAR cInputQuery AS CHAR NO-UNDO.
DEF VAR cFileList AS CHAR NO-UNDO.
DEF VAR cFieldList AS CHAR EXTENT 4 NO-UNDO.
DEF VAR cExcludeList AS CHAR EXTENT 4 NO-UNDO.
DEF VAR lLoading AS LOG NO-UNDO.
DEF VAR h_frame AS HANDLE NO-UNDO.
DEF VAR h_field AS HANDLE NO-UNDO.
DEF VAR h_continue AS HANDLE NO-UNDO.
DEF VAR hBuffer AS HANDLE EXTENT 4 NO-UNDO.
DEF VAR hQuery AS HANDLE NO-UNDO.
DEF VAR hBrowse AS HANDLE NO-UNDO.
DEF VAR hColumn AS HANDLE EXTENT 300 NO-UNDO.
DEF VAR iCtr AS INT NO-UNDO.
DEF VAR jCtr AS INT NO-UNDO.
DEF VAR cStatus AS CHAR NO-UNDO.
DEF VAR lProcessed AS LOG NO-UNDO.
DEF VAR cFileName AS CHAR NO-UNDO.
DEF VAR hCalcCol AS HANDLE EXTENT 20 NO-UNDO.
DEF VAR cFldDataType AS CHAR NO-UNDO.
DEF VAR cFldFormat AS CHAR NO-UNDO.
DEF VAR cFldInitVal AS CHAR NO-UNDO.
DEF VAR cFldColLabel AS CHAR NO-UNDO. 
DEF VAR iFldPosition AS INT NO-UNDO.
DEF VAR cFldFormula AS CHAR NO-UNDO.
DEF VAR cFullFieldList AS CHAR NO-UNDO.
DEF VAR chExcelApplication AS COM-HANDLE NO-UNDO.
DEF VAR chWorkbook AS COM-HANDLE NO-UNDO.
DEF VAR chWorksheet AS COM-HANDLE NO-UNDO.
DEF VAR lQueryOK AS LOG NO-UNDO.
DEF VAR cDataString AS CHAR NO-UNDO.
DEF VAR cTempString AS CHAR NO-UNDO.
DEF VAR lSlide AS LOG NO-UNDO.
DEF VAR vcbFile-1 AS CHAR NO-UNDO.
DEF VAR vcbFile-2 AS CHAR NO-UNDO.
DEF VAR vcbFile-3 AS CHAR NO-UNDO.
DEF VAR vcbFile-4 AS CHAR NO-UNDO.
DEF VAR lContinue AS LOG NO-UNDO.

DEF TEMP-TABLE ttColumns
    FIELD cColLabel AS CHAR
    FIELD cColType AS CHAR
    FIELD cColumn AS CHAR
    FIELD cDataType AS CHAR
    FIELD cDispLabel AS CHAR
    FIELD cField AS CHAR
    FIELD cFormat AS CHAR
    FIELD cFormula AS CHAR
    FIELD cInitVal AS CHAR
    FIELD cLabel AS CHAR
    FIELD cTable AS CHAR
    FIELD iBand AS INT
    FIELD iColumn AS INT
    FIELD iExtent AS INT
    FIELD iIdx AS INT
    FIELD iPos AS INT
    FIELD iRow AS INT
    INDEX idxPos IS PRIMARY iPos.

DEF BUFFER bttColumns FOR ttColumns.
ASSIGN
    cColList = "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,"
    cColList = cColList + "AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,"
    cColList = cColList + "BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,"
    cColList = cColList + "CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,"
    cColList = cColList + "DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX,DY,DZ,"
    cColList = cColList + "EA,EB,EC,ED,EE,EF,EG,EH,EI,EJ,EK,EL,EM,EN,EO,EP,EQ,ER,ES,ET,EU,EV,EW,EX,EY,EZ,"
    cColList = cColList + "FA,FB,FC,FD,FE,FF,FG,FH,FI,FJ,FK,FL,FM,FN,FO,FP,FQ,FR,FS,FT,FU,FV,FW,FX,FY,FZ,"
    cColList = cColList + "GA,GB,GC,GD,GE,GF,GG,GH,GI,GJ,GK,GL,GM,GN,GO,GP,GQ,GR,GS,GT,GU,GV,GW,GX,GY,GZ,"
    cColList = cColList + "HA,HB,HC,HD,HE,HF,HG,HH,HI,HJ,HK,HL,HM,HN,HO,HP,HQ,HR,HS,HT,HU,HV,HW,HX,HY,HZ,"
    cColList = cColList + "IA,IB,IC,ID,IE,IF,IG,IH,II,IJ,IK,IL,IM,IN,IO,IP,IQ,IR,IS,IT,IU,IV,IW,IX,IY,IZ,"
    cColList = cColList + "JA,JB,JC,JD,JE,JF,JG,JH,JI,JJ,JK,JL,JM,JN,JO,JP,JQ,JR,JS,JT,JU,JV,JW,JX,JY,JZ,"
    cColList = cColList + "KA,KB,KC,KD,KE,KF,KG,KH,KI,KJ,KK,KL,KM,KN,KO,KP,KQ,KR,KS,KT,KU,KV,KW,KX,KY,KZ,"
    cColList = cColList + "LA,LB,LC,LD,LE,LF,LG,LH,LI,LJ,LK,LL,LM,LN,LO,LP,LQ,LR,LS,LT,LU,LV,LW,LX,LY,LZ,"
    cColList = cColList + "MA,MB,MC,MD,ME,MF,MG,MH,MI,MJ,MK,ML,MM,MN,MO,MP,MQ,MR,MS,MT,MU,MV,MW,MX,MY,MZ,"
    cColList = cColList + "NA,NB,NC,ND,NE,NF,NG,NH,NI,NJ,NK,NL,NM,NN,NO,NP,NQ,NR,NS,NT,NU,NV,NW,NX,NY,NZ,"
    cColList = cColList + "OA,OB,OC,OD,OE,OF,OG,OH,OI,OJ,OK,OL,OM,ON,OO,OP,OQ,OR,OS,OT,OU,OV,OW,OX,OY,OZ,"
    cColList = cColList + "PA,PB,PC,PD,PE,PF,PG,PH,PI,PJ,PK,PL,PM,PN,PO,PP,PQ,PR,PS,PT,PU,PV,PW,PX,PY,PZ,"
    cColList = cColList + "QA,QB,QC,QD,QE,QF,QG,QH,QI,QJ,QK,QL,QM,QN,QO,QP,QQ,QR,QS,QT,QU,QV,QW,QX,QY,QZ,"
    cColList = cColList + "RA,RB,RC,RD,RE,RF,RG,RH,RI,RJ,RK,RL,RM,RN,RO,RP,RQ,RR,RS,RT,RU,RV,RW,RX,RY,RZ,"
    cColList = cColList + "SA,SB,SC,SD,SE,SF,SG,SH,SI,SJ,SK,SL,SM,SN,SO,SP,SQ,SR,SS,ST,SU,SV,SW,SX,SY,SZ,"
    cColList = cColList + "TA,TB,TC,TD,TE,TF,TG,TH,TI,TJ,TK,TL,TM,TN,TO,TP,TQ,TR,TS,TT,TU,TV,TW,TX,TY,TZ,"
    cColList = cColList + "UA,UB,UC,UD,UE,UF,UG,UH,UI,UJ,UK,UL,UM,UN,UO,UP,UQ,UR,US,UT,UU,UV,UW,UX,UY,UZ,"
    cColList = cColList + "VA,VB,VC,VD,VE,VF,VG,VH,VI,VJ,VK,VL,VM,VN,VO,VP,VQ,VR,VS,VT,VU,VV,VW,VX,VY,VZ,"
    cColList = cColList + "WA,WB,WC,WD,WE,WF,WG,WH,WI,WJ,WK,WL,WM,WN,WO,WP,WQ,WR,WS,WT,WU,WV,WW,WX,WY,WZ,"
    cColList = cColList + "XA,XB,XC,XD,XE,XF,XG,XH,XI,XJ,XK,XL,XM,XN,XO,XP,XQ,XR,XS,XT,XU,XV,XW,XX,XY,XZ,"
    cColList = cColList + "YA,YB,YC,YD,YE,YF,YG,YH,YI,YJ,YK,YL,YM,YN,YO,YP,YQ,YR,YS,YT,YU,YV,YW,YX,YY,YZ,"
    cColList = cColList + "ZA,ZB,ZC,ZD,ZE,ZF,ZG,ZH,ZI,ZJ,ZK,ZL,ZM,ZN,ZO,ZP,ZQ,ZR,ZS,ZT,ZU,ZV,ZW,ZX,ZY,ZZ".
    .

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE SmartWindow
&Scoped-define DB-AWARE no

&Scoped-define ADM-CONTAINER WINDOW

&Scoped-define ADM-SUPPORTED-LINKS Data-Target,Data-Source,Page-Target,Update-Source,Update-Target,Filter-target,Filter-Source

/* Name of designated FRAME-NAME and/or first browse and/or first query */
&Scoped-define FRAME-NAME f-Main

/* Standard List Definitions                                            */
&Scoped-Define ENABLED-OBJECTS bExpand bFields-1 cbFile-1 tMore-0 fiRptName ~
tOpenParen-1 cbWhere-1 cbOp-1 fiVal-1 tCloseParen-1 cbAnd-1 bCheckSyntax ~
tOpenParen-2 cbWhere-2 cbOp-2 fiVal-2 tCloseParen-2 cbAnd-2 eQuery bDown-1 ~
tOpenParen-3 cbWhere-3 cbOp-3 fiVal-3 tCloseParen-3 cbAnd-3 tOpenParen-4 ~
cbWhere-4 cbOp-4 fiVal-4 tCloseParen-4 cbAnd-4 tOpenParen-5 cbWhere-5 ~
cbOp-5 fiVal-5 tCloseParen-5 bFields-2 tMore-1 cbFile-2 cbOf-2 cbRel-2 ~
tOpenParen-6 cbWhere-6 cbOp-6 fiVal-6 tCloseParen-6 cbAnd-6 bUp-2 ~
fiLockedCols slDisplayFields tOpenParen-7 cbWhere-7 cbOp-7 fiVal-7 ~
tCloseParen-7 cbAnd-7 bDown-2 fiPagesWide tOpenParen-8 cbWhere-8 cbOp-8 ~
fiVal-8 tCloseParen-8 cbAnd-8 tOpenParen-9 cbWhere-9 cbOp-9 fiVal-9 ~
tCloseParen-9 cbAnd-9 bMoveUp tOpenParen-10 cbWhere-10 cbOp-10 fiVal-10 ~
tCloseParen-10 bMoveDown tMore-2 bFields-3 cbFile-3 cbOf-3 cbRel-3 bRemove ~
tOpenParen-11 cbWhere-11 cbOp-11 fiVal-11 tCloseParen-11 cbAnd-11 ~
bCalcField bUp-3 tOpenParen-12 cbWhere-12 cbOp-12 fiVal-12 tCloseParen-12 ~
cbAnd-12 bDown-3 bEditField tOpenParen-13 cbWhere-13 cbOp-13 fiVal-13 ~
tCloseParen-13 cbAnd-13 bLineBreak tOpenParen-14 cbWhere-14 cbOp-14 ~
fiVal-14 tCloseParen-14 cbAnd-14 tOpenParen-15 cbWhere-15 cbOp-15 fiVal-15 ~
tCloseParen-15 bProcess bClear bFields-4 tMore-3 cbFile-4 cbOf-4 cbRel-4 ~
tOpenParen-16 cbWhere-16 cbOp-16 fiVal-16 tCloseParen-16 cbAnd-16 bUp-4 ~
tOpenParen-17 cbWhere-17 cbOp-17 fiVal-17 tCloseParen-17 cbAnd-17 ~
tOpenParen-18 cbWhere-18 cbOp-18 fiVal-18 tCloseParen-18 cbAnd-18 ~
tOpenParen-19 cbWhere-19 cbOp-19 fiVal-19 tCloseParen-19 cbAnd-19 ~
tOpenParen-20 cbWhere-20 cbOp-20 fiVal-20 tCloseParen-20 
&Scoped-Define DISPLAYED-OBJECTS cbFile-1 tMore-0 fiRptName tOpenParen-1 ~
cbWhere-1 cbOp-1 fiVal-1 tCloseParen-1 cbAnd-1 tOpenParen-2 cbWhere-2 ~
cbOp-2 fiVal-2 tCloseParen-2 cbAnd-2 eQuery tOpenParen-3 cbWhere-3 cbOp-3 ~
fiVal-3 tCloseParen-3 cbAnd-3 tOpenParen-4 cbWhere-4 cbOp-4 fiVal-4 ~
tCloseParen-4 cbAnd-4 tOpenParen-5 cbWhere-5 cbOp-5 fiVal-5 tCloseParen-5 ~
tMore-1 cbFile-2 cbOf-2 cbRel-2 fiWhere-2 tOpenParen-6 cbWhere-6 cbOp-6 ~
fiVal-6 tCloseParen-6 cbAnd-6 fiLockedCols slDisplayFields tOpenParen-7 ~
cbWhere-7 cbOp-7 fiVal-7 tCloseParen-7 cbAnd-7 fiPagesWide tOpenParen-8 ~
cbWhere-8 cbOp-8 fiVal-8 tCloseParen-8 cbAnd-8 tOpenParen-9 cbWhere-9 ~
cbOp-9 fiVal-9 tCloseParen-9 cbAnd-9 tOpenParen-10 cbWhere-10 cbOp-10 ~
fiVal-10 tCloseParen-10 tMore-2 fiWhere-3 cbFile-3 cbOf-3 cbRel-3 ~
tOpenParen-11 cbWhere-11 cbOp-11 fiVal-11 tCloseParen-11 cbAnd-11 ~
tOpenParen-12 cbWhere-12 cbOp-12 fiVal-12 tCloseParen-12 cbAnd-12 ~
tOpenParen-13 cbWhere-13 cbOp-13 fiVal-13 tCloseParen-13 cbAnd-13 ~
tOpenParen-14 cbWhere-14 cbOp-14 fiVal-14 tCloseParen-14 cbAnd-14 ~
tOpenParen-15 cbWhere-15 cbOp-15 fiVal-15 tCloseParen-15 tMore-3 cbFile-4 ~
cbOf-4 fiWhere-4 cbRel-4 tOpenParen-16 cbWhere-16 cbOp-16 fiVal-16 ~
tCloseParen-16 cbAnd-16 tOpenParen-17 cbWhere-17 cbOp-17 fiVal-17 ~
tCloseParen-17 cbAnd-17 tOpenParen-18 cbWhere-18 cbOp-18 fiVal-18 ~
tCloseParen-18 cbAnd-18 tOpenParen-19 cbWhere-19 cbOp-19 fiVal-19 ~
tCloseParen-19 cbAnd-19 tOpenParen-20 cbWhere-20 cbOp-20 fiVal-20 ~
tCloseParen-20 

/* Custom List Definitions                                              */
/* List-1,List-2,List-3,List-4,List-5,List-6                            */
&Scoped-define List-1 cbWhere-1 cbWhere-2 

/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* ***********************  Control Definitions  ********************** */

/* Define the widget handle for the window                              */
DEFINE VAR wWin AS WIDGET-HANDLE NO-UNDO.

/* Menu Definitions                                                     */
DEFINE SUB-MENU m_File 
       MENU-ITEM m_New          LABEL "New"           
       MENU-ITEM m_Open         LABEL "Open..."       
       MENU-ITEM m_Save         LABEL "Save"          
       MENU-ITEM m_Save_As      LABEL "Save As..."    
       RULE
       MENU-ITEM m_Excel        LABEL "Export to Excel"
       MENU-ITEM m_Export_to_CSV LABEL "Export to CSV" 
       RULE
       MENU-ITEM m_Quit         LABEL "Quit"          .

DEFINE SUB-MENU m_Edit 
       MENU-ITEM m_Check_Syntax LABEL "Check Syntax"  
       RULE
       MENU-ITEM m_Process      LABEL "Process"       
       MENU-ITEM m_Clear_Query  LABEL "Clear Query"   .

DEFINE MENU MENU-BAR-wWin MENUBAR
       SUB-MENU  m_File         LABEL "File"          
       SUB-MENU  m_Edit         LABEL "Edit"          .


/* Definitions of the field level widgets                               */
DEFINE BUTTON bCalcField 
     LABEL "Add Calc Field" 
     SIZE 17 BY 1.14.

DEFINE BUTTON bCheckSyntax 
     LABEL "Check syntax" 
     SIZE 15 BY 1.

DEFINE BUTTON bClear 
     LABEL "Clear" 
     SIZE 15 BY 1.

DEFINE BUTTON bDown-1 
     IMAGE-UP FILE "images/down.bmp":U
     LABEL "Down" 
     SIZE 4 BY 1.14.

DEFINE BUTTON bDown-2 
     IMAGE-UP FILE "images/down.bmp":U
     LABEL "Down" 
     SIZE 4 BY 1.14.

DEFINE BUTTON bDown-3 
     IMAGE-UP FILE "images/down.bmp":U
     LABEL "Down" 
     SIZE 4 BY 1.14.

DEFINE BUTTON bEditField 
     LABEL "Edit Field" 
     SIZE 17 BY 1.14.

DEFINE BUTTON bExpand 
     IMAGE-UP FILE "images/expand.jpg":U NO-FOCUS FLAT-BUTTON
     LABEL "Button 1" 
     SIZE 5.2 BY 1.19 TOOLTIP "Expand/Contract Result List".

DEFINE BUTTON bFields-1 
     LABEL "F" 
     SIZE 4 BY 1.14 TOOLTIP "Select Fields to Display".

DEFINE BUTTON bFields-2 
     LABEL "F" 
     SIZE 4 BY 1.14 TOOLTIP "Select Fields to Display".

DEFINE BUTTON bFields-3 
     LABEL "F" 
     SIZE 4 BY 1.14 TOOLTIP "Select Fields to Display".

DEFINE BUTTON bFields-4 
     LABEL "F" 
     SIZE 4 BY 1.14 TOOLTIP "Select Fields to Display".

DEFINE BUTTON bLineBreak 
     LABEL "Insert Line Break" 
     SIZE 17 BY 1.14.

DEFINE BUTTON bMoveDown 
     LABEL "Move Down" 
     SIZE 17 BY 1.

DEFINE BUTTON bMoveUp 
     LABEL "Move Up" 
     SIZE 17 BY 1.

DEFINE BUTTON bProcess 
     LABEL "Process" 
     SIZE 15 BY 1.

DEFINE BUTTON bRemove 
     LABEL "Remove Field" 
     SIZE 17 BY 1.14.

DEFINE BUTTON bUp-2 
     IMAGE-UP FILE "images/up.bmp":U
     LABEL "Up" 
     SIZE 4 BY 1.14.

DEFINE BUTTON bUp-3 
     IMAGE-UP FILE "images/up.bmp":U
     LABEL "Up" 
     SIZE 4 BY 1.14.

DEFINE BUTTON bUp-4 
     IMAGE-UP FILE "images/up.bmp":U
     LABEL "Up" 
     SIZE 4 BY 1.14.

DEFINE VARIABLE cbAnd-1 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-11 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-12 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-13 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-14 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-16 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-17 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-18 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-19 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-2 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-3 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-4 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-6 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-7 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-8 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbAnd-9 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 3
     LIST-ITEMS "-","AND","OR" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbFile-1 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 30
     DROP-DOWN-LIST
     SIZE 25 BY 1 NO-UNDO.

DEFINE VARIABLE cbFile-2 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 30
     DROP-DOWN-LIST
     SIZE 25 BY 1 NO-UNDO.

DEFINE VARIABLE cbFile-3 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 30
     DROP-DOWN-LIST
     SIZE 25 BY 1 NO-UNDO.

DEFINE VARIABLE cbFile-4 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 30
     DROP-DOWN-LIST
     SIZE 25 BY 1 NO-UNDO.

DEFINE VARIABLE cbOf-2 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 2
     LIST-ITEMS "OF","WHERE" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOf-3 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 2
     LIST-ITEMS "OF","WHERE" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOf-4 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 2
     LIST-ITEMS "OF","WHERE" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-1 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-10 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-11 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-12 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-13 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-14 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-15 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-16 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-17 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-18 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-19 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-2 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-20 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-3 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-4 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-5 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-6 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-7 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-8 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbOp-9 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 8
     LIST-ITEMS "=","<>",">",">=","<","<=","BEGINS","MATCHES" 
     DROP-DOWN-LIST
     SIZE 11 BY 1 NO-UNDO.

DEFINE VARIABLE cbRel-2 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 5
     DROP-DOWN-LIST
     SIZE 24 BY 1 NO-UNDO.

DEFINE VARIABLE cbRel-3 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 5
     DROP-DOWN-LIST
     SIZE 24 BY 1 NO-UNDO.

DEFINE VARIABLE cbRel-4 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 5
     DROP-DOWN-LIST
     SIZE 24 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-1 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-10 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-11 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-12 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-13 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-14 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-15 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-16 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-17 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-18 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-19 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-2 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-20 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-3 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-4 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-5 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-6 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-7 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-8 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE cbWhere-9 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS COMBO-BOX INNER-LINES 32
     DROP-DOWN-LIST
     SIZE 21 BY 1 NO-UNDO.

DEFINE VARIABLE eDummy AS CHARACTER 
     VIEW-AS EDITOR NO-WORD-WRAP SCROLLBAR-HORIZONTAL SCROLLBAR-VERTICAL
     SIZE 62 BY 7.52 NO-UNDO.

DEFINE VARIABLE eQuery AS CHARACTER 
     VIEW-AS EDITOR SCROLLBAR-VERTICAL
     SIZE 62 BY 6.24 NO-UNDO.

DEFINE VARIABLE fiLockedCols AS INTEGER FORMAT ">9":U INITIAL 1 
     LABEL "Locked Cols" 
     VIEW-AS FILL-IN 
     SIZE 6 BY 1 NO-UNDO.

DEFINE VARIABLE fiPagesWide AS INTEGER FORMAT ">9":U INITIAL 99 
     LABEL "Pages Wide" 
     VIEW-AS FILL-IN 
     SIZE 6 BY 1 NO-UNDO.

DEFINE VARIABLE fiRptName AS CHARACTER FORMAT "X(256)":U 
     LABEL "Report Name" 
     VIEW-AS FILL-IN 
     SIZE 90 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-1 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-10 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-11 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-12 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-13 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-14 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-15 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-16 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-17 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-18 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-19 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-2 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-20 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-3 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-4 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-5 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-6 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-7 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-8 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiVal-9 AS CHARACTER FORMAT "X(256)":U 
     VIEW-AS FILL-IN 
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE fiWhere-2 AS CHARACTER FORMAT "X(256)":U INITIAL "WHERE" 
     VIEW-AS FILL-IN 
     SIZE 10 BY 1 NO-UNDO.

DEFINE VARIABLE fiWhere-3 AS CHARACTER FORMAT "X(256)":U INITIAL "WHERE" 
     VIEW-AS FILL-IN 
     SIZE 10 BY 1 NO-UNDO.

DEFINE VARIABLE fiWhere-4 AS CHARACTER FORMAT "X(256)":U INITIAL "WHERE" 
     VIEW-AS FILL-IN 
     SIZE 10 BY 1 NO-UNDO.

DEFINE VARIABLE slDisplayFields AS CHARACTER 
     VIEW-AS SELECTION-LIST SINGLE SCROLLBAR-VERTICAL 
     SIZE 42 BY 11.76 NO-UNDO.

DEFINE VARIABLE tCloseParen-1 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-10 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-11 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-12 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-13 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-14 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-15 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-16 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-17 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-18 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-19 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-2 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-20 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-3 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-4 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-5 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-6 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-7 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-8 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tCloseParen-9 AS LOGICAL INITIAL no 
     LABEL ")" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tMore-0 AS LOGICAL INITIAL yes 
     LABEL "EACH" 
     VIEW-AS TOGGLE-BOX
     SIZE 8 BY 1 NO-UNDO.

DEFINE VARIABLE tMore-1 AS LOGICAL INITIAL no 
     LABEL "EACH" 
     VIEW-AS TOGGLE-BOX
     SIZE 8 BY 1 NO-UNDO.

DEFINE VARIABLE tMore-2 AS LOGICAL INITIAL no 
     LABEL "EACH" 
     VIEW-AS TOGGLE-BOX
     SIZE 8 BY 1 NO-UNDO.

DEFINE VARIABLE tMore-3 AS LOGICAL INITIAL no 
     LABEL "EACH" 
     VIEW-AS TOGGLE-BOX
     SIZE 8 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-1 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-10 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-11 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-12 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-13 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-14 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-15 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-16 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-17 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-18 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-19 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-2 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-20 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-3 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-4 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-5 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-6 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-7 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-8 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.

DEFINE VARIABLE tOpenParen-9 AS LOGICAL INITIAL no 
     LABEL "(" 
     VIEW-AS TOGGLE-BOX
     SIZE 4 BY 1 NO-UNDO.


/* ************************  Frame Definitions  *********************** */

DEFINE FRAME f-Main
     bExpand AT ROW 24.67 COL 96
     bFields-1 AT ROW 1.29 COL 42
     cbFile-1 AT ROW 1.48 COL 14 COLON-ALIGNED NO-LABEL
     tMore-0 AT ROW 1.52 COL 7 WIDGET-ID 2
     fiRptName AT ROW 1.52 COL 70 COLON-ALIGNED
     tOpenParen-1 AT ROW 2.76 COL 16
     cbWhere-1 AT ROW 2.76 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-1 AT ROW 2.76 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-1 AT ROW 2.76 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-1 AT ROW 2.76 COL 77
     cbAnd-1 AT ROW 2.76 COL 80 COLON-ALIGNED NO-LABEL
     bCheckSyntax AT ROW 2.76 COL 145
     tOpenParen-2 AT ROW 4 COL 16
     cbWhere-2 AT ROW 4 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-2 AT ROW 4 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-2 AT ROW 4 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-2 AT ROW 4 COL 77
     cbAnd-2 AT ROW 4 COL 80 COLON-ALIGNED NO-LABEL
     eQuery AT ROW 4 COL 101 NO-LABEL
     bDown-1 AT ROW 4.24 COL 7 WIDGET-ID 8
     tOpenParen-3 AT ROW 5.24 COL 16
     cbWhere-3 AT ROW 5.24 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-3 AT ROW 5.24 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-3 AT ROW 5.24 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-3 AT ROW 5.24 COL 77
     cbAnd-3 AT ROW 5.24 COL 80 COLON-ALIGNED NO-LABEL
     tOpenParen-4 AT ROW 6.52 COL 16
     cbWhere-4 AT ROW 6.52 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-4 AT ROW 6.52 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-4 AT ROW 6.52 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-4 AT ROW 6.52 COL 77
     cbAnd-4 AT ROW 6.52 COL 80 COLON-ALIGNED NO-LABEL
     tOpenParen-5 AT ROW 7.76 COL 16
     cbWhere-5 AT ROW 7.76 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-5 AT ROW 7.76 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-5 AT ROW 7.76 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-5 AT ROW 7.76 COL 77
     bFields-2 AT ROW 9.1 COL 42
     tMore-1 AT ROW 9.33 COL 7
     cbFile-2 AT ROW 9.33 COL 14 COLON-ALIGNED NO-LABEL
     cbOf-2 AT ROW 9.33 COL 45 COLON-ALIGNED NO-LABEL
     cbRel-2 AT ROW 9.33 COL 57 COLON-ALIGNED NO-LABEL
     fiWhere-2 AT ROW 9.33 COL 82 COLON-ALIGNED NO-LABEL NO-TAB-STOP 
     tOpenParen-6 AT ROW 10.52 COL 16
     cbWhere-6 AT ROW 10.52 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-6 AT ROW 10.52 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-6 AT ROW 10.52 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-6 AT ROW 10.52 COL 77
     cbAnd-6 AT ROW 10.52 COL 80 COLON-ALIGNED NO-LABEL
     bUp-2 AT ROW 10.67 COL 7 WIDGET-ID 12
     fiLockedCols AT ROW 11.48 COL 155 COLON-ALIGNED
     slDisplayFields AT ROW 11.52 COL 101 NO-LABEL
     tOpenParen-7 AT ROW 11.76 COL 16
     cbWhere-7 AT ROW 11.76 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-7 AT ROW 11.76 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-7 AT ROW 11.76 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-7 AT ROW 11.76 COL 77
     cbAnd-7 AT ROW 11.76 COL 80 COLON-ALIGNED NO-LABEL
     bDown-2 AT ROW 12.05 COL 7 WIDGET-ID 10
     fiPagesWide AT ROW 12.95 COL 155 COLON-ALIGNED
     tOpenParen-8 AT ROW 13 COL 16
     cbWhere-8 AT ROW 13 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-8 AT ROW 13 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-8 AT ROW 13 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-8 AT ROW 13 COL 77
     cbAnd-8 AT ROW 13 COL 80 COLON-ALIGNED NO-LABEL
     tOpenParen-9 AT ROW 14.24 COL 16
     cbWhere-9 AT ROW 14.24 COL 18 COLON-ALIGNED NO-LABEL
    WITH 1 DOWN NO-BOX KEEP-TAB-ORDER OVERLAY 
         SIDE-LABELS NO-UNDERLINE THREE-D 
         AT COL 1 ROW 1
         SIZE 164 BY 31.96.

/* DEFINE FRAME statement is approaching 4K Bytes.  Breaking it up   */
DEFINE FRAME f-Main
     cbOp-9 AT ROW 14.24 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-9 AT ROW 14.24 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-9 AT ROW 14.24 COL 77
     cbAnd-9 AT ROW 14.24 COL 80 COLON-ALIGNED NO-LABEL
     bMoveUp AT ROW 14.48 COL 146
     tOpenParen-10 AT ROW 15.52 COL 16
     cbWhere-10 AT ROW 15.52 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-10 AT ROW 15.52 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-10 AT ROW 15.52 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-10 AT ROW 15.52 COL 77
     bMoveDown AT ROW 15.67 COL 146
     tMore-2 AT ROW 16.86 COL 7
     bFields-3 AT ROW 16.86 COL 42
     fiWhere-3 AT ROW 16.86 COL 82 COLON-ALIGNED NO-LABEL NO-TAB-STOP 
     cbFile-3 AT ROW 16.95 COL 14 COLON-ALIGNED NO-LABEL
     cbOf-3 AT ROW 16.95 COL 45 COLON-ALIGNED NO-LABEL
     cbRel-3 AT ROW 16.95 COL 57 COLON-ALIGNED NO-LABEL
     bRemove AT ROW 16.95 COL 146
     tOpenParen-11 AT ROW 18.24 COL 16
     cbWhere-11 AT ROW 18.24 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-11 AT ROW 18.24 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-11 AT ROW 18.24 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-11 AT ROW 18.24 COL 77
     cbAnd-11 AT ROW 18.24 COL 80 COLON-ALIGNED NO-LABEL
     bCalcField AT ROW 18.48 COL 146
     bUp-3 AT ROW 18.52 COL 7 WIDGET-ID 16
     tOpenParen-12 AT ROW 19.52 COL 16
     cbWhere-12 AT ROW 19.52 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-12 AT ROW 19.52 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-12 AT ROW 19.52 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-12 AT ROW 19.52 COL 77
     cbAnd-12 AT ROW 19.52 COL 80 COLON-ALIGNED NO-LABEL
     bDown-3 AT ROW 19.86 COL 7 WIDGET-ID 14
     bEditField AT ROW 19.95 COL 146
     tOpenParen-13 AT ROW 20.76 COL 16
     cbWhere-13 AT ROW 20.76 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-13 AT ROW 20.76 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-13 AT ROW 20.76 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-13 AT ROW 20.76 COL 77
     cbAnd-13 AT ROW 20.76 COL 80 COLON-ALIGNED NO-LABEL
     bLineBreak AT ROW 21.48 COL 146
     tOpenParen-14 AT ROW 22 COL 16
     cbWhere-14 AT ROW 22 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-14 AT ROW 22 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-14 AT ROW 22 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-14 AT ROW 22 COL 77
     cbAnd-14 AT ROW 22 COL 80 COLON-ALIGNED NO-LABEL
     tOpenParen-15 AT ROW 23.24 COL 16
     cbWhere-15 AT ROW 23.24 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-15 AT ROW 23.24 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-15 AT ROW 23.24 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-15 AT ROW 23.24 COL 77
     bProcess AT ROW 23.52 COL 124
     bClear AT ROW 23.62 COL 148
     bFields-4 AT ROW 24.43 COL 42
     tMore-3 AT ROW 24.67 COL 7
     cbFile-4 AT ROW 24.67 COL 14 COLON-ALIGNED NO-LABEL
     cbOf-4 AT ROW 24.67 COL 45 COLON-ALIGNED NO-LABEL
     fiWhere-4 AT ROW 24.67 COL 82 COLON-ALIGNED NO-LABEL NO-TAB-STOP 
     cbRel-4 AT ROW 24.71 COL 57 COLON-ALIGNED NO-LABEL
     eDummy AT ROW 24.76 COL 101 NO-LABEL NO-TAB-STOP 
     tOpenParen-16 AT ROW 26 COL 16
     cbWhere-16 AT ROW 26 COL 18 COLON-ALIGNED NO-LABEL
    WITH 1 DOWN NO-BOX KEEP-TAB-ORDER OVERLAY 
         SIDE-LABELS NO-UNDERLINE THREE-D 
         AT COL 1 ROW 1
         SIZE 164 BY 31.96.

/* DEFINE FRAME statement is approaching 4K Bytes.  Breaking it up   */
DEFINE FRAME f-Main
     cbOp-16 AT ROW 26 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-16 AT ROW 26 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-16 AT ROW 26 COL 77
     cbAnd-16 AT ROW 26 COL 80 COLON-ALIGNED NO-LABEL
     bUp-4 AT ROW 26.05 COL 7 WIDGET-ID 20
     tOpenParen-17 AT ROW 27.24 COL 16
     cbWhere-17 AT ROW 27.24 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-17 AT ROW 27.24 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-17 AT ROW 27.24 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-17 AT ROW 27.24 COL 77
     cbAnd-17 AT ROW 27.24 COL 80 COLON-ALIGNED NO-LABEL
     tOpenParen-18 AT ROW 28.52 COL 16
     cbWhere-18 AT ROW 28.52 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-18 AT ROW 28.52 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-18 AT ROW 28.52 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-18 AT ROW 28.52 COL 77
     cbAnd-18 AT ROW 28.52 COL 80 COLON-ALIGNED NO-LABEL
     tOpenParen-19 AT ROW 29.76 COL 16
     cbWhere-19 AT ROW 29.76 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-19 AT ROW 29.76 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-19 AT ROW 29.76 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-19 AT ROW 29.76 COL 77
     cbAnd-19 AT ROW 29.76 COL 80 COLON-ALIGNED NO-LABEL
     tOpenParen-20 AT ROW 31 COL 16
     cbWhere-20 AT ROW 31 COL 18 COLON-ALIGNED NO-LABEL
     cbOp-20 AT ROW 31 COL 40 COLON-ALIGNED NO-LABEL
     fiVal-20 AT ROW 31 COL 52 COLON-ALIGNED NO-LABEL
     tCloseParen-20 AT ROW 31 COL 77
     "RESULT LIST" VIEW-AS TEXT
          SIZE 17 BY 1 AT ROW 23.52 COL 100
     "WHERE" VIEW-AS TEXT
          SIZE 8 BY 1 AT ROW 1.48 COL 47
     "QUERY STRING:" VIEW-AS TEXT
          SIZE 17 BY 1 AT ROW 3 COL 100
     "(Calculated field values are only displayed after Export.)" VIEW-AS TEXT
          SIZE 55 BY .67 AT ROW 32.19 COL 101
     "DISPLAY FIELDS" VIEW-AS TEXT
          SIZE 17 BY 1 AT ROW 10.52 COL 100
     "FOR" VIEW-AS TEXT
          SIZE 5 BY 1.1 AT ROW 1.52 COL 2 WIDGET-ID 4
    WITH 1 DOWN NO-BOX KEEP-TAB-ORDER OVERLAY 
         SIDE-LABELS NO-UNDERLINE THREE-D 
         AT COL 1 ROW 1
         SIZE 164 BY 31.96.


/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: SmartWindow
   Allow: Basic,Browse,DB-Fields,Query,Smart,Window
   Container Links: Data-Target,Data-Source,Page-Target,Update-Source,Update-Target,Filter-target,Filter-Source
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
IF SESSION:DISPLAY-TYPE = "GUI":U THEN
  CREATE WINDOW wWin ASSIGN
         HIDDEN             = YES
         TITLE              = "Advantzware Query Builder"
         HEIGHT             = 31.95
         WIDTH              = 164
         MAX-HEIGHT         = 44.05
         MAX-WIDTH          = 274.2
         VIRTUAL-HEIGHT     = 44.05
         VIRTUAL-WIDTH      = 274.2
         RESIZE             = no
         SCROLL-BARS        = no
         STATUS-AREA        = yes
         BGCOLOR            = ?
         FGCOLOR            = ?
         THREE-D            = yes
         MESSAGE-AREA       = no
         SENSITIVE          = yes.
ELSE {&WINDOW-NAME} = CURRENT-WINDOW.

ASSIGN {&WINDOW-NAME}:MENUBAR    = MENU MENU-BAR-wWin:HANDLE.
/* END WINDOW DEFINITION                                                */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _INCLUDED-LIB wWin 
/* ************************* Included-Libraries *********************** */

{src/adm2/containr.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME




/* ***********  Runtime Attributes and AppBuilder Settings  *********** */

&ANALYZE-SUSPEND _RUN-TIME-ATTRIBUTES
/* SETTINGS FOR WINDOW wWin
  VISIBLE,,RUN-PERSISTENT                                               */
/* SETTINGS FOR FRAME f-Main
   FRAME-NAME                                                           */
/* SETTINGS FOR COMBO-BOX cbWhere-1 IN FRAME f-Main
   1                                                                    */
/* SETTINGS FOR COMBO-BOX cbWhere-2 IN FRAME f-Main
   1                                                                    */
/* SETTINGS FOR EDITOR eDummy IN FRAME f-Main
   NO-DISPLAY NO-ENABLE                                                 */
ASSIGN 
       eDummy:HIDDEN IN FRAME f-Main           = TRUE.

/* SETTINGS FOR FILL-IN fiWhere-2 IN FRAME f-Main
   NO-ENABLE                                                            */
/* SETTINGS FOR FILL-IN fiWhere-3 IN FRAME f-Main
   NO-ENABLE                                                            */
/* SETTINGS FOR FILL-IN fiWhere-4 IN FRAME f-Main
   NO-ENABLE                                                            */
IF SESSION:DISPLAY-TYPE = "GUI":U AND VALID-HANDLE(wWin)
THEN wWin:HIDDEN = yes.

/* _RUN-TIME-ATTRIBUTES-END */
&ANALYZE-RESUME

 



/* ************************  Control Triggers  ************************ */

&Scoped-define SELF-NAME wWin
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL wWin wWin
ON END-ERROR OF wWin /* Advantzware Query Builder */
OR ENDKEY OF {&WINDOW-NAME} ANYWHERE DO:
  /* This case occurs when the user presses the "Esc" key.
     In a persistently run window, just ignore this.  If we did not, the
     application would exit. */
  IF THIS-PROCEDURE:PERSISTENT THEN RETURN NO-APPLY.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL wWin wWin
ON WINDOW-CLOSE OF wWin /* Advantzware Query Builder */
DO:
  /* This ADM code must be left here in order for the SmartWindow
     and its descendents to terminate properly on exit. */
    IF VALID-HANDLE(chExcelApplication) THEN DO:
        if valid-handle(chExcelApplication) then chExcelApplication:QUIT().
        RELEASE OBJECT chWorkSheet        NO-ERROR.
        RELEASE OBJECT chWorkBook         NO-ERROR.
        RELEASE OBJECT chExcelApplication NO-ERROR.
    END.
    APPLY "CLOSE":U TO THIS-PROCEDURE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bClear
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bClear wWin
ON CHOOSE OF bClear IN FRAME f-Main /* Clear */
DO:
    RUN ipClearQuery IN THIS-PROCEDURE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bDown-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bDown-1 wWin
ON CHOOSE OF bDown-1 IN FRAME f-Main /* Down */
OR CHOOSE OF bDown-2
OR CHOOSE OF bDown-3
DO:
    ASSIGN 
        lLoading = TRUE.

    CASE SELF:NAME:
        WHEN "bDown-1" THEN DO:
            IF cbFile-2:{&SV} <> "-" THEN DO:
                MESSAGE 
                    "Move all down? (Choose NO to overwrite lower level.)" 
                    VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO
                    UPDATE lSlide.
            END.
            IF NOT lSlide THEN 
                RUN ipMove1Down.
            ELSE DO:
                RUN ipMove3Down.
                RUN ipMove2Down.
                RUN ipMove1Down.
            END.
        END.
        WHEN "bDown-2" THEN DO:
            IF cbFile-3:{&SV} <> "-" THEN DO:
                MESSAGE 
                    "Move all down? (Choose NO to overwrite lower level.)" 
                    VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO
                    UPDATE lSlide.
            END.
            IF NOT lSlide THEN 
                RUN ipMove2Down.
            ELSE DO:
                RUN ipMove3Down.
                RUN ipMove2Down.
            END.
        END.
        WHEN "bDown-3" THEN DO:
            RUN ipMove3Down.
        END.
    END CASE.

    APPLY 'value-changed' TO cbWhere-1.
    APPLY 'value-changed' TO cbWhere-2.
    APPLY 'value-changed' TO cbWhere-3.
    APPLY 'value-changed' TO cbWhere-4.
    APPLY 'value-changed' TO cbWhere-5.
    APPLY 'value-changed' TO cbWhere-6.
    APPLY 'value-changed' TO cbWhere-7.
    APPLY 'value-changed' TO cbWhere-8.
    APPLY 'value-changed' TO cbWhere-9.
    APPLY 'value-changed' TO cbWhere-10.
    APPLY 'value-changed' TO cbWhere-11.
    APPLY 'value-changed' TO cbWhere-12.
    APPLY 'value-changed' TO cbWhere-13.
    APPLY 'value-changed' TO cbWhere-14.
    APPLY 'value-changed' TO cbWhere-15.
    APPLY 'value-changed' TO cbWhere-16.
    APPLY 'value-changed' TO cbWhere-17.
    APPLY 'value-changed' TO cbWhere-18.
    APPLY 'value-changed' TO cbWhere-19.
    APPLY 'value-changed' TO cbWhere-20.

    ASSIGN
        lLoading = FALSE.

    RUN ipShowQuery.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bExpand
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bExpand wWin
ON CHOOSE OF bExpand IN FRAME f-Main /* Button 1 */
DO:
    IF VALID-HANDLE(hBrowse) THEN DO:
        IF SELF:ROW > 24.5 and self:row < 25 THEN DO:
            ASSIGN
                SELF:ROW = 2.5
                SELF:COLUMN = 3.
            SELF:LOAD-IMAGE-UP("images/contract.jpg").
            ASSIGN
                hBrowse:COL = 8
                hBrowse:ROW = 2.5
                hBrowse:WIDTH = 153
                hBrowse:HEIGHT = 28.75
                bClear:ROW = 31.75.  
            hBrowse:REFRESH().
        END.
        ELSE DO:
            ASSIGN
                SELF:ROW = 24.75
                SELF:COLUMN = 95.
            SELF:LOAD-IMAGE-UP("images/expand.jpg").
            ASSIGN
                hBrowse:WIDTH = 59
                hBrowse:HEIGHT = 7.5
                hBrowse:COL = 101
                hBrowse:ROW = 24.75
                bClear:ROW = 23.5.    
        END.
    END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bFields-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bFields-1 wWin
ON CHOOSE OF bFields-1 IN FRAME f-Main /* F */
or choose of bFields-2
or choose of bFields-3
or choose of bFields-4
DO:
    case self:name:
        when "bFields-1" then apply 'u1' to cbFile-1.
        when "bFields-2" then apply 'u1' to cbFile-2.
        when "bFields-3" then apply 'u1' to cbFile-3.
        when "bFields-4" then apply 'u1' to cbFile-4.
    end case.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bMoveUp
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bMoveUp wWin
ON CHOOSE OF bMoveUp IN FRAME f-Main /* Move Up */
OR CHOOSE OF bMoveDown
OR CHOOSE OF bRemove
OR CHOOSE OF bCalcField
OR CHOOSE OF bEditField
OR CHOOSE OF bLineBreak
DO:

    DEF VAR cTempFrom AS CHAR NO-UNDO.
    DEF VAR cTempTo AS CHAR NO-UNDO.
    DEF VAR iRow AS INT NO-UNDO.
    DEF VAR iCol AS INT NO-UNDO.
    DEF VAR iHold AS INT NO-UNDO.
    DEF VAR cTempFile AS CHAR NO-UNDO.
    DEF VAR cTempField AS CHAR NO-UNDO.
    ASSIGN lProcessed = FALSE.

    CASE SELF:NAME:
        WHEN "bMoveUp" THEN DO:
            ASSIGN
                iRow = LOOKUP(slDisplayFields:{&SV},slDisplayFields:LIST-ITEMS)
                iHold = iRow - 1.
            FIND FIRST bttColumns WHERE
                bttColumns.iPos = iRow - 1
                NO-LOCK NO-ERROR.
            FIND FIRST ttColumns WHERE
                ttColumns.iPos = iRow 
                NO-LOCK NO-ERROR.
            ASSIGN
                bttColumns.iPos = iRow
                ttColumns.iPos = iRow - 1.
            assign
                slDisplayFields:list-items = "".
            for each ttColumns by ttColumns.ipos:
                    slDisplayFields:add-last(ttColumns.cDispLabel).
            end.
        END.
        WHEN "bMoveDown" THEN DO:
            ASSIGN
                iRow = LOOKUP(slDisplayFields:{&SV},slDisplayFields:LIST-ITEMS)
                iHold = iRow + 1.
            
            FIND FIRST bttColumns WHERE
                bttColumns.iPos = iRow + 1
                NO-LOCK NO-ERROR.
            FIND FIRST ttColumns WHERE
                ttColumns.iPos = iRow 
                NO-LOCK NO-ERROR.
            ASSIGN
                bttColumns.iPos = iRow
                ttColumns.iPos = iRow + 1.
            assign
                slDisplayFields:list-items = "".
            for each ttColumns by ttColumns.ipos:
                    slDisplayFields:add-last(ttColumns.cDispLabel).
            end.
        END.
        WHEN "bRemove" THEN DO:
            FIND FIRST ttColumns WHERE
                ttColumns.iPos = LOOKUP(slDisplayFields:{&SV},slDisplayFields:LIST-ITEMS) 
                NO-LOCK NO-ERROR.
            IF NOT AVAIL ttColumns THEN DO:
                MESSAGE
                    "You must select a row in the Display List to remove."
                    VIEW-AS ALERT-BOX ERROR.
                RETURN NO-APPLY.
            END.
            ELSE DO:
                FOR EACH bttColumns WHERE
                    bttColumns.iPos > ttColumns.iPos:
                    ASSIGN
                        bttColumns.iPos = bttColumns.iPos - 1.
                END.
                ASSIGN iHold = ttColumns.iRow.
                DELETE ttColumns.
            END.
            slDisplayFields:DELETE(slDisplayFields:{&SV}).
        END.
        WHEN "bCalcField" THEN DO:
            IF NOT lProcessed THEN
                APPLY 'choose' TO bProcess.
            ASSIGN
                iCtr = slDisplayFields:num-items + 1.

            RUN util/dCalcField.w (INPUT cFullFieldList,
                                 INPUT-OUTPUT cFldDataType,
                                 INPUT-OUTPUT cFldFormat,
                                 INPUT-OUTPUT cFldInitVal,
                                 INPUT-OUTPUT cFldColLabel, 
                                 INPUT-OUTPUT cFldFormula).
            IF cFldColLabel = "" THEN DO:
                MESSAGE 
                    "Add field cancelled."
                    VIEW-AS ALERT-BOX.
                RETURN.
            END.

            FIND LAST ttColumns 
                NO-LOCK NO-ERROR.
            ASSIGN 
                iHold = IF AVAIL ttColumns THEN ttColumns.iPos + 1 ELSE 1.
            CREATE ttColumns.
            ASSIGN
                ttColumns.cColLabel = cFldColLabel
                ttColumns.cColType = "CALC"
                ttColumns.cColumn = ""
                ttColumns.cDataType = cFldDataType
                ttColumns.cDispLabel = cFldColLabel + " (CALC)"
                ttColumns.cField = ""
                ttColumns.cFormat = cFldFormat
                ttColumns.cFormula = cFldFormula
                ttColumns.cInitVal = cFldInitVal
                ttColumns.cLabel = cFldColLabel
                ttColumns.cTable = ""
                ttColumns.iBand = 1    
                ttColumns.iColumn = 0    
                ttColumns.iExtent = 0
                ttColumns.iIdx = iHold
                ttColumns.iPos = iCtr
                ttColumns.iRow = 1
                .
            FOR EACH bttColumns WHERE
                bttColumns.iPos >= ttColumns.iPos AND
                bttColumns.iIdx <> iHold
                BY bttColumns.iPos DESCENDING:
                ASSIGN
                    bttColumns.iPos = bttColumns.iPos + 1.
            END.
            ASSIGN
                ttColumns.iPos = iHold.
            slDisplayFields:INSERT(ttColumns.cDispLabel,ttColumns.iPos).
            iHold = ttColumns.iPos.
            FOR EACH ttColumns:
                ASSIGN
                    ttColumns.iIdx = ttColumns.iPos.
            END.
        END.
        WHEN "bEditField" THEN DO:
            IF NOT lProcessed THEN
                APPLY 'choose' TO bProcess.
            FIND LAST ttColumns WHERE
                ttColumns.iPos = LOOKUP(slDisplayFields:{&SV},slDisplayFields:LIST-ITEMS) AND
                INDEX(slDisplayFields:{&SV},"(CALC)") <> 0
                EXCLUSIVE NO-ERROR.
            IF NOT AVAIL ttColumns THEN DO:
                MESSAGE
                    "You must select a Calculated Column to use this function."
                    VIEW-AS ALERT-BOX ERROR.
                RETURN.
            END.
            RUN util/dCalcField.w (INPUT cFullFieldList,
                                 INPUT-OUTPUT ttColumns.cDataType,
                                 INPUT-OUTPUT ttColumns.cFormat,
                                 INPUT-OUTPUT ttColumns.cInitVal,
                                 INPUT-OUTPUT ttColumns.cColLabel, 
                                 INPUT-OUTPUT ttColumns.cFormula).
            FIND LAST ttColumns WHERE
                ttColumns.iPos = LOOKUP(slDisplayFields:{&SV},slDisplayFields:LIST-ITEMS)
                EXCLUSIVE NO-ERROR.
            ASSIGN
                ttColumns.cDispLabel = ttColumns.cColLabel + " (CALC)"
                iHold = ttColumns.iPos.
        END.
        WHEN "bLineBreak" THEN DO:
            CREATE ttColumns.
            ASSIGN
                ttColumns.iIdx = slDisplayFields:num-items + 1
                ttColumns.iPos = slDisplayFields:num-items + 1
                ttColumns.cDataType = "char"
                ttColumns.cDispLabel = "<skip>"
                ttColumns.cFormat = "x(2)"
                ttColumns.cColType = "SKIP"
                ttColumns.cInitVal = ""
                ttColumns.cColLabel = "<skip>"
                ttColumns.cFormula = ""
                iHold = slDisplayFields:num-items + 1.
            slDisplayFields:add-last(ttColumns.cDispLabel).
        END.
    END CASE.

    ASSIGN
        iRow = 1
        iCol = 1
        slDisplayFields:LIST-ITEMS = ""
        cFullFieldList = "".
    FOR EACH ttColumns BY ttColumns.iPos:
        slDisplayFields:ADD-LAST(ttColumns.cDispLabel).
        ASSIGN
            ttColumns.iRow = iRow
            ttColumns.iCol = iCol
            ttColumns.cColumn = ENTRY(iCol,cColList)
            iCol = iCol + 1.
        IF ttColumns.cColType = "SKIP" 
        OR ttColumns.cColLabel = "<skip>" THEN ASSIGN
            iRow = iRow + 1
            iCol = 1.
        
        IF ttColumns.cColType = "DATA" THEN ASSIGN
            cFullFieldList = cFullFieldList + ttColumns.cTable + "." + ttColumns.cField + (IF ttColumns.iExtent <> 0 THEN "[" + STRING(ttColumns.iExtent) + "]" ELSE "") + ",".
    END.
    ASSIGN 
        slDisplayFields:{&SV} = ENTRY(iHold,slDisplayFields:LIST-ITEMS)
        cFullFieldList = TRIM(cFullFieldList,",").
    
    APPLY 'value-changed' TO slDisplayFields.
    IF lProcessed THEN APPLY 'choose' TO bProcess.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bProcess
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bProcess wWin
ON CHOOSE OF bProcess IN FRAME f-Main /* Process */
OR CHOOSE OF bCheckSyntax
DO:
    RUN ipDefineQuery IN THIS-PROCEDURE.
    IF NOT lQueryOK THEN RETURN.
    
    /* If only checking syntax, stop here */
    IF SELF:NAME = "bCheckSyntax" THEN DO:
        MESSAGE
            "Syntax is correct."
            VIEW-AS ALERT-BOX INFO.
        RETURN.
    END.
    
    RUN ipProcessQuery IN THIS-PROCEDURE.
    ASSIGN
        bExpand:VISIBLE = TRUE.
        lProcessed = TRUE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bUp-2
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bUp-2 wWin
ON CHOOSE OF bUp-2 IN FRAME f-Main /* Up */
OR CHOOSE OF bUp-3
OR CHOOSE OF bUp-4
DO:
    ASSIGN 
        lLoading = TRUE.

    CASE SELF:NAME:
        WHEN "bUp-4" THEN DO:
            IF cbFile-3:{&SV} <> "-" THEN DO:
                MESSAGE 
                    "Move all up? (Choose NO to overwrite higher level.)" 
                    VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO
                    UPDATE lSlide.
            END.
            IF NOT lSlide THEN 
                RUN ipMove4Up.
            ELSE DO:
                RUN ipMove2Up.
                RUN ipMove3Up.
                RUN ipMove4Up.
            END.
        END.
        WHEN "bUp-3" THEN DO:
            IF cbFile-2:{&SV} <> "-" THEN DO:
                MESSAGE 
                    "Move all up? (Choose NO to overwrite higher level.)" 
                    VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO
                    UPDATE lSlide.
            END.
            IF NOT lSlide THEN 
                RUN ipMove3Up.
            ELSE DO:
                RUN ipMove2Up.
                RUN ipMove3Up.
            END.
        END.
        WHEN "bUp-2" THEN DO:
            RUN ipMove2Up.
        END.
    END CASE.

    APPLY 'value-changed' TO cbWhere-1.
    APPLY 'value-changed' TO cbWhere-2.
    APPLY 'value-changed' TO cbWhere-3.
    APPLY 'value-changed' TO cbWhere-4.
    APPLY 'value-changed' TO cbWhere-5.
    APPLY 'value-changed' TO cbWhere-6.
    APPLY 'value-changed' TO cbWhere-7.
    APPLY 'value-changed' TO cbWhere-8.
    APPLY 'value-changed' TO cbWhere-9.
    APPLY 'value-changed' TO cbWhere-10.
    APPLY 'value-changed' TO cbWhere-11.
    APPLY 'value-changed' TO cbWhere-12.
    APPLY 'value-changed' TO cbWhere-13.
    APPLY 'value-changed' TO cbWhere-14.
    APPLY 'value-changed' TO cbWhere-15.
    APPLY 'value-changed' TO cbWhere-16.
    APPLY 'value-changed' TO cbWhere-17.
    APPLY 'value-changed' TO cbWhere-18.
    APPLY 'value-changed' TO cbWhere-19.
    APPLY 'value-changed' TO cbWhere-20.

    ASSIGN
        lLoading = FALSE.

    RUN ipShowQuery.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbAnd-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbAnd-1 wWin
ON VALUE-CHANGED OF cbAnd-1 IN FRAME f-Main
OR VALUE-CHANGED OF cbAnd-2
OR VALUE-CHANGED OF cbAnd-3
OR VALUE-CHANGED OF cbAnd-4
DO:
    ASSIGN lProcessed = FALSE.
    IF SELF:{&SV} = ? THEN ASSIGN
        SELF:{&SV} = "-".

    CASE SELF:NAME:
        WHEN "cbAnd-1" THEN DO:
            APPLY 'value-changed' TO cbWhere-2.
        END.
        WHEN "cbAnd-2" THEN DO:
            APPLY 'value-changed' TO cbWhere-3.
        END.
        WHEN "cbAnd-3" THEN DO:
            APPLY 'value-changed' TO cbWhere-4.
        END.
        WHEN "cbAnd-4" THEN DO:
            APPLY 'value-changed' TO cbWhere-5.
        END.
    END CASE.
    
    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbAnd-11
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbAnd-11 wWin
ON VALUE-CHANGED OF cbAnd-11 IN FRAME f-Main
OR VALUE-CHANGED OF cbAnd-12
OR VALUE-CHANGED OF cbAnd-13
OR VALUE-CHANGED OF cbAnd-14
DO:
    ASSIGN lProcessed = FALSE.
    IF SELF:{&SV} = ? THEN ASSIGN
    SELF:{&SV} = "".
    
    CASE SELF:NAME:
        WHEN "cbAnd-11" THEN DO:
            APPLY 'value-changed' TO cbWhere-12.
        END.
        WHEN "cbAnd-12" THEN DO:
            APPLY 'value-changed' TO cbWhere-13.
        END.
        WHEN "cbAnd-13" THEN DO:
            APPLY 'value-changed' TO cbWhere-14.
        END.
        WHEN "cbAnd-14" THEN DO:
            APPLY 'value-changed' TO cbWhere-15.
        END.
    END CASE.
    
    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbAnd-16
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbAnd-16 wWin
ON VALUE-CHANGED OF cbAnd-16 IN FRAME f-Main
OR VALUE-CHANGED OF cbAnd-17
OR VALUE-CHANGED OF cbAnd-18
OR VALUE-CHANGED OF cbAnd-19
DO:
    ASSIGN lProcessed = FALSE.
    IF SELF:{&SV} = ? THEN ASSIGN
        SELF:{&SV} = "".
    
    CASE SELF:NAME:
        WHEN "cbAnd-16" THEN DO:
            APPLY 'value-changed' TO cbWhere-17.
        END.
        WHEN "cbAnd-17" THEN DO:
            APPLY 'value-changed' TO cbWhere-18.
        END.
        WHEN "cbAnd-18" THEN DO:
            APPLY 'value-changed' TO cbWhere-19.
        END.
        WHEN "cbAnd-19" THEN DO:
            APPLY 'value-changed' TO cbWhere-20.
        END.
    END CASE.
    
    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbAnd-6
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbAnd-6 wWin
ON VALUE-CHANGED OF cbAnd-6 IN FRAME f-Main
OR VALUE-CHANGED OF cbAnd-7
OR VALUE-CHANGED OF cbAnd-8
OR VALUE-CHANGED OF cbAnd-9
DO:
    ASSIGN lProcessed = FALSE.
    IF SELF:{&SV} = ? THEN ASSIGN
    SELF:{&SV} = "".
    
    CASE SELF:NAME:
        WHEN "cbAnd-6" THEN DO:
            APPLY 'value-changed' TO cbWhere-7.
        END.
        WHEN "cbAnd-7" THEN DO:
            APPLY 'value-changed' TO cbWhere-8.
        END.
        WHEN "cbAnd-8" THEN DO:
            APPLY 'value-changed' TO cbWhere-9.
        END.
        WHEN "cbAnd-9" THEN DO:
            APPLY 'value-changed' TO cbWhere-10.
        END.
    END CASE.
    
    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbFile-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbFile-1 wWin
ON ENTRY OF cbFile-1 IN FRAME f-Main
OR ENTRY of cbFile-2
OR ENTRY of cbFile-3
OR ENTRY of cbFile-4
DO:
    CASE SELF:NAME:
        WHEN "cbFile-1" THEN ASSIGN vcbFile-1 = SELF:{&SV}.
        WHEN "cbFile-2" THEN ASSIGN vcbFile-2 = SELF:{&SV}.
        WHEN "cbFile-3" THEN ASSIGN vcbFile-3 = SELF:{&SV}.
        WHEN "cbFile-4" THEN ASSIGN vcbFile-4 = SELF:{&SV}.
    END CASE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbFile-1 wWin
ON LEAVE OF cbFile-1 IN FRAME f-Main
OR leave OF cbFile-2
OR leave OF cbFile-3
OR leave OF cbFile-4
DO:
    DEF VAR val2 AS CHAR NO-UNDO.
    DEF VAR val3 AS CHAR NO-UNDO.
    DEF VAR val4 AS CHAR NO-UNDO.

    ASSIGN 
        lProcessed = FALSE.

    main-block:
    DO ON ENDKEY UNDO, LEAVE:
    FIND _file WHERE
        _file._file-name = entry(1,SELF:{&SV})
        NO-LOCK NO-ERROR.
    IF AVAIL _file THEN DO:
        CASE SELF:NAME:
            WHEN "cbFile-1" THEN DO:
                IF SELF:{&SV} = vcbFile-1 THEN LEAVE main-block.
                ASSIGN
                    cbWhere-1:LIST-ITEMS = "-"
                    cbWhere-2:LIST-ITEMS = "-"
                    cbWhere-3:LIST-ITEMS = "-"
                    cbWhere-4:LIST-ITEMS = "-"
                    cbWhere-5:LIST-ITEMS = "-"
                    .
                FOR EACH _index OF _file, EACH _index-field OF _index, EACH _field OF _index-field:
                    IF NOT CAN-DO(cbWhere-1:LIST-ITEMS,_field._field-nam) THEN DO:
                        cbWhere-1:ADD-LAST(_field._field-name).
                        cbWhere-2:ADD-LAST(_field._field-name).
                        cbWhere-3:ADD-LAST(_field._field-name).
                        cbWhere-4:ADD-LAST(_field._field-name).
                        cbWhere-5:ADD-LAST(_field._field-name).
                    END.
                END.
                cbWhere-1:ADD-LAST("-----------").
                cbWhere-2:ADD-LAST("-----------").
                cbWhere-3:ADD-LAST("-----------").
                cbWhere-4:ADD-LAST("-----------").
                cbWhere-5:ADD-LAST("-----------").
                FOR EACH _field OF _file:
                    IF NOT CAN-DO(cbWhere-1:LIST-ITEMS,_field._field-nam) THEN DO:
                        cbWhere-1:ADD-LAST(_field._field-name).
                        cbWhere-2:ADD-LAST(_field._field-name).
                        cbWhere-3:ADD-LAST(_field._field-name).
                        cbWhere-4:ADD-LAST(_field._field-name).
                        cbWhere-5:ADD-LAST(_field._field-name).
                    END.
                END.
                ASSIGN
                    cbWhere-1:{&SV} = ENTRY(1,cbWhere-1:LIST-ITEMS)
                    cbWhere-2:{&SV} = ENTRY(1,cbWhere-2:LIST-ITEMS)
                    cbWhere-3:{&SV} = ENTRY(1,cbWhere-3:LIST-ITEMS)
                    cbWhere-4:{&SV} = ENTRY(1,cbWhere-4:LIST-ITEMS)
                    cbWhere-5:{&SV} = ENTRY(1,cbWhere-5:LIST-ITEMS)
                    .
            END.
            WHEN "cbFile-2" THEN DO:
                IF SELF:{&SV} = vcbFile-2 THEN LEAVE main-block.
                ASSIGN
                    cbWhere-6:LIST-ITEMS = "-"
                    cbWhere-7:LIST-ITEMS = "-"
                    cbWhere-8:LIST-ITEMS = "-"
                    cbWhere-9:LIST-ITEMS = "-"
                    cbWhere-10:LIST-ITEMS = "-"
                    .
                FOR EACH _index OF _file, EACH _index-field OF _index, EACH _field OF _index-field:
                    IF NOT CAN-DO(cbWhere-6:LIST-ITEMS,_field._field-nam) THEN DO:
                        cbWhere-6:ADD-LAST(_field._field-name).
                        cbWhere-7:ADD-LAST(_field._field-name).
                        cbWhere-8:ADD-LAST(_field._field-name).
                        cbWhere-9:ADD-LAST(_field._field-name).
                        cbWhere-10:ADD-LAST(_field._field-name).
                    END.
                END.
                cbWhere-6:ADD-LAST("-----------").
                cbWhere-7:ADD-LAST("-----------").
                cbWhere-8:ADD-LAST("-----------").
                cbWhere-9:ADD-LAST("-----------").
                cbWhere-10:ADD-LAST("-----------").
                FOR EACH _field OF _file:
                    IF NOT CAN-DO(cbWhere-6:LIST-ITEMS,_field._field-nam) THEN DO:
                        cbWhere-6:ADD-LAST(_field._field-name).
                        cbWhere-7:ADD-LAST(_field._field-name).
                        cbWhere-8:ADD-LAST(_field._field-name).
                        cbWhere-9:ADD-LAST(_field._field-name).
                        cbWhere-10:ADD-LAST(_field._field-name).
                    END.
                END.
                ASSIGN
                    cbWhere-6:{&SV} = ENTRY(1,cbWhere-6:LIST-ITEMS)
                    cbWhere-7:{&SV} = ENTRY(1,cbWhere-7:LIST-ITEMS)
                    cbWhere-8:{&SV} = ENTRY(1,cbWhere-8:LIST-ITEMS)
                    cbWhere-9:{&SV} = ENTRY(1,cbWhere-9:LIST-ITEMS)
                    cbWhere-10:{&SV} = ENTRY(1,cbWhere-10:LIST-ITEMS)
                    .
            END.
            WHEN "cbFile-3" THEN DO:
                IF SELF:{&SV} = vcbFile-3 THEN LEAVE main-block.
                ASSIGN
                    cbWhere-11:LIST-ITEMS = "-"
                    cbWhere-12:LIST-ITEMS = "-"
                    cbWhere-13:LIST-ITEMS = "-"
                    cbWhere-14:LIST-ITEMS = "-"
                    cbWhere-15:LIST-ITEMS = "-"
                    .
                FOR EACH _index OF _file, EACH _index-field OF _index, EACH _field OF _index-field:
                    IF NOT CAN-DO(cbWhere-11:LIST-ITEMS,_field._field-nam) THEN DO:
                        cbWhere-11:ADD-LAST(_field._field-name).
                        cbWhere-12:ADD-LAST(_field._field-name).
                        cbWhere-13:ADD-LAST(_field._field-name).
                        cbWhere-14:ADD-LAST(_field._field-name).
                        cbWhere-15:ADD-LAST(_field._field-name).
                    END.
                END.
                cbWhere-11:ADD-LAST("-----------").
                cbWhere-12:ADD-LAST("-----------").
                cbWhere-13:ADD-LAST("-----------").
                cbWhere-14:ADD-LAST("-----------").
                cbWhere-15:ADD-LAST("-----------").
                FOR EACH _field OF _file:
                    IF NOT CAN-DO(cbWhere-11:LIST-ITEMS,_field._field-nam) THEN DO:
                        cbWhere-11:ADD-LAST(_field._field-name).
                        cbWhere-12:ADD-LAST(_field._field-name).
                        cbWhere-13:ADD-LAST(_field._field-name).
                        cbWhere-14:ADD-LAST(_field._field-name).
                        cbWhere-15:ADD-LAST(_field._field-name).
                    END.
                END.
                ASSIGN
                    cbWhere-11:{&SV} = ENTRY(1,cbWhere-11:LIST-ITEMS)
                    cbWhere-12:{&SV} = ENTRY(1,cbWhere-12:LIST-ITEMS)
                    cbWhere-13:{&SV} = ENTRY(1,cbWhere-13:LIST-ITEMS)
                    cbWhere-14:{&SV} = ENTRY(1,cbWhere-14:LIST-ITEMS)
                    cbWhere-15:{&SV} = ENTRY(1,cbWhere-15:LIST-ITEMS)
                    .
            END.
            WHEN "cbFile-4" THEN DO:
                IF SELF:{&SV} = vcbFile-4 THEN LEAVE main-block.
                ASSIGN
                    cbWhere-16:LIST-ITEMS = "-"
                    cbWhere-17:LIST-ITEMS = "-"
                    cbWhere-18:LIST-ITEMS = "-"
                    cbWhere-19:LIST-ITEMS = "-"
                    cbWhere-20:LIST-ITEMS = "-"
                    .
                FOR EACH _index OF _file, EACH _index-field OF _index, EACH _field OF _index-field:
                    IF NOT CAN-DO(cbWhere-16:LIST-ITEMS,_field._field-nam) THEN DO:
                        cbWhere-16:ADD-LAST(_field._field-name).
                        cbWhere-17:ADD-LAST(_field._field-name).
                        cbWhere-18:ADD-LAST(_field._field-name).
                        cbWhere-19:ADD-LAST(_field._field-name).
                        cbWhere-20:ADD-LAST(_field._field-name).
                    END.
                END.
                cbWhere-16:ADD-LAST("-----------").
                cbWhere-17:ADD-LAST("-----------").
                cbWhere-18:ADD-LAST("-----------").
                cbWhere-19:ADD-LAST("-----------").
                cbWhere-20:ADD-LAST("-----------").
                FOR EACH _field OF _file:
                    IF NOT CAN-DO(cbWhere-16:LIST-ITEMS,_field._field-nam) THEN DO:
                        cbWhere-16:ADD-LAST(_field._field-name).
                        cbWhere-17:ADD-LAST(_field._field-name).
                        cbWhere-18:ADD-LAST(_field._field-name).
                        cbWhere-19:ADD-LAST(_field._field-name).
                        cbWhere-20:ADD-LAST(_field._field-name).
                    END.
                END.
                ASSIGN
                    cbWhere-16:{&SV} = ENTRY(1,cbWhere-16:LIST-ITEMS)
                    cbWhere-17:{&SV} = ENTRY(1,cbWhere-17:LIST-ITEMS)
                    cbWhere-18:{&SV} = ENTRY(1,cbWhere-18:LIST-ITEMS)
                    cbWhere-19:{&SV} = ENTRY(1,cbWhere-19:LIST-ITEMS)
                    cbWhere-20:{&SV} = ENTRY(1,cbWhere-20:LIST-ITEMS)
                    .
            END.
        END CASE.
    END.
    
    ASSIGN
        val2 = cbRel-2:{&SV}
        val3 = cbRel-3:{&SV}
        val4 = cbRel-4:{&SV}
        cFileList = (IF cbFile-1:{&SV} <> "-" THEN cbFile-1:{&SV} + "," ELSE "") +
                    (IF cbFile-2:{&SV} <> "-" THEN cbFile-2:{&SV} + "," ELSE "") + 
                    (IF cbFile-3:{&SV} <> "-" THEN cbFile-3:{&SV} + "," ELSE "") + 
                    (IF cbFile-4:{&SV} <> "-" THEN cbFile-4:{&SV} ELSE "")
        cbRel-2:LIST-ITEMS = "-," + 
                             (IF cbFile-1:{&SV} <> "-" THEN cbFile-1:{&SV} + "," ELSE "")
        cbRel-3:LIST-ITEMS = cbRel-2:LIST-ITEMS +
                             (IF cbFile-2:{&SV} <> "-" THEN cbFile-2:{&SV} + "," ELSE "")
        cbRel-4:LIST-ITEMS = cbRel-3:LIST-ITEMS +
                             (IF cbFile-3:{&SV} <> "-" THEN cbFile-3:{&SV} ELSE "")
        cbRel-2:{&SV} = IF CAN-DO(cbRel-2:LIST-ITEMS,val2) THEN val2 ELSE "-"
        cbRel-3:{&SV} = IF CAN-DO(cbRel-3:LIST-ITEMS,val3) THEN val3 ELSE "-"
        cbRel-4:{&SV} = IF CAN-DO(cbRel-4:LIST-ITEMS,val4) THEN val4 ELSE "-"
        .
    END. /* main-block */
    
    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbFile-1 wWin
ON U1 OF cbFile-1 IN FRAME f-Main
OR U1 OF cbFile-2
OR U1 OF cbFile-3
OR U1 OF cbFile-4
DO:
    ASSIGN 
        lProcessed = FALSE.
    FIND _file WHERE
        _file._file-name = entry(1,SELF:{&SV})
        NO-LOCK NO-ERROR.
    IF AVAIL _file THEN DO:
        CASE SELF:NAME:
            WHEN "cbFile-1" THEN DO:
                IF NOT lLoading THEN RUN util/dFieldSelector.w (INPUT _file._file-name, 
                                                              INPUT-OUTPUT cFieldList[1]).
            END.
            WHEN "cbFile-2" THEN DO:
                IF NOT lLoading THEN RUN util/dFieldSelector.w (INPUT _file._file-name, 
                                                              INPUT-OUTPUT cFieldList[2]).
            END.
            WHEN "cbFile-3" THEN DO:
                IF NOT lLoading THEN RUN util/dFieldSelector.w (INPUT _file._file-name, 
                                                              INPUT-OUTPUT cFieldList[3]).
            END.
            WHEN "cbFile-4" THEN DO:
                IF NOT lLoading THEN RUN util/dFieldSelector.w (INPUT _file._file-name, 
                                                              INPUT-OUTPUT cFieldList[4]).
            END.
        END CASE.
    END.

    IF NOT lLoading THEN DO:
        RUN ipSetDisplay IN THIS-PROCEDURE.
    END.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbOf-2
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbOf-2 wWin
ON VALUE-CHANGED OF cbOf-2 IN FRAME f-Main
OR VALUE-CHANGED OF cbOf-3
OR VALUE-CHANGED OF cbOf-4
DO:
    ASSIGN lProcessed = FALSE.
    CASE SELF:NAME:
        WHEN "cbOf-2" THEN DO:
            IF SELF:{&SV} = "OF" THEN ASSIGN
                cbRel-2:VISIBLE = TRUE
                fiWhere-2:VISIBLE = TRUE.
            ELSE ASSIGN
                cbRel-2:VISIBLE = FALSE
                fiWhere-2:VISIBLE = FALSE.
        END.
        WHEN "cbOf-3" THEN DO:
            IF SELF:{&SV} = "OF" THEN ASSIGN
                cbRel-3:VISIBLE = TRUE
                fiWhere-3:VISIBLE = TRUE.
            ELSE ASSIGN
                cbRel-3:VISIBLE = FALSE
                fiWhere-3:VISIBLE = FALSE.
        END.
        WHEN "cbOf-4" THEN DO:
            IF SELF:{&SV} = "OF" THEN ASSIGN
                cbRel-4:VISIBLE = TRUE
                fiWhere-4:VISIBLE = TRUE.
            ELSE ASSIGN
                cbRel-4:VISIBLE = FALSE
                fiWhere-4:VISIBLE = FALSE.
        END.
    END CASE.

    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbRel-2
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbRel-2 wWin
ON VALUE-CHANGED OF cbRel-2 IN FRAME f-Main
OR VALUE-CHANGED OF cbRel-3
OR VALUE-CHANGED OF cbRel-4
DO:
    IF NOT lLoading THEN 
        RUN ipShowQuery IN THIS-PROCEDURE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbWhere-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbWhere-1 wWin
ON VALUE-CHANGED OF cbWhere-1 IN FRAME f-Main
OR VALUE-CHANGED OF cbWhere-2
OR VALUE-CHANGED OF cbWhere-3
OR VALUE-CHANGED OF cbWhere-4
OR VALUE-CHANGED OF cbWhere-5
OR VALUE-CHANGED OF cbWhere-6
OR VALUE-CHANGED OF cbWhere-7
OR VALUE-CHANGED OF cbWhere-8
OR VALUE-CHANGED OF cbWhere-9
OR VALUE-CHANGED OF cbWhere-10
OR VALUE-CHANGED OF cbWhere-11
OR VALUE-CHANGED OF cbWhere-12
OR VALUE-CHANGED OF cbWhere-13
OR VALUE-CHANGED OF cbWhere-14
OR VALUE-CHANGED OF cbWhere-15
OR VALUE-CHANGED OF cbWhere-16
OR VALUE-CHANGED OF cbWhere-17
OR VALUE-CHANGED OF cbWhere-18
OR VALUE-CHANGED OF cbWhere-19
OR VALUE-CHANGED OF cbWhere-20
DO:
    ASSIGN lProcessed = FALSE.
    CASE SELF:NAME:
        WHEN "cbWhere-1" OR
        WHEN "cbWhere-2" OR
        WHEN "cbWhere-3" OR
        WHEN "cbWhere-4" OR
        WHEN "cbWhere-5" THEN FIND _file WHERE
            _file._file-name = cbFile-1:{&SV}
            NO-LOCK NO-ERROR.
        WHEN "cbWhere-6" OR
        WHEN "cbWhere-7" OR
        WHEN "cbWhere-8" OR
        WHEN "cbWhere-9" OR
        WHEN "cbWhere-10" THEN FIND _file WHERE
            _file._file-name = cbFile-2:{&SV}
            NO-LOCK NO-ERROR.
        WHEN "cbWhere-11" OR
        WHEN "cbWhere-12" OR
        WHEN "cbWhere-13" OR
        WHEN "cbWhere-14" OR
        WHEN "cbWhere-15" THEN FIND _file WHERE
            _file._file-name = cbFile-3:{&SV}
            NO-LOCK NO-ERROR.
        WHEN "cbWhere-16" OR
        WHEN "cbWhere-17" OR
        WHEN "cbWhere-18" OR
        WHEN "cbWhere-19" OR
        WHEN "cbWhere-20" THEN FIND _file WHERE
            _file._file-name = cbFile-4:{&SV}
            NO-LOCK NO-ERROR.
    END CASE.

    FIND _field OF _file WHERE
        _field._field-name = SELF:{&SV}
        NO-LOCK NO-ERROR.
    
    IF AVAIL _field THEN DO:
        CASE SELF:NAME:
            WHEN "cbWhere-1" THEN ASSIGN cDataType[1] = _field._data-type.
            WHEN "cbWhere-2" THEN ASSIGN cDataType[2] = _field._data-type.
            WHEN "cbWhere-3" THEN ASSIGN cDataType[3] = _field._data-type.
            WHEN "cbWhere-4" THEN ASSIGN cDataType[4] = _field._data-type.
            WHEN "cbWhere-5" THEN ASSIGN cDataType[5] = _field._data-type.
            WHEN "cbWhere-6" THEN ASSIGN cDataType[6] = _field._data-type.
            WHEN "cbWhere-7" THEN ASSIGN cDataType[7] = _field._data-type.
            WHEN "cbWhere-8" THEN ASSIGN cDataType[8] = _field._data-type.
            WHEN "cbWhere-9" THEN ASSIGN cDataType[9] = _field._data-type.
            WHEN "cbWhere-10" THEN ASSIGN cDataType[10] = _field._data-type.
            WHEN "cbWhere-11" THEN ASSIGN cDataType[11] = _field._data-type.
            WHEN "cbWhere-12" THEN ASSIGN cDataType[12] = _field._data-type.
            WHEN "cbWhere-13" THEN ASSIGN cDataType[13] = _field._data-type.
            WHEN "cbWhere-14" THEN ASSIGN cDataType[14] = _field._data-type.
            WHEN "cbWhere-15" THEN ASSIGN cDataType[15] = _field._data-type.
            WHEN "cbWhere-16" THEN ASSIGN cDataType[16] = _field._data-type.
            WHEN "cbWhere-17" THEN ASSIGN cDataType[17] = _field._data-type.
            WHEN "cbWhere-18" THEN ASSIGN cDataType[18] = _field._data-type.
            WHEN "cbWhere-19" THEN ASSIGN cDataType[19] = _field._data-type.
            WHEN "cbWhere-20" THEN ASSIGN cDataType[20] = _field._data-type.
        END CASE.
    END.
    ELSE DO:
        CASE SELF:NAME:
            WHEN "cbWhere-1" THEN ASSIGN cbOp-1:{&SV} = "=" tOpenParen-1:checked = false tCloseParen-1:checked = false fiVal-1:{&SV} = "" cbAnd-1:{&SV} = "-".
            WHEN "cbWhere-2" THEN ASSIGN cbOp-2:{&SV} = "=" tOpenParen-2:checked = false tCloseParen-2:checked = false fiVal-2:{&SV} = "" cbAnd-2:{&SV} = "-".
            WHEN "cbWhere-3" THEN ASSIGN cbOp-3:{&SV} = "=" tOpenParen-3:checked = false tCloseParen-3:checked = false fiVal-3:{&SV} = "" cbAnd-3:{&SV} = "-".
            WHEN "cbWhere-4" THEN ASSIGN cbOp-4:{&SV} = "=" tOpenParen-4:checked = false tCloseParen-4:checked = false fiVal-4:{&SV} = "" cbAnd-4:{&SV} = "-".
            WHEN "cbWhere-5" THEN ASSIGN cbOp-5:{&SV} = "=" tOpenParen-5:checked = false tCloseParen-5:checked = false fiVal-5:{&SV} = "".
            WHEN "cbWhere-6" THEN ASSIGN cbOp-6:{&SV} = "=" tOpenParen-6:checked = false tCloseParen-6:checked = false fiVal-6:{&SV} = "" cbAnd-6:{&SV} = "-".
            WHEN "cbWhere-7" THEN ASSIGN cbOp-7:{&SV} = "=" tOpenParen-7:checked = false tCloseParen-7:checked = false fiVal-7:{&SV} = "" cbAnd-7:{&SV} = "-".
            WHEN "cbWhere-8" THEN ASSIGN cbOp-8:{&SV} = "=" tOpenParen-8:checked = false tCloseParen-8:checked = false fiVal-8:{&SV} = "" cbAnd-8:{&SV} = "-".
            WHEN "cbWhere-9" THEN ASSIGN cbOp-9:{&SV} = "=" tOpenParen-9:checked = false tCloseParen-9:checked = false fiVal-9:{&SV} = "" cbAnd-9:{&SV} = "-".
            WHEN "cbWhere-10" THEN ASSIGN cbOp-10:{&SV} = "=" tOpenParen-10:checked = false tCloseParen-10:checked = false fiVal-10:{&SV} = "".
            WHEN "cbWhere-11" THEN ASSIGN cbOp-11:{&SV} = "=" tOpenParen-11:checked = false tCloseParen-11:checked = false fiVal-11:{&SV} = "" cbAnd-11:{&SV} = "-".
            WHEN "cbWhere-12" THEN ASSIGN cbOp-12:{&SV} = "=" tOpenParen-12:checked = false tCloseParen-12:checked = false fiVal-12:{&SV} = "" cbAnd-12:{&SV} = "-".
            WHEN "cbWhere-13" THEN ASSIGN cbOp-13:{&SV} = "=" tOpenParen-13:checked = false tCloseParen-13:checked = false fiVal-13:{&SV} = "" cbAnd-13:{&SV} = "-".
            WHEN "cbWhere-14" THEN ASSIGN cbOp-14:{&SV} = "=" tOpenParen-14:checked = false tCloseParen-14:checked = false fiVal-14:{&SV} = "" cbAnd-14:{&SV} = "-".
            WHEN "cbWhere-15" THEN ASSIGN cbOp-15:{&SV} = "=" tOpenParen-15:checked = false tCloseParen-15:checked = false fiVal-15:{&SV} = "".
            WHEN "cbWhere-16" THEN ASSIGN cbOp-16:{&SV} = "=" tOpenParen-16:checked = false tCloseParen-16:checked = false fiVal-16:{&SV} = "" cbAnd-16:{&SV} = "-".
            WHEN "cbWhere-17" THEN ASSIGN cbOp-17:{&SV} = "=" tOpenParen-17:checked = false tCloseParen-17:checked = false fiVal-17:{&SV} = "" cbAnd-17:{&SV} = "-".
            WHEN "cbWhere-18" THEN ASSIGN cbOp-18:{&SV} = "=" tOpenParen-18:checked = false tCloseParen-18:checked = false fiVal-18:{&SV} = "" cbAnd-18:{&SV} = "-".
            WHEN "cbWhere-19" THEN ASSIGN cbOp-19:{&SV} = "=" tOpenParen-19:checked = false tCloseParen-19:checked = false fiVal-19:{&SV} = "" cbAnd-19:{&SV} = "-".
            WHEN "cbWhere-20" THEN ASSIGN cbOp-20:{&SV} = "=" tOpenParen-20:checked = false tCloseParen-20:checked = false fiVal-20:{&SV} = "".
        END CASE.
    END.

    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME fiVal-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL fiVal-1 wWin
ON LEAVE OF fiVal-1 IN FRAME f-Main
OR LEAVE OF fiVal-2
OR LEAVE OF fiVal-3
OR LEAVE OF fiVal-4
OR LEAVE OF fiVal-5
OR LEAVE OF fiVal-6
OR LEAVE OF fiVal-7
OR LEAVE OF fiVal-8
OR LEAVE OF fiVal-9
OR LEAVE OF fiVal-10
OR LEAVE OF fiVal-11
OR LEAVE OF fiVal-12
OR LEAVE OF fiVal-13
OR LEAVE OF fiVal-14
OR LEAVE OF fiVal-15
OR LEAVE OF fiVal-16
OR LEAVE OF fiVal-17
OR LEAVE OF fiVal-18
OR LEAVE OF fiVal-19
OR LEAVE OF fiVal-20
DO:
    ASSIGN lProcessed = FALSE.
    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.
END.

ON LEAVE OF {&LeaveList} DO:
    ASSIGN lProcessed = FALSE.
    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME m_Clear_Query
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL m_Clear_Query wWin
ON CHOOSE OF MENU-ITEM m_Clear_Query /* Clear Query */
DO:
    run ipClearQuery in this-procedure.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME m_Excel
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL m_Excel wWin
ON CHOOSE OF MENU-ITEM m_Excel /* Export to Excel */
DO:
    run ipExcel in this-procedure.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME m_Export_to_CSV
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL m_Export_to_CSV wWin
ON CHOOSE OF MENU-ITEM m_Export_to_CSV /* Export to CSV */
DO:
    run ipCSV in this-procedure.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME m_Open
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL m_Open wWin
ON CHOOSE OF MENU-ITEM m_Open /* Open... */
DO:
    RUN ipClearQuery IN THIS-PROCEDURE.
    RUN ipGetFile IN THIS-PROCEDURE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME m_Quit
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL m_Quit wWin
ON CHOOSE OF MENU-ITEM m_Quit /* Quit */
DO:
    APPLY 'window-close' TO wWin.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME m_Save
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL m_Save wWin
ON CHOOSE OF MENU-ITEM m_Save /* Save */
DO:
    IF fiRptName:{&SV} = "" THEN 
        RUN ipSaveFile IN THIS-PROCEDURE ("Save As").
    else 
        RUN ipSaveFile IN THIS-PROCEDURE ("").
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME m_Save_As
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL m_Save_As wWin
ON CHOOSE OF MENU-ITEM m_Save_As /* Save As... */
DO:
    RUN ipSaveFile IN THIS-PROCEDURE ("SaveAs").
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME slDisplayFields
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL slDisplayFields wWin
ON VALUE-CHANGED OF slDisplayFields IN FRAME f-Main
DO:
    IF SELF:{&SV} = ENTRY(1,SELF:LIST-ITEMS) THEN ASSIGN
        bMoveUp:SENSITIVE = FALSE.
    ELSE ASSIGN
        bMoveUp:SENSITIVE = TRUE.
    
    IF SELF:{&SV} = ENTRY(SELF:NUM-ITEMS,SELF:LIST-ITEMS) THEN ASSIGN
        bMoveDown:SENSITIVE = FALSE.
    ELSE ASSIGN
        bMoveDown:SENSITIVE = TRUE.

    IF INDEX(SELF:{&SV},"(Calc)") <> 0 THEN ASSIGN
        bEditField:SENSITIVE = TRUE.
    ELSE ASSIGN
        bEditField:SENSITIVE = FALSE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME tMore-0
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL tMore-0 wWin
ON VALUE-CHANGED OF tMore-0 IN FRAME f-Main /* EACH */
DO:
    &SCOPED-DEFINE cFile 1
    &SCOPED-DEFINE cFirst 1
    &SCOPED-DEFINE cSecond 2
    &SCOPED-DEFINE cThird 3
    &SCOPED-DEFINE cFourth 4
    &SCOPED-DEFINE cFifth 5
    
    ASSIGN lProcessed = FALSE.
    IF NOT SELF:CHECKED THEN do:
        RUN ipRemoveFromDisp (cbFile-{&cFile}:{&SV}).
        ASSIGN
            cbFile-{&cFile}:SCREEN-VALUE = "-"
            tOpenParen-{&cFirst}:CHECKED = FALSE
            cbWhere-{&cFirst}:SCREEN-VALUE = "-"
            cbOp-{&cFirst}:SCREEN-VALUE = "="
            fiVal-{&cFirst}:SCREEN-VALUE = " "
            tCloseParen-{&cFirst}:CHECKED = FALSE
            cbAnd-{&cFirst}:SCREEN-VALUE = "-"
            tOpenParen-{&cSecond}:CHECKED = FALSE
            cbWhere-{&cSecond}:SCREEN-VALUE = "-"
            cbOp-{&cSecond}:SCREEN-VALUE = "="
            fiVal-{&cSecond}:SCREEN-VALUE = " "
            tCloseParen-{&cSecond}:CHECKED = FALSE
            cbAnd-{&cSecond}:SCREEN-VALUE = "-"
            tOpenParen-{&cThird}:CHECKED = FALSE
            cbWhere-{&cThird}:SCREEN-VALUE = "-"
            cbOp-{&cThird}:SCREEN-VALUE = "="
            fiVal-{&cThird}:SCREEN-VALUE = " "
            tCloseParen-{&cThird}:CHECKED = FALSE
            cbAnd-{&cThird}:SCREEN-VALUE = "-"
            tOpenParen-{&cFourth}:CHECKED = FALSE
            cbWhere-{&cFourth}:SCREEN-VALUE = "-"
            cbOp-{&cFourth}:SCREEN-VALUE = "="
            fiVal-{&cFourth}:SCREEN-VALUE = " "
            tCloseParen-{&cFourth}:CHECKED = FALSE
            cbAnd-{&cFourth}:SCREEN-VALUE = "-"
            tOpenParen-{&cFifth}:CHECKED = FALSE
            cbWhere-{&cFifth}:SCREEN-VALUE = "-"
            cbOp-{&cFifth}:SCREEN-VALUE = "="
            fiVal-{&cFifth}:SCREEN-VALUE = " "
            tCloseParen-{&cFifth}:CHECKED = FALSE
            cbOf-2:SCREEN-VALUE = "WHERE"
            cFieldList[{&cFile}] = ""
            .
        APPLY 'value-changed' TO cbOf-2.
    END.
    IF NOT lLoading THEN RUN ipShowQuery.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME tMore-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL tMore-1 wWin
ON VALUE-CHANGED OF tMore-1 IN FRAME f-Main /* EACH */
DO:
    &SCOPED-DEFINE cFile 2
    &SCOPED-DEFINE cFirst 6
    &SCOPED-DEFINE cSecond 7
    &SCOPED-DEFINE cThird 8
    &SCOPED-DEFINE cFourth 9
    &SCOPED-DEFINE cFifth 10
    
    ASSIGN lProcessed = FALSE.
    IF NOT SELF:CHECKED THEN DO:
        RUN ipRemoveFromDisp (cbFile-{&cFile}:{&SV}).
        ASSIGN
            cbFile-{&cFile}:SCREEN-VALUE = "-"
            cbOf-{&cFile}:SCREEN-VALUE = "WHERE"
            cbRel-{&cFile}:SCREEN-VALUE = "-"
            fiWhere-{&cFile}:SCREEN-VALUE = " "
            tOpenParen-{&cFirst}:CHECKED = FALSE
            cbWhere-{&cFirst}:SCREEN-VALUE = "-"
            cbOp-{&cFirst}:SCREEN-VALUE = "="
            fiVal-{&cFirst}:SCREEN-VALUE = " "
            tCloseParen-{&cFirst}:CHECKED = FALSE
            cbAnd-{&cFirst}:SCREEN-VALUE = "-"
            tOpenParen-{&cSecond}:CHECKED = FALSE
            cbWhere-{&cSecond}:SCREEN-VALUE = "-"
            cbOp-{&cSecond}:SCREEN-VALUE = "="
            fiVal-{&cSecond}:SCREEN-VALUE = " "
            tCloseParen-{&cSecond}:CHECKED = FALSE
            cbAnd-{&cSecond}:SCREEN-VALUE = "-"
            tOpenParen-{&cThird}:CHECKED = FALSE
            cbWhere-{&cThird}:SCREEN-VALUE = "-"
            cbOp-{&cThird}:SCREEN-VALUE = "="
            fiVal-{&cThird}:SCREEN-VALUE = " "
            tCloseParen-{&cThird}:CHECKED = FALSE
            cbAnd-{&cThird}:SCREEN-VALUE = "-"
            tOpenParen-{&cFourth}:CHECKED = FALSE
            cbWhere-{&cFourth}:SCREEN-VALUE = "-"
            cbOp-{&cFourth}:SCREEN-VALUE = "="
            fiVal-{&cFourth}:SCREEN-VALUE = " "
            tCloseParen-{&cFourth}:CHECKED = FALSE
            cbAnd-{&cFourth}:SCREEN-VALUE = "-"
            tOpenParen-{&cFifth}:CHECKED = FALSE
            cbWhere-{&cFifth}:SCREEN-VALUE = "-"
            cbOp-{&cFifth}:SCREEN-VALUE = "="
            fiVal-{&cFifth}:SCREEN-VALUE = " "
            tCloseParen-{&cFifth}:CHECKED = FALSE
            cbOf-3:SCREEN-VALUE = "WHERE"
            cFieldList[{&cFile}] = ""
            .
        APPLY 'value-changed' TO cbOf-3.
    END.
    IF NOT lLoading THEN RUN ipShowQuery.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME tMore-2
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL tMore-2 wWin
ON VALUE-CHANGED OF tMore-2 IN FRAME f-Main /* EACH */
DO:
    &SCOPED-DEFINE cFile 3
    &SCOPED-DEFINE cFirst 11
    &SCOPED-DEFINE cSecond 12
    &SCOPED-DEFINE cThird 13
    &SCOPED-DEFINE cFourth 14
    &SCOPED-DEFINE cFifth 15
    
    ASSIGN lProcessed = FALSE.
    IF NOT SELF:CHECKED THEN DO:
        RUN ipRemoveFromDisp (cbFile-{&cFile}:{&SV}).
        ASSIGN
            cbFile-{&cFile}:SCREEN-VALUE = "-"
            cbOf-{&cFile}:SCREEN-VALUE = "WHERE"
            cbRel-{&cFile}:SCREEN-VALUE = "-"
            fiWhere-{&cFile}:SCREEN-VALUE = " "
            tOpenParen-{&cFirst}:CHECKED = FALSE
            cbWhere-{&cFirst}:SCREEN-VALUE = "-"
            cbOp-{&cFirst}:SCREEN-VALUE = "="
            fiVal-{&cFirst}:SCREEN-VALUE = " "
            tCloseParen-{&cFirst}:CHECKED = FALSE
            cbAnd-{&cFirst}:SCREEN-VALUE = "-"
            tOpenParen-{&cSecond}:CHECKED = FALSE
            cbWhere-{&cSecond}:SCREEN-VALUE = "-"
            cbOp-{&cSecond}:SCREEN-VALUE = "="
            fiVal-{&cSecond}:SCREEN-VALUE = " "
            tCloseParen-{&cSecond}:CHECKED = FALSE
            cbAnd-{&cSecond}:SCREEN-VALUE = "-"
            tOpenParen-{&cThird}:CHECKED = FALSE
            cbWhere-{&cThird}:SCREEN-VALUE = "-"
            cbOp-{&cThird}:SCREEN-VALUE = "="
            fiVal-{&cThird}:SCREEN-VALUE = " "
            tCloseParen-{&cThird}:CHECKED = FALSE
            cbAnd-{&cThird}:SCREEN-VALUE = "-"
            tOpenParen-{&cFourth}:CHECKED = FALSE
            cbWhere-{&cFourth}:SCREEN-VALUE = "-"
            cbOp-{&cFourth}:SCREEN-VALUE = "="
            fiVal-{&cFourth}:SCREEN-VALUE = " "
            tCloseParen-{&cFourth}:CHECKED = FALSE
            cbAnd-{&cFourth}:SCREEN-VALUE = "-"
            tOpenParen-{&cFifth}:CHECKED = FALSE
            cbWhere-{&cFifth}:SCREEN-VALUE = "-"
            cbOp-{&cFifth}:SCREEN-VALUE = "="
            fiVal-{&cFifth}:SCREEN-VALUE = " "
            tCloseParen-{&cFifth}:CHECKED = FALSE
            cbOf-4:SCREEN-VALUE = "WHERE"
            cFieldList[{&cFile}] = ""
            .
        APPLY 'value-changed' TO cbOf-4.
    END.
    IF NOT lLoading THEN RUN ipShowQuery.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME tMore-3
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL tMore-3 wWin
ON VALUE-CHANGED OF tMore-3 IN FRAME f-Main /* EACH */
DO:
    &SCOPED-DEFINE cFile 4
    &SCOPED-DEFINE cFirst 16
    &SCOPED-DEFINE cSecond 17
    &SCOPED-DEFINE cThird 18
    &SCOPED-DEFINE cFourth 19
    &SCOPED-DEFINE cFifth 20
    
    ASSIGN lProcessed = FALSE.
    IF NOT SELF:CHECKED THEN DO:
        RUN ipRemoveFromDisp (cbFile-{&cFile}:{&SV}).
        ASSIGN
            cbFile-{&cFile}:SCREEN-VALUE = "-"
            cbOf-{&cFile}:SCREEN-VALUE = "WHERE"
            cbRel-{&cFile}:SCREEN-VALUE = "-"
            fiWhere-{&cFile}:SCREEN-VALUE = " "
            tOpenParen-{&cFirst}:CHECKED = FALSE
            cbWhere-{&cFirst}:SCREEN-VALUE = "-"
            cbOp-{&cFirst}:SCREEN-VALUE = "="
            fiVal-{&cFirst}:SCREEN-VALUE = " "
            tCloseParen-{&cFirst}:CHECKED = FALSE
            cbAnd-{&cFirst}:SCREEN-VALUE = "-"
            tOpenParen-{&cSecond}:CHECKED = FALSE
            cbWhere-{&cSecond}:SCREEN-VALUE = "-"
            cbOp-{&cSecond}:SCREEN-VALUE = "="
            fiVal-{&cSecond}:SCREEN-VALUE = " "
            tCloseParen-{&cSecond}:CHECKED = FALSE
            cbAnd-{&cSecond}:SCREEN-VALUE = "-"
            tOpenParen-{&cThird}:CHECKED = FALSE
            cbWhere-{&cThird}:SCREEN-VALUE = "-"
            cbOp-{&cThird}:SCREEN-VALUE = "="
            fiVal-{&cThird}:SCREEN-VALUE = " "
            tCloseParen-{&cThird}:CHECKED = FALSE
            cbAnd-{&cThird}:SCREEN-VALUE = "-"
            tOpenParen-{&cFourth}:CHECKED = FALSE
            cbWhere-{&cFourth}:SCREEN-VALUE = "-"
            cbOp-{&cFourth}:SCREEN-VALUE = "="
            fiVal-{&cFourth}:SCREEN-VALUE = " "
            tCloseParen-{&cFourth}:CHECKED = FALSE
            cbAnd-{&cFourth}:SCREEN-VALUE = "-"
            tOpenParen-{&cFifth}:CHECKED = FALSE
            cbWhere-{&cFifth}:SCREEN-VALUE = "-"
            cbOp-{&cFifth}:SCREEN-VALUE = "="
            fiVal-{&cFifth}:SCREEN-VALUE = " "
            tCloseParen-{&cFifth}:CHECKED = FALSE
            cFieldList[{&cFile}] = ""
            .
        APPLY 'value-changed' TO  cbOf-{&cFile}.
    END.
    IF NOT lLoading THEN RUN ipShowQuery.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME tOpenParen-1
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL tOpenParen-1 wWin
ON VALUE-CHANGED OF tOpenParen-1 IN FRAME f-Main /* ( */
OR VALUE-CHANGED OF tOpenParen-2
OR VALUE-CHANGED OF tOpenParen-3
OR VALUE-CHANGED OF tOpenParen-4
OR VALUE-CHANGED OF tOpenParen-5
OR VALUE-CHANGED OF tOpenParen-6
OR VALUE-CHANGED OF tOpenParen-7
OR VALUE-CHANGED OF tOpenParen-8
OR VALUE-CHANGED OF tOpenParen-9
OR VALUE-CHANGED OF tOpenParen-10
OR VALUE-CHANGED OF tOpenParen-11
OR VALUE-CHANGED OF tOpenParen-12
OR VALUE-CHANGED OF tOpenParen-13
OR VALUE-CHANGED OF tOpenParen-14
OR VALUE-CHANGED OF tOpenParen-15
OR VALUE-CHANGED OF tOpenParen-16
OR VALUE-CHANGED OF tOpenParen-17
OR VALUE-CHANGED OF tOpenParen-18
OR VALUE-CHANGED OF tOpenParen-19
OR VALUE-CHANGED OF tOpenParen-20
OR VALUE-CHANGED OF tCloseParen-1
OR VALUE-CHANGED OF tCloseParen-2
OR VALUE-CHANGED OF tCloseParen-3
OR VALUE-CHANGED OF tCloseParen-4
OR VALUE-CHANGED OF tCloseParen-5
OR VALUE-CHANGED OF tCloseParen-6
OR VALUE-CHANGED OF tCloseParen-7
OR VALUE-CHANGED OF tCloseParen-8
OR VALUE-CHANGED OF tCloseParen-9
OR VALUE-CHANGED OF tCloseParen-10
OR VALUE-CHANGED OF tCloseParen-11
OR VALUE-CHANGED OF tCloseParen-12
OR VALUE-CHANGED OF tCloseParen-13
OR VALUE-CHANGED OF tCloseParen-14
OR VALUE-CHANGED OF tCloseParen-15
OR VALUE-CHANGED OF tCloseParen-16
OR VALUE-CHANGED OF tCloseParen-17
OR VALUE-CHANGED OF tCloseParen-18
OR VALUE-CHANGED OF tCloseParen-19
OR VALUE-CHANGED OF tCloseParen-20
OR VALUE-CHANGED OF cbOp-1
OR VALUE-CHANGED OF cbOp-2
OR VALUE-CHANGED OF cbOp-3
OR VALUE-CHANGED OF cbOp-4
OR VALUE-CHANGED OF cbOp-5
OR VALUE-CHANGED OF cbOp-6
OR VALUE-CHANGED OF cbOp-7
OR VALUE-CHANGED OF cbOp-8
OR VALUE-CHANGED OF cbOp-9
OR VALUE-CHANGED OF cbOp-10
OR VALUE-CHANGED OF cbOp-11
OR VALUE-CHANGED OF cbOp-12
OR VALUE-CHANGED OF cbOp-13
OR VALUE-CHANGED OF cbOp-14
OR VALUE-CHANGED OF cbOp-15
OR VALUE-CHANGED OF cbOp-16
OR VALUE-CHANGED OF cbOp-17
OR VALUE-CHANGED OF cbOp-18
OR VALUE-CHANGED OF cbOp-19
OR VALUE-CHANGED OF cbOp-20
DO:
    ASSIGN lProcessed = FALSE.
    IF NOT lLoading THEN
        RUN ipShowQuery IN THIS-PROCEDURE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&UNDEFINE SELF-NAME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK wWin 


/* ***************************  Main Block  *************************** */

RUN util/chk-mod.p ("ASI","wquery.") NO-ERROR.
lContinue = NOT ERROR-STATUS:ERROR.

IF lContinue EQ NO THEN DO:
    APPLY "CLOSE":U TO THIS-PROCEDURE.
    RETURN.
END.

/* Include custom  Main Block code for SmartWindows. */
{src/adm2/windowmn.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE adm-create-objects wWin  _ADM-CREATE-OBJECTS
PROCEDURE adm-create-objects :
/*------------------------------------------------------------------------------
  Purpose:     Create handles for all SmartObjects used in this procedure.
               After SmartObjects are initialized, then SmartLinks are added.
  Parameters:  <none>
------------------------------------------------------------------------------*/

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE disable_UI wWin  _DEFAULT-DISABLE
PROCEDURE disable_UI :
/*------------------------------------------------------------------------------
  Purpose:     DISABLE the User Interface
  Parameters:  <none>
  Notes:       Here we clean-up the user-interface by deleting
               dynamic widgets we have created and/or hide 
               frames.  This procedure is usually called when
               we are ready to "clean-up" after running.
------------------------------------------------------------------------------*/
  /* Delete the WINDOW we created */
  IF SESSION:DISPLAY-TYPE = "GUI":U AND VALID-HANDLE(wWin)
  THEN DELETE WIDGET wWin.
  IF THIS-PROCEDURE:PERSISTENT THEN DELETE PROCEDURE THIS-PROCEDURE.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE enable_UI wWin  _DEFAULT-ENABLE
PROCEDURE enable_UI :
/*------------------------------------------------------------------------------
  Purpose:     ENABLE the User Interface
  Parameters:  <none>
  Notes:       Here we display/view/enable the widgets in the
               user-interface.  In addition, OPEN all queries
               associated with each FRAME and BROWSE.
               These statements here are based on the "Other 
               Settings" section of the widget Property Sheets.
------------------------------------------------------------------------------*/
  DISPLAY cbFile-1 tMore-0 fiRptName tOpenParen-1 cbWhere-1 cbOp-1 fiVal-1 
          tCloseParen-1 cbAnd-1 tOpenParen-2 cbWhere-2 cbOp-2 fiVal-2 
          tCloseParen-2 cbAnd-2 eQuery tOpenParen-3 cbWhere-3 cbOp-3 fiVal-3 
          tCloseParen-3 cbAnd-3 tOpenParen-4 cbWhere-4 cbOp-4 fiVal-4 
          tCloseParen-4 cbAnd-4 tOpenParen-5 cbWhere-5 cbOp-5 fiVal-5 
          tCloseParen-5 tMore-1 cbFile-2 cbOf-2 cbRel-2 fiWhere-2 tOpenParen-6 
          cbWhere-6 cbOp-6 fiVal-6 tCloseParen-6 cbAnd-6 fiLockedCols 
          slDisplayFields tOpenParen-7 cbWhere-7 cbOp-7 fiVal-7 tCloseParen-7 
          cbAnd-7 fiPagesWide tOpenParen-8 cbWhere-8 cbOp-8 fiVal-8 
          tCloseParen-8 cbAnd-8 tOpenParen-9 cbWhere-9 cbOp-9 fiVal-9 
          tCloseParen-9 cbAnd-9 tOpenParen-10 cbWhere-10 cbOp-10 fiVal-10 
          tCloseParen-10 tMore-2 fiWhere-3 cbFile-3 cbOf-3 cbRel-3 tOpenParen-11 
          cbWhere-11 cbOp-11 fiVal-11 tCloseParen-11 cbAnd-11 tOpenParen-12 
          cbWhere-12 cbOp-12 fiVal-12 tCloseParen-12 cbAnd-12 tOpenParen-13 
          cbWhere-13 cbOp-13 fiVal-13 tCloseParen-13 cbAnd-13 tOpenParen-14 
          cbWhere-14 cbOp-14 fiVal-14 tCloseParen-14 cbAnd-14 tOpenParen-15 
          cbWhere-15 cbOp-15 fiVal-15 tCloseParen-15 tMore-3 cbFile-4 cbOf-4 
          fiWhere-4 cbRel-4 tOpenParen-16 cbWhere-16 cbOp-16 fiVal-16 
          tCloseParen-16 cbAnd-16 tOpenParen-17 cbWhere-17 cbOp-17 fiVal-17 
          tCloseParen-17 cbAnd-17 tOpenParen-18 cbWhere-18 cbOp-18 fiVal-18 
          tCloseParen-18 cbAnd-18 tOpenParen-19 cbWhere-19 cbOp-19 fiVal-19 
          tCloseParen-19 cbAnd-19 tOpenParen-20 cbWhere-20 cbOp-20 fiVal-20 
          tCloseParen-20 
      WITH FRAME f-Main IN WINDOW wWin.
  ENABLE bExpand bFields-1 cbFile-1 tMore-0 fiRptName tOpenParen-1 cbWhere-1 
         cbOp-1 fiVal-1 tCloseParen-1 cbAnd-1 bCheckSyntax tOpenParen-2 
         cbWhere-2 cbOp-2 fiVal-2 tCloseParen-2 cbAnd-2 eQuery bDown-1 
         tOpenParen-3 cbWhere-3 cbOp-3 fiVal-3 tCloseParen-3 cbAnd-3 
         tOpenParen-4 cbWhere-4 cbOp-4 fiVal-4 tCloseParen-4 cbAnd-4 
         tOpenParen-5 cbWhere-5 cbOp-5 fiVal-5 tCloseParen-5 bFields-2 tMore-1 
         cbFile-2 cbOf-2 cbRel-2 tOpenParen-6 cbWhere-6 cbOp-6 fiVal-6 
         tCloseParen-6 cbAnd-6 bUp-2 fiLockedCols slDisplayFields tOpenParen-7 
         cbWhere-7 cbOp-7 fiVal-7 tCloseParen-7 cbAnd-7 bDown-2 fiPagesWide 
         tOpenParen-8 cbWhere-8 cbOp-8 fiVal-8 tCloseParen-8 cbAnd-8 
         tOpenParen-9 cbWhere-9 cbOp-9 fiVal-9 tCloseParen-9 cbAnd-9 bMoveUp 
         tOpenParen-10 cbWhere-10 cbOp-10 fiVal-10 tCloseParen-10 bMoveDown 
         tMore-2 bFields-3 cbFile-3 cbOf-3 cbRel-3 bRemove tOpenParen-11 
         cbWhere-11 cbOp-11 fiVal-11 tCloseParen-11 cbAnd-11 bCalcField bUp-3 
         tOpenParen-12 cbWhere-12 cbOp-12 fiVal-12 tCloseParen-12 cbAnd-12 
         bDown-3 bEditField tOpenParen-13 cbWhere-13 cbOp-13 fiVal-13 
         tCloseParen-13 cbAnd-13 bLineBreak tOpenParen-14 cbWhere-14 cbOp-14 
         fiVal-14 tCloseParen-14 cbAnd-14 tOpenParen-15 cbWhere-15 cbOp-15 
         fiVal-15 tCloseParen-15 bProcess bClear bFields-4 tMore-3 cbFile-4 
         cbOf-4 cbRel-4 tOpenParen-16 cbWhere-16 cbOp-16 fiVal-16 
         tCloseParen-16 cbAnd-16 bUp-4 tOpenParen-17 cbWhere-17 cbOp-17 
         fiVal-17 tCloseParen-17 cbAnd-17 tOpenParen-18 cbWhere-18 cbOp-18 
         fiVal-18 tCloseParen-18 cbAnd-18 tOpenParen-19 cbWhere-19 cbOp-19 
         fiVal-19 tCloseParen-19 cbAnd-19 tOpenParen-20 cbWhere-20 cbOp-20 
         fiVal-20 tCloseParen-20 
      WITH FRAME f-Main IN WINDOW wWin.
  {&OPEN-BROWSERS-IN-QUERY-f-Main}
  VIEW wWin.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE exitObject wWin 
PROCEDURE exitObject :
/*------------------------------------------------------------------------------
  Purpose:  Window-specific override of this procedure which destroys 
            its contents and itself.
    Notes:  
------------------------------------------------------------------------------*/

  APPLY "CLOSE":U TO THIS-PROCEDURE.
  RETURN.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE initializeObject wWin 
PROCEDURE initializeObject :
/*------------------------------------------------------------------------------
  Purpose:     Super Override
  Parameters:  
  Notes:       
------------------------------------------------------------------------------*/
    def var cDispFile as char no-undo.
    
    ASSIGN 
        cbFile-1:LIST-ITEMS {&IN} = "-"
        cbFile-2:LIST-ITEMS = "-"
        cbFile-3:LIST-ITEMS = "-"
        cbFile-4:LIST-ITEMS = "-"
        .
    FOR EACH _file:
        assign 
            cDispFile = _file._file-name.
        IF _file._file-name BEGINS "_" THEN NEXT.
        IF _file._file-name BEGINS "SYS" THEN NEXT.
        cbFile-1:ADD-LAST(cDispFile) {&IN}.
        cbFile-2:ADD-LAST(cDispFile) {&IN}.
        cbFile-3:ADD-LAST(cDispFile) {&IN}.
        cbFile-4:ADD-LAST(cDispFile) {&IN}.
    END.


  RUN SUPER.
    /*
    /* Hide all except the first group of items for entry */
    h_frame = FRAME f-main:HANDLE.
    IF VALID-HANDLE (h_frame) THEN do:
        h_frame = h_frame:FIRST-CHILD.  /* field-group */
        h_field = h_frame:FIRST-CHILD.  /* field-group */
        outer-loop:
        repeat:
            if CAN-DO("button,toggle-box,fill-in,combo-box",h_field:type) 
            AND NOT SUBSTRING(h_field:NAME,LENGTH(h_field:name) - 1,2) = "-1"  
            AND NOT can-do("fiRptName,fiLockedCols,fiPagesWide,bMoveUp,bClear,bMoveDown,bRemove,bCalcField,bEditField,bLineBreak,bProcess,bLineBreak,bCheckSyntax",h_field:NAME) THEN ASSIGN
                h_field:VISIBLE = FALSE.
            IF h_field:NAME = "tMore-1" THEN ASSIGN
                h_field:ROW = 4.
            h_field = h_field:NEXT-SIBLING.
            IF NOT VALID-HANDLE (h_field) THEN LEAVE.
        END.
        ASSIGN
            tMore-0:VISIBLE = TRUE
            bExpand:VISIBLE = FALSE.
    END.
    */
    ASSIGN
        cbFile-1:{&SV} = "-"
        cbFile-2:{&SV} = "-"
        cbFile-3:{&SV} = "-"
        cbFile-4:{&SV} = "-"
        cbOf-2:{&SV} = ENTRY(2,cbOf-2:LIST-ITEMS)
        cbOf-3:{&SV} = ENTRY(2,cbOf-3:LIST-ITEMS)
        cbOf-4:{&SV} = ENTRY(2,cbOf-4:LIST-ITEMS)
        cbRel-2:LIST-ITEMS = "-"
        cbRel-3:LIST-ITEMS = "-"
        cbRel-4:LIST-ITEMS = "-"
        cbOp-1:{&SV} = "="
        cbOp-2:{&SV} = "="
        cbOp-3:{&SV} = "="
        cbOp-4:{&SV} = "="
        cbOp-5:{&SV} = "="
        cbOp-6:{&SV} = "="
        cbOp-7:{&SV} = "="
        cbOp-8:{&SV} = "="
        cbOp-9:{&SV} = "="
        cbOp-10:{&SV} = "="
        cbOp-11:{&SV} = "="
        cbOp-12:{&SV} = "="
        cbOp-13:{&SV} = "="
        cbOp-14:{&SV} = "="
        cbOp-15:{&SV} = "="
        cbOp-16:{&SV} = "="
        cbOp-17:{&SV} = "="
        cbOp-18:{&SV} = "="
        cbOp-19:{&SV} = "="
        cbOp-20:{&SV} = "="
        cbAnd-1:{&SV} = "-"
        cbAnd-2:{&SV} = "-"
        cbAnd-3:{&SV} = "-"
        cbAnd-4:{&SV} = "-"
        cbAnd-6:{&SV} = "-"
        cbAnd-7:{&SV} = "-"
        cbAnd-8:{&SV} = "-"
        cbAnd-9:{&SV} = "-"
        cbAnd-11:{&SV} = "-"
        cbAnd-12:{&SV} = "-"
        cbAnd-13:{&SV} = "-"
        cbAnd-14:{&SV} = "-"
        cbAnd-16:{&SV} = "-"
        cbAnd-17:{&SV} = "-"
        cbAnd-18:{&SV} = "-"
        cbAnd-19:{&SV} = "-"
        .
    SESSION:SET-WAIT-STATE("").

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipClearQuery wWin 
PROCEDURE ipClearQuery :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    empty temp-table ttColumns.
    if valid-handle(hBrowse) then do:
        hBrowse:select-all().
        hBrowse:delete-selected-rows().
    end.
    assign
        cFileList = ""
        eQuery:screen-value in frame f-Main = ""
        slDisplayFields:list-items = ""
        cFieldList[1] = ""
        cFieldList[2] = ""
        cFieldList[3] = ""
        cFieldList[4] = ""
        .
    assign
        cbFile-1:screen-value = "-"
        cbFile-2:screen-value = "-"
        cbFile-3:screen-value = "-"
        cbFile-4:screen-value = "-"

        cbWhere-1:list-items = "-"
        cbWhere-2:list-items = "-"
        cbWhere-3:list-items = "-"
        cbWhere-4:list-items = "-"
        cbWhere-5:list-items = "-"
        cbWhere-6:list-items = "-"
        cbWhere-7:list-items = "-"
        cbWhere-8:list-items = "-"
        cbWhere-9:list-items = "-"
        cbWhere-10:list-items = "-"
        cbWhere-11:list-items = "-"
        cbWhere-12:list-items = "-"
        cbWhere-13:list-items = "-"
        cbWhere-14:list-items = "-"
        cbWhere-15:list-items = "-"
        cbWhere-16:list-items = "-"
        cbWhere-17:list-items = "-"
        cbWhere-18:list-items = "-"
        cbWhere-19:list-items = "-"
        cbWhere-20:list-items = "-"
        
        cbOp-1:screen-value = "="
        cbOp-2:screen-value = "="
        cbOp-3:screen-value = "="
        cbOp-4:screen-value = "="
        cbOp-5:screen-value = "="
        cbOp-6:screen-value = "="
        cbOp-7:screen-value = "="
        cbOp-8:screen-value = "="
        cbOp-9:screen-value = "="
        cbOp-10:screen-value = "="
        cbOp-11:screen-value = "="
        cbOp-12:screen-value = "="
        cbOp-13:screen-value = "="
        cbOp-14:screen-value = "="
        cbOp-15:screen-value = "="
        cbOp-16:screen-value = "="
        cbOp-17:screen-value = "="
        cbOp-18:screen-value = "="
        cbOp-19:screen-value = "="
        cbOp-20:screen-value = "="
        
        fiVal-1:screen-value = ""
        fiVal-2:screen-value = ""
        fiVal-3:screen-value = ""
        fiVal-4:screen-value = ""
        fiVal-5:screen-value = ""
        fiVal-6:screen-value = ""
        fiVal-7:screen-value = ""
        fiVal-8:screen-value = ""
        fiVal-9:screen-value = ""
        fiVal-10:screen-value = ""
        fiVal-11:screen-value = ""
        fiVal-12:screen-value = ""
        fiVal-13:screen-value = ""
        fiVal-14:screen-value = ""
        fiVal-15:screen-value = ""
        fiVal-16:screen-value = ""
        fiVal-17:screen-value = ""
        fiVal-18:screen-value = ""
        fiVal-19:screen-value = ""
        fiVal-20:screen-value = ""
        
        cbAnd-1:screen-value = "-"
        cbAnd-2:screen-value = "-"
        cbAnd-3:screen-value = "-"
        cbAnd-4:screen-value = "-"
        cbAnd-6:screen-value = "-"
        cbAnd-7:screen-value = "-"
        cbAnd-8:screen-value = "-"
        cbAnd-9:screen-value = "-"
        cbAnd-11:screen-value = "-"
        cbAnd-12:screen-value = "-"
        cbAnd-13:screen-value = "-"
        cbAnd-14:screen-value = "-"
        cbAnd-16:screen-value = "-"
        cbAnd-17:screen-value = "-"
        cbAnd-18:screen-value = "-"
        cbAnd-19:screen-value = "-"
        
        tOpenParen-1:checked = false
        tOpenParen-2:checked = false
        tOpenParen-3:checked = false
        tOpenParen-4:checked = false
        tOpenParen-5:checked = false
        tOpenParen-6:checked = false
        tOpenParen-7:checked = false
        tOpenParen-8:checked = false
        tOpenParen-9:checked = false
        tOpenParen-10:checked = false
        tOpenParen-11:checked = false
        tOpenParen-12:checked = false
        tOpenParen-13:checked = false
        tOpenParen-14:checked = false
        tOpenParen-15:checked = false
        tOpenParen-16:checked = false
        tOpenParen-17:checked = false
        tOpenParen-18:checked = false
        tOpenParen-19:checked = false
        tOpenParen-20:checked = false

        tCloseParen-1:checked = false
        tCloseParen-2:checked = false
        tCloseParen-3:checked = false
        tCloseParen-4:checked = false
        tCloseParen-5:checked = false
        tCloseParen-6:checked = false
        tCloseParen-7:checked = false
        tCloseParen-8:checked = false
        tCloseParen-9:checked = false
        tCloseParen-10:checked = false
        tCloseParen-11:checked = false
        tCloseParen-12:checked = false
        tCloseParen-13:checked = false
        tCloseParen-14:checked = false
        tCloseParen-15:checked = false
        tCloseParen-16:checked = false
        tCloseParen-17:checked = false
        tCloseParen-18:checked = false
        tCloseParen-19:checked = false
        tCloseParen-20:checked = false
        
        cbOf-2:screen-value = "OF"
        cbOf-3:screen-value = "OF"
        cbOf-4:screen-value = "OF"
        
        cbRel-2:LIST-ITEMS = "-"
        cbRel-3:LIST-ITEMS = "-"
        cbRel-4:LIST-ITEMS = "-"
        .
        
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipCopyToClip wWin 
PROCEDURE ipCopyToClip :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    MESSAGE
        "Copying to the clipboard is not available in this version."
        VIEW-AS ALERT-BOX.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipCSV wWin 
PROCEDURE ipCSV :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF VAR cTable              AS CHARACTER    NO-UNDO.
    DEF VAR cFields             AS CHARACTER    NO-UNDO.
    DEF VAR hQuery              AS HANDLE       NO-UNDO.
    DEF VAR hBuffer2            AS HANDLE       NO-UNDO.
    DEF VAR hField              AS HANDLE       NO-UNDO.
    DEF VAR iFields             AS INTEGER      NO-UNDO.
    DEF VAR iDispRow                AS INTEGER      NO-UNDO.
    DEF VAR cRow                AS CHARACTER    NO-UNDO INITIAL "A".
    DEF VAR hThisField          AS HANDLE       NO-UNDO.
    DEF VAR hThisColumn         AS HANDLE       NO-UNDO.
    DEF VAR iCtr2               AS INT          NO-UNDO.
    DEF VAR iCtr3               AS INT          NO-UNDO.
    DEF VAR iColumn             AS INT          NO-UNDO.
    DEF VAR lExtentCleared      AS LOG          NO-UNDO.
    DEF VAR cLastField          AS CHAR         NO-UNDO.
    DEF VAR iBrowseCount        AS INT          NO-UNDO.
    DEF VAR tWidth              AS INT          NO-UNDO.
    DEF VAR cExtString AS CHAR NO-UNDO.
    DEF VAR iHdrRows AS INT NO-UNDO.
    DEF VAR cTestField AS CHAR NO-UNDO.
    DEF VAR iStartRow AS INT NO-UNDO.
    DEF VAR cTempFormula AS CHAR EXTENT 100 NO-UNDO.
    DEF VAR cTempFormula2 AS CHAR EXTENT 100 NO-UNDO.

    ASSIGN
        cFileName = (IF fiRptName:{&SV} <> "" then fiRptName:{&SV} else "SAMPLE")+ " (" + STRING(YEAR(TODAY),"9999") + "_" +
                                             STRING(MONTH(TODAY),"99") + "_" +
                                             STRING(DAY(TODAY),"99") + ")" + ".csv".
    SYSTEM-DIALOG GET-FILE cFileName
        TITLE "Save CSV..."
        FILTERS "CSV Files (*.csv)"  "*.csv"
        USE-FILENAME
        SAVE-AS
        DEFAULT-EXTENSION ".qry"
        INITIAL-DIR "..\Reports\".
    assign
        cDataString = "".
    IF hBrowse:NUM-SELECTED-ROWS < 2 THEN hBrowse:SELECT-ALL().

        
    OUTPUT TO VALUE(cFileName).
    

    DO iFields = 1 TO hBrowse:NUM-COLUMNS:
        ASSIGN 
            iColumn = iColumn + 1
            hThisColumn = hBrowse:GET-BROWSE-COLUMN(iFields).
        IF hThisColumn:LABEL BEGINS "<skip" THEN ASSIGN
            iDispRow = iDispRow + 1
            iHdrRows = iHdrRows + 1
            iColumn = 0.
        ELSE DO:
            assign
                cDataString = cDataString + hThisColumn:LABEL + ",".
        END.
    END.
    assign
        cDataString = trim(cDataString,",") + chr(10).
    PUT UNFORMATTED cDataString.
    assign
        cDataString = "".
    
    DO iCtr3 = 1 TO hBrowse:NUM-SELECTED-ROWS:
        hBrowse:FETCH-SELECTED-ROW(iCtr3).
        
        DO iFields = 1 TO hBrowse:NUM-COLUMNS:
            hThisColumn = hBrowse:GET-BROWSE-COLUMN(iFields).
            FIND ttColumns WHERE 
                ttColumns.iPos = iFields.
            IF hThisColumn:LABEL = "<skip>" THEN ASSIGN
                iDispRow = iDispRow + 1
                iColumn = 1.
            ELSE DO:
                ASSIGN 
                    hField = hThisColumn:BUFFER-FIELD.
                IF NOT VALID-HANDLE(hField) THEN DO: /* It's a calc field, needs a formula */
                    ASSIGN 
                        cTempFormula2[iFields] = cTempFormula[iFields]
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|0|",STRING(iDispRow - (ttColumns.iRow - 1)))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|1|",STRING(iDispRow - (ttColumns.iRow - 1) + 1))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|2|",STRING(iDispRow - (ttColumns.iRow - 1) + 2))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|3|",STRING(iDispRow - (ttColumns.iRow - 1) + 3))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|4|",STRING(iDispRow - (ttColumns.iRow - 1) + 4))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|5|",STRING(iDispRow - (ttColumns.iRow - 1) + 5))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|6|",STRING(iDispRow - (ttColumns.iRow - 1) + 6))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|7|",STRING(iDispRow - (ttColumns.iRow - 1) + 7))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|8|",STRING(iDispRow - (ttColumns.iRow - 1) + 8))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|9|",STRING(iDispRow - (ttColumns.iRow - 1) + 9)).
                    cDataString = cDataString + cTempFormula2[iFields] + ",".
                END.
                ELSE IF hThisColumn:NAME = hField:NAME THEN DO: /* It's a data field */
                    IF hField:EXTENT < 2 THEN DO: 
                        cDataString = cDataString + hField:BUFFER-VALUE + ",".
                    END.
                    ELSE DO:
                        cDataString = cDataString + hField:BUFFER-VALUE(ttColumns.iExtent) + ",".
                    END.
                END.
            END.
        END.
        assign
            cDataString = trim(cDataString,",") + chr(10).
        PUT UNFORMATTED cDataString.
        assign
            cDataString = "".
    END.    
    
    OUTPUT CLOSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipDefineQuery wWin 
PROCEDURE ipDefineQuery :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF VAR jCtr AS INT NO-UNDO.
    DEF VAR bufCtr AS INT NO-UNDO.

    ASSIGN 
        lQueryOK = FALSE
        bufCtr = 1.

    IF VALID-HANDLE(hBrowse) THEN DELETE WIDGET hBrowse.
    IF VALID-HANDLE(hQuery) THEN DELETE WIDGET hQuery.
    IF VALID-HANDLE(hBuffer[1]) THEN DELETE WIDGET hBuffer[1].
    IF VALID-HANDLE(hBuffer[2]) THEN DELETE WIDGET hBuffer[2].
    IF VALID-HANDLE(hBuffer[3]) THEN DELETE WIDGET hBuffer[3].
    IF VALID-HANDLE(hBuffer[4]) THEN DELETE WIDGET hBuffer[4].

    IF cbFile-1:{&SV} <> "-" THEN DO:
        CREATE BUFFER hBuffer[bufCtr] FOR TABLE cbFile-1:{&SV}.
        ASSIGN
            bufCtr = bufCtr + 1.
    END.
    IF cbFile-2:{&SV} <> "-" THEN DO:
        CREATE BUFFER hBuffer[bufCtr] FOR TABLE cbFile-2:{&SV}.
        ASSIGN
            bufCtr = bufCtr + 1.
    END.
    IF cbFile-3:{&SV} <> "-" THEN DO:
        CREATE BUFFER hBuffer[bufCtr] FOR TABLE cbFile-3:{&SV}.
        ASSIGN
            bufCtr = bufCtr + 1.
    END.
    IF cbFile-4:{&SV} <> "-" THEN DO:
        CREATE BUFFER hBuffer[bufCtr] FOR TABLE cbFile-4:{&SV}.
        ASSIGN
            bufCtr = bufCtr + 1.
    END.
    IF bufCtr = 1 THEN DO:
        MESSAGE
            "You have not specified any files to process."
            VIEW-AS ALERT-BOX ERROR.
        RETURN.
    END.

    DO iCtr = 1 TO hBuffer[1]:NUM-FIELDS:
        ASSIGN
            h_field = hBuffer[1]:BUFFER-FIELD(iCtr)
            h_field:VALIDATE-EXPRESSION = "".

    END.

    DO jCtr = 2 TO 4:
        IF VALID-HANDLE(hBuffer[jCtr]) THEN DO iCtr = 1 TO hBuffer[jCtr]:NUM-FIELDS:
            ASSIGN
                h_field = hBuffer[jCtr]:BUFFER-FIELD(iCtr)
                h_field:VALIDATE-EXPRESSION = "".
        END.
    END.

    CREATE QUERY hQuery.
    hQuery:ADD-BUFFER(hBuffer[1]).
    IF VALID-HANDLE(hBuffer[2]) THEN hQuery:ADD-BUFFER(hBuffer[2]).
    IF VALID-HANDLE(hBuffer[3]) THEN hQuery:ADD-BUFFER(hBuffer[3]).
    IF VALID-HANDLE(hBuffer[4]) THEN hQuery:ADD-BUFFER(hBuffer[4]).
    lQueryOK = hQuery:QUERY-PREPARE(eQuery:{&SV}).

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipExcel wWin 
PROCEDURE ipExcel :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF VAR cTable              AS CHARACTER    NO-UNDO.
    DEF VAR cFields             AS CHARACTER    NO-UNDO.
    DEF VAR hQuery              AS HANDLE       NO-UNDO.
    DEF VAR hBuffer2            AS HANDLE       NO-UNDO.
    DEF VAR hField              AS HANDLE       NO-UNDO.
    DEF VAR iFields             AS INTEGER      NO-UNDO.
    DEF VAR iDispRow                AS INTEGER      NO-UNDO.
    DEF VAR cRow                AS CHARACTER    NO-UNDO INITIAL "A".
    DEF VAR hThisField          AS HANDLE       NO-UNDO.
    DEF VAR hThisColumn         AS HANDLE       NO-UNDO.
    DEF VAR iCtr2               AS INT          NO-UNDO.
    DEF VAR iCtr3               AS INT          NO-UNDO.
    DEF VAR iColumn             AS INT          NO-UNDO.
    DEF VAR lExtentCleared      AS LOG          NO-UNDO.
    DEF VAR cLastField          AS CHAR         NO-UNDO.
    DEF VAR iBrowseCount        AS INT          NO-UNDO.
    DEF VAR tWidth              AS INT          NO-UNDO.
    DEF VAR cExtString AS CHAR NO-UNDO.
    DEF VAR iHdrRows AS INT NO-UNDO.
    DEF VAR cTestField AS CHAR NO-UNDO.
    DEF VAR iStartRow AS INT NO-UNDO.
    DEF VAR cTempFormula AS CHAR EXTENT 100 NO-UNDO.
    DEF VAR cTempFormula2 AS CHAR EXTENT 100 NO-UNDO.

    IF hBrowse:NUM-SELECTED-ROWS = 0 THEN hBrowse:SELECT-ALL().

    STATUS DEFAULT "Exporting data. Please wait...".
    /*
    SESSION:SET-WAIT-STATE("general").
    */
    STATUS DEFAULT "Exporting data. Instantiating Excel.".
    CREATE "Excel.Application" chExcelApplication.

    ASSIGN 
        chExcelApplication:ScreenUpdating = false
        chWorkbook                 = chExcelApplication:Workbooks:Add()
        chWorkSheet                = chExcelApplication:Sheets:Item(1)
        cTable                     = IF fiRptName:{&SV} <> "" THEN fiRptName:{&SV} ELSE "TEMP"
        chWorkSheet:NAME           = cTable
        iDispRow = 1
        iHdrRows = 1
        iColumn = 0.
    
    STATUS DEFAULT "Exporting data. Formatting spreadsheet.".
    DO iFields = 1 TO hBrowse:NUM-COLUMNS:
        ASSIGN 
            iColumn = iColumn + 1
            hThisColumn = hBrowse:GET-BROWSE-COLUMN(iFields).
        IF hThisColumn:LABEL BEGINS "<skip" THEN ASSIGN
            iDispRow = iDispRow + 1
            iHdrRows = iHdrRows + 1
            iColumn = 0.
        ELSE DO:
            chWorkSheet:range(ENTRY(iColumn,cColList) + STRING(iDispRow)):Value = (hThisColumn:LABEL).
            chWorkSheet:range(ENTRY(iColumn,cColList) + STRING(iDispRow)):Font:Bold = TRUE.
        END.
    END.

    FOR EACH ttColumns WHERE 
        ttColumns.cFormula <> ? AND ttColumns.cFormula <> "":
        ASSIGN
            cTempFormula[ttColumns.iPos] = ttColumns.cFormula
            cTestField = "".
        FOR EACH bttColumns:
            ASSIGN
                cTestField = IF INDEX(bttColumns.cColLabel,"[") <> 0 THEN SUBSTRING(bttColumns.cColLabel,INDEX(bttColumns.cColLabel,"[")) ELSE ""
                cTestField = bttColumns.cTable + "." + bttColumns.cField + cTestField.
            IF cTestField <> ? 
            AND cTestField <> "."
            AND INDEX(ttColumns.cFormula,cTestField) <> 0 THEN ASSIGN
                cTempFormula[ttColumns.iPos] = REPLACE(cTempFormula[ttColumns.iPos],cTestField,bttColumns.cColumn + "|" + STRING(bttColumns.iRow - 1) + "|").
        END.
    END.

    iDispRow = iHdrRows.
    
    STATUS DEFAULT "Exporting data. Loading records.".
    DO iCtr3 = 1 TO hBrowse:NUM-SELECTED-ROWS:
        hBrowse:FETCH-SELECTED-ROW(iCtr3).
        ASSIGN
            iDispRow = iDispRow + 1
            iColumn = 1
            iStartRow = iDispRow.
        IF iCtr3 MODULO 100 = 0 THEN STATUS DEFAULT 
            "Exporting data. Please wait... (" + string(iCtr3) +
            " of " + STRING(hBrowse:NUM-SELECTED-ROWS) + " records exported)".
        
        DO iFields = 1 TO hBrowse:NUM-COLUMNS:
            hThisColumn = hBrowse:GET-BROWSE-COLUMN(iFields).
            FIND ttColumns WHERE 
                ttColumns.iPos = iFields.
            IF hThisColumn:LABEL = "<skip>" THEN ASSIGN
                iDispRow = iDispRow + 1
                iColumn = 1.
            ELSE DO:
                ASSIGN 
                    hField = hThisColumn:BUFFER-FIELD.
                IF NOT VALID-HANDLE(hField) THEN DO: /* It's a calc field, needs a formula */
                    ASSIGN 
                        cTempFormula2[iFields] = cTempFormula[iFields]
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|0|",STRING(iDispRow - (ttColumns.iRow - 1)))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|1|",STRING(iDispRow - (ttColumns.iRow - 1) + 1))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|2|",STRING(iDispRow - (ttColumns.iRow - 1) + 2))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|3|",STRING(iDispRow - (ttColumns.iRow - 1) + 3))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|4|",STRING(iDispRow - (ttColumns.iRow - 1) + 4))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|5|",STRING(iDispRow - (ttColumns.iRow - 1) + 5))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|6|",STRING(iDispRow - (ttColumns.iRow - 1) + 6))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|7|",STRING(iDispRow - (ttColumns.iRow - 1) + 7))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|8|",STRING(iDispRow - (ttColumns.iRow - 1) + 8))
                        cTempFormula2[iFields] = REPLACE(cTempFormula2[iFields],"|9|",STRING(iDispRow - (ttColumns.iRow - 1) + 9)).
                    chWorkSheet:range(ENTRY(iColumn,cColList) + STRING(iDispRow)):NumberFormat = 0.
                    chWorkSheet:range(ENTRY(iColumn,cColList) + STRING(iDispRow)):formula = cTempFormula2[iFields].
                    iColumn = iColumn + 1.
                END.
                ELSE IF hThisColumn:NAME = hField:NAME THEN DO: /* It's a data field */
                    chWorkSheet:range(ENTRY(iColumn,cColList) + STRING(iDispRow)):NumberFormat = IF hField:DATA-TYPE = "integer" THEN "#####0"
                                                                             ELSE IF hField:DATA-TYPE = "decimal" THEN "###,###,##0.00"
                                                                             ELSE IF hField:DATA-TYPE = "date" THEN "MM/DD/YY"
                                                                             ELSE "@".
                    IF hField:EXTENT < 2 THEN DO: 
                        chWorkSheet:range(ENTRY(iColumn,cColList) + STRING(iDispRow)):Value = hField:BUFFER-VALUE.
                        iColumn = iColumn + 1.
                    END.
                    ELSE DO:
                        chWorkSheet:range(ENTRY(iColumn,cColList) + STRING(iDispRow)):Value = hField:BUFFER-VALUE(ttColumns.iExtent).
                        iColumn = iColumn + 1.
                    END.
                END.
            END.
        END.
    END.

    STATUS DEFAULT "Exporting data. Formatting Print View.".
    chWorksheet:COLUMNS("A:" + STRING(ENTRY(hBrowse:NUM-COLUMNS,cColList))):AutoFit.
    chWorksheet:PageSetup:LeftHeader = fiRptName:{&SV}.
    chWorksheet:PageSetup:LeftFooter = "Query Builder - (c)2017, Advantzware".                    
    chWorksheet:PageSetup:RightHeader = "User: " + USERID(LDBNAME(1)) + " DB: " + LDBNAME(1) + " Print Date: " +
                                         STRING(MONTH(TODAY),"99") + "/" +
                                         STRING(DAY(TODAY),"99") + "/" +
                                         STRING(YEAR(TODAY),"9999").
    chWorksheet:PageSetup:FirstPageNumber = 1.
    chWorksheet:PageSetup:RightFooter = "Page: &P".
    chWorksheet:PageSetup:PrintGridlines = TRUE.
    chWorksheet:PageSetup:PrintTitleRows = "1:" + STRING(iHdrRows).
    chWorksheet:PageSetup:PrintTitleColumns = "A:" + ENTRY(INTEGER(fiLockedCols:{&SV}),cColList).
    chWorksheet:PageSetup:ORIENTATION = 2.
    chWorksheet:PageSetup:LeftMargin = chExcelApplication:InchesToPoints(0.3).   
    chWorksheet:PageSetup:RightMargin = chExcelApplication:InchesToPoints(0.3).  
    chWorksheet:PageSetup:TopMargin = chExcelApplication:InchesToPoints(1.0).    
    chWorksheet:PageSetup:BottomMargin = chExcelApplication:InchesToPoints(0.75).
    chWorksheet:PageSetup:HeaderMargin = chExcelApplication:InchesToPoints(0.3). 
    chWorksheet:PageSetup:ZOOM = FALSE.
    chWorksheet:PageSetup:FitToPagesWide = MAXIMUM(1,INTEGER(fiPagesWide:{&SV})).
    chWorksheet:PageSetup:FitToPagesTall = 9999.
    chWorkSheet:range(ENTRY(INTEGER(fiLockedCols:{&SV}) + 1,cColList) + STRING(iHdrRows + 1)):SELECT.
    chExcelApplication:ActiveWindow:FreezePanes = TRUE.

    ASSIGN    
        chExcelApplication:ScreenUpdating = true
        chExcelApplication:Visible = TRUE.

    SESSION:SET-WAIT-STATE("").
    STATUS DEFAULT cStatus.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipGetAll wWin 
PROCEDURE ipGetAll :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    hBrowse:select-all.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipGetFile wWin 
PROCEDURE ipGetFile :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    EMPTY TEMP-TABLE ttColumns.

    ASSIGN
        lLoading = TRUE.
    SYSTEM-DIALOG GET-FILE cFileName
    TITLE "Select a Query File to Open..."
    FILTERS "Query Files (*.qry)"  "*.qry"
    MUST-EXIST
    USE-FILENAME
    DEFAULT-EXTENSION ".qry"
    INITIAL-DIR "..\Reports".
    IF SEARCH(cFileName) = ? THEN DO:
        MESSAGE
            "You did not select a valid report file."
            VIEW-AS ALERT-BOX INFO.
        RETURN.
    END.
    ASSIGN
        fiRptName:{&SV} = cFileName.
    INPUT FROM VALUE(cFileName).
    IMPORT UNFORMATTED cDataString.
    INPUT CLOSE.
    IF NUM-ENTRIES(cDataString,"|") < 130 THEN DO:
        MESSAGE
            "The report file you selected is invalid or corrupt. Please try again."
            VIEW-AS ALERT-BOX ERROR.
        RETURN.
    END.
    /*
    h_frame = FRAME f-main:HANDLE.
    IF VALID-HANDLE (h_frame) THEN do:
        h_frame = h_frame:FIRST-CHILD.  /* field-group */
        h_field = h_frame:FIRST-CHILD.  /* field-group */
        outer-loop:
        repeat:
            if CAN-DO("toggle-box,fill-in,combo-box",h_field:type) 
            AND NOT SUBSTRING(h_field:NAME,LENGTH(h_field:name) - 1,2) = "-1"
            AND NOT h_field:NAME = "fiRptName"
            AND NOT h_field:NAME = "fiLockedCols"
            AND NOT h_field:NAME = "fiPagesWide" THEN ASSIGN
                h_field:VISIBLE = FALSE.
            IF h_field:NAME = "tMore-1" THEN ASSIGN
                h_field:ROW = 4.
            h_field = h_field:NEXT-SIBLING.
            IF NOT VALID-HANDLE (h_field) THEN LEAVE.
        END.
    END.
    */
    DO iCtr = 1 TO 4:
        CASE iCtr:
            WHEN 1 THEN ASSIGN 
                cbFile-1:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> ? THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 2 THEN ASSIGN 
                cbFile-2:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> ? THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 3 THEN ASSIGN 
                cbFile-3:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> ? THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 4 THEN ASSIGN 
                cbFile-4:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> ? THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
        END CASE.
    END.
    ASSIGN
        cFileList = (IF cbFile-1:{&SV} <> "-" THEN cbFile-1:{&SV} + "," ELSE "") +
                    (IF cbFile-2:{&SV} <> "-" THEN cbFile-2:{&SV} + "," ELSE "") +
                    (IF cbFile-3:{&SV} <> "-" THEN cbFile-3:{&SV} + "," ELSE "") +
                    (IF cbFile-4:{&SV} <> "-" THEN cbFile-4:{&SV} ELSE "").
    APPLY 'leave' to cbFile-1.
    APPLY 'leave' to cbFile-2.
    APPLY 'leave' to cbFile-3.
    APPLY 'leave' to cbFile-4.
    DO iCtr = 5 TO 10:
        CASE iCtr:
            WHEN 5 THEN ASSIGN cbOf-2:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 6 THEN ASSIGN cbOf-3:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 7 THEN ASSIGN cbOf-4:{&SV} = ENTRY(iCtr,cDataString,"|").

            WHEN 8 THEN ASSIGN cbRel-2:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 9 THEN ASSIGN cbRel-3:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 10 THEN ASSIGN cbRel-4:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
        END CASE.
    END.
    DO iCtr = 11 TO 30:
        CASE iCtr:
            WHEN 11 THEN ASSIGN cbWhere-1:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 12 THEN ASSIGN cbWhere-2:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 13 THEN ASSIGN cbWhere-3:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 14 THEN ASSIGN cbWhere-4:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 15 THEN ASSIGN cbWhere-5:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 16 THEN ASSIGN cbWhere-6:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 17 THEN ASSIGN cbWhere-7:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 18 THEN ASSIGN cbWhere-8:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 19 THEN ASSIGN cbWhere-9:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 20 THEN ASSIGN cbWhere-10:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 21 THEN ASSIGN cbWhere-11:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 22 THEN ASSIGN cbWhere-12:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 23 THEN ASSIGN cbWhere-13:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 24 THEN ASSIGN cbWhere-14:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 25 THEN ASSIGN cbWhere-15:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 26 THEN ASSIGN cbWhere-16:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 27 THEN ASSIGN cbWhere-17:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 28 THEN ASSIGN cbWhere-18:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 29 THEN ASSIGN cbWhere-19:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 30 THEN ASSIGN cbWhere-20:{&SV} = ENTRY(iCtr,cDataString,"|").
        END CASE.
    END.
    DO iCtr = 31 TO 50:
        CASE iCtr:
            WHEN 31 THEN ASSIGN cbOp-1:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 32 THEN ASSIGN cbOp-2:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 33 THEN ASSIGN cbOp-3:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 34 THEN ASSIGN cbOp-4:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 35 THEN ASSIGN cbOp-5:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 36 THEN ASSIGN cbOp-6:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 37 THEN ASSIGN cbOp-7:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 38 THEN ASSIGN cbOp-8:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 39 THEN ASSIGN cbOp-9:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 40 THEN ASSIGN cbOp-10:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 41 THEN ASSIGN cbOp-11:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 42 THEN ASSIGN cbOp-12:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 43 THEN ASSIGN cbOp-13:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 44 THEN ASSIGN cbOp-14:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 45 THEN ASSIGN cbOp-15:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 46 THEN ASSIGN cbOp-16:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 47 THEN ASSIGN cbOp-17:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 48 THEN ASSIGN cbOp-18:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 49 THEN ASSIGN cbOp-19:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 50 THEN ASSIGN cbOp-20:{&SV} = ENTRY(iCtr,cDataString,"|").
        END CASE.
    END.
    DO iCtr = 51 TO 70:
        CASE iCtr:
            WHEN 51 THEN ASSIGN fiVal-1:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 52 THEN ASSIGN fiVal-2:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 53 THEN ASSIGN fiVal-3:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 54 THEN ASSIGN fiVal-4:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 55 THEN ASSIGN fiVal-5:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 56 THEN ASSIGN fiVal-6:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 57 THEN ASSIGN fiVal-7:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 58 THEN ASSIGN fiVal-8:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 59 THEN ASSIGN fiVal-9:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 60 THEN ASSIGN fiVal-10:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 61 THEN ASSIGN fiVal-11:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 62 THEN ASSIGN fiVal-12:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 63 THEN ASSIGN fiVal-13:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 64 THEN ASSIGN fiVal-14:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 65 THEN ASSIGN fiVal-15:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 66 THEN ASSIGN fiVal-16:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 67 THEN ASSIGN fiVal-17:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 68 THEN ASSIGN fiVal-18:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 69 THEN ASSIGN fiVal-19:{&SV} = ENTRY(iCtr,cDataString,"|").
            WHEN 70 THEN ASSIGN fiVal-20:{&SV} = ENTRY(iCtr,cDataString,"|").
        END CASE.
    END.
    DO iCtr = 71 TO 86:
        CASE iCtr:
            WHEN 71 THEN ASSIGN cbAnd-1:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-". 
            WHEN 72 THEN ASSIGN cbAnd-2:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-". 
            WHEN 73 THEN ASSIGN cbAnd-3:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-". 
            WHEN 74 THEN ASSIGN cbAnd-4:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-". 
            WHEN 75 THEN ASSIGN cbAnd-6:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-". 
            WHEN 76 THEN ASSIGN cbAnd-7:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-". 
            WHEN 77 THEN ASSIGN cbAnd-8:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-". 
            WHEN 78 THEN ASSIGN cbAnd-9:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-". 
            WHEN 79 THEN ASSIGN cbAnd-11:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 80 THEN ASSIGN cbAnd-12:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 81 THEN ASSIGN cbAnd-13:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 82 THEN ASSIGN cbAnd-14:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 83 THEN ASSIGN cbAnd-16:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 84 THEN ASSIGN cbAnd-17:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 85 THEN ASSIGN cbAnd-18:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
            WHEN 86 THEN ASSIGN cbAnd-19:{&SV} = IF ENTRY(iCtr,cDataString,"|") <> "" THEN ENTRY(iCtr,cDataString,"|") ELSE "-".
        END CASE.
    END.
    DO iCtr = 87 TO 106:
        CASE iCtr:
            WHEN 87 THEN ASSIGN tOpenParen-1:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 88 THEN ASSIGN tOpenParen-2:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 89 THEN ASSIGN tOpenParen-3:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 90 THEN ASSIGN tOpenParen-4:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 91 THEN ASSIGN tOpenParen-5:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 92 THEN ASSIGN tOpenParen-6:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 93 THEN ASSIGN tOpenParen-7:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 94 THEN ASSIGN tOpenParen-8:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 95 THEN ASSIGN tOpenParen-9:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 96 THEN ASSIGN tOpenParen-10:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 97 THEN ASSIGN tOpenParen-11:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 98 THEN ASSIGN tOpenParen-12:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 99 THEN ASSIGN tOpenParen-13:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 100 THEN ASSIGN tOpenParen-14:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 101 THEN ASSIGN tOpenParen-15:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 102 THEN ASSIGN tOpenParen-16:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 103 THEN ASSIGN tOpenParen-17:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 104 THEN ASSIGN tOpenParen-18:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 105 THEN ASSIGN tOpenParen-19:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 106 THEN ASSIGN tOpenParen-20:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
        END CASE.
    END.
    DO iCtr = 107 TO 126:
        CASE iCtr:
            WHEN 107 THEN ASSIGN tCloseParen-1:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 108 THEN ASSIGN tCloseParen-2:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 109 THEN ASSIGN tCloseParen-3:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 110 THEN ASSIGN tCloseParen-4:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 111 THEN ASSIGN tCloseParen-5:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 112 THEN ASSIGN tCloseParen-6:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 113 THEN ASSIGN tCloseParen-7:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 114 THEN ASSIGN tCloseParen-8:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 115 THEN ASSIGN tCloseParen-9:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 116 THEN ASSIGN tCloseParen-10:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 117 THEN ASSIGN tCloseParen-11:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 118 THEN ASSIGN tCloseParen-12:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 119 THEN ASSIGN tCloseParen-13:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 120 THEN ASSIGN tCloseParen-14:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 121 THEN ASSIGN tCloseParen-15:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 122 THEN ASSIGN tCloseParen-16:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 123 THEN ASSIGN tCloseParen-17:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 124 THEN ASSIGN tCloseParen-18:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 125 THEN ASSIGN tCloseParen-19:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
            WHEN 126 THEN ASSIGN tCloseParen-20:CHECKED = IF ENTRY(iCtr,cDataString,"|") = "Y" THEN TRUE ELSE FALSE.
        END CASE.
    END.
    DO iCtr = 127 TO 130:
        CASE iCtr:
            WHEN 127 THEN ASSIGN cFieldList[1] = ENTRY(iCtr,cDataString,"|").
            WHEN 128 THEN ASSIGN cFieldList[2] = ENTRY(iCtr,cDataString,"|").
            WHEN 129 THEN ASSIGN cFieldList[3] = ENTRY(iCtr,cDataString,"|").
            WHEN 130 THEN ASSIGN cFieldList[4] = ENTRY(iCtr,cDataString,"|").
        END CASE.
    END. 
    IF NUM-ENTRIES(cDataString,"|") > 132 THEN ASSIGN
        fiRptName:{&SV} = IF ENTRY(131,cDataString,"|") <> "" THEN ENTRY(131,cDataString,"|") ELSE cFileName
        fiLockedCols:{&SV} = ENTRY(132,cDataString,"|")
        fiPagesWide:{&SV} = ENTRY(133,cDataString,"|").
    
    IF NUM-ENTRIES(cDataString,"|") > 133 THEN RUN ipLoadttColumns.

    IF cbAnd-1:{&SV} = "" THEN ASSIGN cbAnd-1:{&SV} = " ".
    IF cbAnd-2:{&SV} = "" THEN ASSIGN cbAnd-2:{&SV} = " ".
    IF cbAnd-3:{&SV} = "" THEN ASSIGN cbAnd-3:{&SV} = " ".
    IF cbAnd-4:{&SV} = "" THEN ASSIGN cbAnd-4:{&SV} = " ".
    IF cbAnd-6:{&SV} = "" THEN ASSIGN cbAnd-6:{&SV} = " ".
    IF cbAnd-7:{&SV} = "" THEN ASSIGN cbAnd-7:{&SV} = " ".
    IF cbAnd-8:{&SV} = "" THEN ASSIGN cbAnd-8:{&SV} = " ".
    IF cbAnd-9:{&SV} = "" THEN ASSIGN cbAnd-9:{&SV} = " ".
    IF cbAnd-11:{&SV} = "" THEN ASSIGN cbAnd-11:{&SV} = " ".
    IF cbAnd-12:{&SV} = "" THEN ASSIGN cbAnd-12:{&SV} = " ".
    IF cbAnd-13:{&SV} = "" THEN ASSIGN cbAnd-13:{&SV} = " ".
    IF cbAnd-14:{&SV} = "" THEN ASSIGN cbAnd-14:{&SV} = " ".
    IF cbAnd-16:{&SV} = "" THEN ASSIGN cbAnd-16:{&SV} = " ".
    IF cbAnd-17:{&SV} = "" THEN ASSIGN cbAnd-17:{&SV} = " ".
    IF cbAnd-18:{&SV} = "" THEN ASSIGN cbAnd-18:{&SV} = " ".
    IF cbAnd-19:{&SV} = "" THEN ASSIGN cbAnd-19:{&SV} = " ".
    APPLY 'value-changed' TO cbOf-2.
    APPLY 'value-changed' TO cbOf-3.
    APPLY 'value-changed' TO cbOf-4.
    APPLY 'value-changed' TO cbWhere-1.
    APPLY 'value-changed' TO cbAnd-1.
    APPLY 'value-changed' TO cbWhere-2.
    APPLY 'value-changed' TO cbAnd-2.
    APPLY 'value-changed' TO cbWhere-3.
    APPLY 'value-changed' TO cbAnd-3.
    APPLY 'value-changed' TO cbWhere-4.
    APPLY 'value-changed' TO cbAnd-4.
    APPLY 'value-changed' TO cbWhere-5.
    IF cbFile-2:{&SV} <> "-" THEN DO:
        ASSIGN
            tMore-1:CHECKED = TRUE.
        APPLY 'value-changed' TO tMore-1.
    END.
    APPLY 'value-changed' TO cbWhere-6.
    APPLY 'value-changed' TO cbAnd-6.
    APPLY 'value-changed' TO cbWhere-7.
    APPLY 'value-changed' TO cbAnd-7.
    APPLY 'value-changed' TO cbWhere-8.
    APPLY 'value-changed' TO cbAnd-8.
    APPLY 'value-changed' TO cbWhere-9.
    APPLY 'value-changed' TO cbAnd-9.
    APPLY 'value-changed' TO cbWhere-10.
    IF cbFile-3:{&SV} <> "-" THEN DO:
        ASSIGN
            tMore-2:CHECKED = TRUE.
        APPLY 'value-changed' TO tMore-2.
    END.
    APPLY 'value-changed' TO cbWhere-11.
    APPLY 'value-changed' TO cbAnd-11.
    APPLY 'value-changed' TO cbWhere-12.
    APPLY 'value-changed' TO cbAnd-12.
    APPLY 'value-changed' TO cbWhere-13.
    APPLY 'value-changed' TO cbAnd-13.
    APPLY 'value-changed' TO cbWhere-14.
    APPLY 'value-changed' TO cbAnd-14.
    APPLY 'value-changed' TO cbWhere-15.
    IF cbFile-4:{&SV} <> "-" THEN DO:
        ASSIGN
            tMore-3:CHECKED = TRUE.
        APPLY 'value-changed' TO tMore-3.
    END.
    APPLY 'value-changed' TO cbWhere-16.
    APPLY 'value-changed' TO cbAnd-16.
    APPLY 'value-changed' TO cbWhere-17.
    APPLY 'value-changed' TO cbAnd-17.
    APPLY 'value-changed' TO cbWhere-18.
    APPLY 'value-changed' TO cbAnd-18.
    APPLY 'value-changed' TO cbWhere-19.
    APPLY 'value-changed' TO cbAnd-19.
    APPLY 'value-changed' TO cbWhere-20.
    ASSIGN 
        lLoading = FALSE.
    
    RUN ipShowQuery IN THIS-PROCEDURE.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipLoadttColumns wWin 
PROCEDURE ipLoadttColumns :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF VAR iRow AS INT NO-UNDO.
    DEF VAR iCol AS INT NO-UNDO.

    DO iCtr = 134 TO NUM-ENTRIES(cDataString,"|"):
        IF INDEX(ENTRY(iCtr,cDataString,"|"),"`") <> 0 THEN DO:
            ASSIGN
                cTempString = ENTRY(iCtr,cDataString,"|").
            CREATE ttColumns.
            ASSIGN
                ttColumns.cColLabel = ENTRY(1,cTempString,"`")
                ttColumns.cColType = ENTRY(2,cTempString,"`")
                ttColumns.cColumn = ENTRY(3,cTempString,"`")
                ttColumns.cDataType = ENTRY(4,cTempString,"`")
                ttColumns.cDispLabel = ENTRY(5,cTempString,"`")
                ttColumns.cField = ENTRY(6,cTempString,"`")
                ttColumns.cFormat = ENTRY(7,cTempString,"`")
                ttColumns.cFormula = ENTRY(8,cTempString,"`")
                ttColumns.cInitVal = ENTRY(9,cTempString,"`")
                ttColumns.cLabel = ENTRY(10,cTempString,"`")
                ttColumns.cTable = ENTRY(11,cTempString,"`")
                ttColumns.iBand = INTEGER(ENTRY(12,cTempString,"`"))
                ttColumns.iColumn = INTEGER(ENTRY(13,cTempString,"`"))
                ttColumns.iExtent = INTEGER(ENTRY(14,cTempString,"`"))
                ttColumns.iIdx = INTEGER(ENTRY(15,cTempString,"`"))
                ttColumns.iPos = INTEGER(ENTRY(16,cTempString,"`"))
                ttColumns.iRow = INTEGER(ENTRY(17,cTempString,"`")).
        END.
    END.

    FOR EACH ttColumns BY ttColumns.iPos:
        slDisplayFields:ADD-LAST(ttColumns.cDispLabel) {&IN}.
        IF ttColumns.cColType = "DATA" THEN ASSIGN
            cFullFieldList = cFullFieldList + ttColumns.cTable + "." + ttColumns.cField + (IF ttColumns.iExtent <> 0 THEN "[" + STRING(ttColumns.iExtent) + "]" ELSE "") + ",".
    END.
    
    ASSIGN
        iRow = 1
        iCol = 1
        cFullFieldList = "".
    FOR EACH ttColumns BY ttColumns.iPos:
        ASSIGN
            ttColumns.iRow = iRow
            ttColumns.iCol = iCol
            ttColumns.cColumn = ENTRY(iCol,cColList)
            iCol = iCol + 1.
        IF ttColumns.cColType = "SKIP" 
        OR ttColumns.cColLabel = "<skip>" THEN ASSIGN
            iRow = iRow + 1
            iCol = 1.
        IF ttColumns.cColType = "DATA" THEN ASSIGN
            cFullFieldList = cFullFieldList + ttColumns.cTable + "." + ttColumns.cField + (IF ttColumns.iExtent <> 0 THEN "[" + STRING(ttColumns.iExtent) + "]" ELSE "") + ",".
    END.
    ASSIGN
        cFullFieldList = TRIM(cFullFieldList,",").

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipMove1Down wWin 
PROCEDURE ipMove1Down :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    ASSIGN
        tMore-1:CHECKED {&IN} = TRUE
        cbFile-2:{&SV} = cbFile-1:{&SV}.
        
    APPLY 'leave' TO cbFile-2.
    
    ASSIGN
        tMore-0:CHECKED = FALSE
        cbFile-1:{&SV} = "-"
        cbOf-2:{&SV} = "WHERE"
        cbRel-2:{&SV} = "-".

    ASSIGN    
        tOpenParen-6:CHECKED = tOpenParen-1:CHECKED
        tOpenParen-1:CHECKED = FALSE
        cbWhere-6:{&SV} = cbWhere-1:{&SV}
        cbWhere-1:{&SV} = "-"
        cbOp-6:{&SV} = cbOp-1:{&SV}
        cbOp-1:{&SV} = "="
        fiVal-6:{&SV} = fiVal-1:{&SV}
        fiVal-1:{&SV} = ""
        tCloseParen-6:CHECKED = tCloseParen-1:CHECKED
        tCloseParen-1:CHECKED = FALSE
        cbAnd-6:{&SV} = cbAnd-1:{&SV}
        cbAnd-1:{&SV} = "-"

        tOpenParen-7:CHECKED = tOpenParen-2:CHECKED
        tOpenParen-2:CHECKED = FALSE
        cbWhere-7:{&SV} = cbWhere-2:{&SV}
        cbWhere-2:{&SV} = "-"
        cbOp-7:{&SV} = cbOp-2:{&SV}
        cbOp-2:{&SV} = "="
        fiVal-7:{&SV} = fiVal-2:{&SV}
        fiVal-2:{&SV} = ""
        tCloseParen-7:CHECKED = tCloseParen-2:CHECKED
        tCloseParen-2:CHECKED = FALSE
        cbAnd-7:{&SV} = cbAnd-2:{&SV}
        cbAnd-2:{&SV} = "-"

        tOpenParen-8:CHECKED = tOpenParen-3:CHECKED
        tOpenParen-3:CHECKED = FALSE
        cbWhere-8:{&SV} = cbWhere-3:{&SV}
        cbWhere-3:{&SV} = "-"
        cbOp-8:{&SV} = cbOp-3:{&SV}
        cbOp-3:{&SV} = "="
        fiVal-8:{&SV} = fiVal-3:{&SV}
        fiVal-3:{&SV} = ""
        tCloseParen-8:CHECKED = tCloseParen-3:CHECKED
        tCloseParen-3:CHECKED = FALSE
        cbAnd-8:{&SV} = cbAnd-3:{&SV}
        cbAnd-3:{&SV} = "-"

        tOpenParen-9:CHECKED = tOpenParen-4:CHECKED
        tOpenParen-4:CHECKED = FALSE
        cbWhere-9:{&SV} = cbWhere-4:{&SV}
        cbWhere-4:{&SV} = "-"
        cbOp-9:{&SV} = cbOp-4:{&SV}
        cbOp-4:{&SV} = "="
        fiVal-9:{&SV} = fiVal-4:{&SV}
        fiVal-4:{&SV} = ""
        tCloseParen-9:CHECKED = tCloseParen-4:CHECKED
        tCloseParen-4:CHECKED = FALSE
        cbAnd-9:{&SV} = cbAnd-4:{&SV}
        cbAnd-4:{&SV} = "-"

        tOpenParen-10:CHECKED = tOpenParen-5:CHECKED
        tOpenParen-5:CHECKED = FALSE
        cbWhere-10:{&SV} = cbWhere-5:{&SV}
        cbWhere-5:{&SV} = "-"
        cbOp-10:{&SV} = cbOp-5:{&SV}
        cbOp-5:{&SV} = "="
        fiVal-10:{&SV} = fiVal-5:{&SV}
        fiVal-5:{&SV} = ""
        tCloseParen-10:CHECKED = tCloseParen-5:CHECKED
        tCloseParen-5:CHECKED = FALSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipMove2Down wWin 
PROCEDURE ipMove2Down :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    ASSIGN
        tMore-2:CHECKED {&IN} = TRUE
        cbFile-3:{&SV} = cbFile-2:{&SV}.
        
    APPLY 'leave' TO cbFile-3.

    ASSIGN
        tMore-1:CHECKED = FALSE
        cbFile-2:{&SV} = "-"
        cbOf-3:{&SV} = cbOf-2:{&SV}
        cbRel-3:{&SV} = cbRel-2:{&SV}
        cbOf-2:{&SV} = "WHERE"
        cbRel-2:{&SV} = "-".
    
    APPLY 'value-changed' TO cbOf-3.

    ASSIGN
        tOpenParen-11:CHECKED = tOpenParen-1:CHECKED
        tOpenParen-6:CHECKED = FALSE
        cbWhere-11:{&SV} = cbWhere-6:{&SV}
        cbWhere-6:{&SV} = "-"
        cbOp-11:{&SV} = cbOp-6:{&SV}
        cbOp-6:{&SV} = "="
        fiVal-11:{&SV} = fiVal-6:{&SV}
        fiVal-6:{&SV} = ""
        tCloseParen-11:CHECKED = tCloseParen-6:CHECKED
        tCloseParen-6:CHECKED = FALSE
        cbAnd-11:{&SV} = cbAnd-6:{&SV}
        cbAnd-6:{&SV} = "-"

        tOpenParen-12:CHECKED = tOpenParen-7:CHECKED
        tOpenParen-7:CHECKED = FALSE
        cbWhere-12:{&SV} = cbWhere-7:{&SV}
        cbWhere-7:{&SV} = "-"
        cbOp-12:{&SV} = cbOp-7:{&SV}
        cbOp-7:{&SV} = "="
        fiVal-12:{&SV} = fiVal-7:{&SV}
        fiVal-7:{&SV} = ""
        tCloseParen-12:CHECKED = tCloseParen-7:CHECKED
        tCloseParen-7:CHECKED = FALSE
        cbAnd-12:{&SV} = cbAnd-7:{&SV}
        cbAnd-7:{&SV} = "-"

        tOpenParen-13:CHECKED = tOpenParen-8:CHECKED
        tOpenParen-8:CHECKED = FALSE
        cbWhere-13:{&SV} = cbWhere-8:{&SV}
        cbWhere-8:{&SV} = "-"
        cbOp-13:{&SV} = cbOp-8:{&SV}
        cbOp-8:{&SV} = "="
        fiVal-13:{&SV} = fiVal-8:{&SV}
        fiVal-8:{&SV} = ""
        tCloseParen-13:CHECKED = tCloseParen-8:CHECKED
        tCloseParen-8:CHECKED = FALSE
        cbAnd-13:{&SV} = cbAnd-8:{&SV}
        cbAnd-8:{&SV} = "-"

        tOpenParen-14:CHECKED = tOpenParen-9:CHECKED
        tOpenParen-9:CHECKED = FALSE
        cbWhere-14:{&SV} = cbWhere-9:{&SV}
        cbWhere-9:{&SV} = "-"
        cbOp-14:{&SV} = cbOp-9:{&SV}
        cbOp-9:{&SV} = "="
        fiVal-14:{&SV} = fiVal-9:{&SV}
        fiVal-9:{&SV} = ""
        tCloseParen-14:CHECKED = tCloseParen-9:CHECKED
        tCloseParen-9:CHECKED = FALSE
        cbAnd-14:{&SV} = cbAnd-9:{&SV}
        cbAnd-9:{&SV} = "-"

        tOpenParen-15:CHECKED = tOpenParen-10:CHECKED
        tOpenParen-10:CHECKED = FALSE
        cbWhere-15:{&SV} = cbWhere-10:{&SV}
        cbWhere-10:{&SV} = "-"
        cbOp-15:{&SV} = cbOp-10:{&SV}
        cbOp-10:{&SV} = "="
        fiVal-15:{&SV} = fiVal-10:{&SV}
        fiVal-10:{&SV} = ""
        tCloseParen-15:CHECKED = tCloseParen-10:CHECKED
        tCloseParen-10:CHECKED = FALSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipMove2Up wWin 
PROCEDURE ipMove2Up :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    IF cbFile-1:{&SV} <> "-" THEN 
        RUN ipRemoveFromDisp IN THIS-PROCEDURE (cbFile-1:{&SV}).

    ASSIGN
        tMore-0:CHECKED {&IN} = TRUE
        cbFile-1:{&SV} = cbFile-2:{&SV}.

    APPLY 'leave' TO cbFile-1.
    
    ASSIGN
        tMore-1:CHECKED = FALSE
        cbFile-2:{&SV} = "-"
        cbOf-2:{&SV} = "WHERE"
        cbRel-2:{&SV} = "-"
        cFieldList[1] = "".
    
    ASSIGN
        tOpenParen-1:CHECKED = tOpenParen-6:CHECKED
        tOpenParen-6:CHECKED = FALSE
        cbWhere-1:{&SV} = cbWhere-6:{&SV}
        cbWhere-6:{&SV} = "-"
        cbOp-1:{&SV} = cbOp-6:{&SV}
        cbOp-6:{&SV} = "="
        fiVal-1:{&SV} = fiVal-6:{&SV}
        fiVal-6:{&SV} = ""
        tCloseParen-1:CHECKED = tCloseParen-6:CHECKED
        tCloseParen-6:CHECKED = FALSE
        cbAnd-1:{&SV} = cbAnd-6:{&SV}
        cbAnd-6:{&SV} = "-"

        tOpenParen-2:CHECKED = tOpenParen-7:CHECKED
        tOpenParen-7:CHECKED = FALSE
        cbWhere-2:{&SV} = cbWhere-7:{&SV}
        cbWhere-7:{&SV} = "-"
        cbOp-2:{&SV} = cbOp-7:{&SV}
        cbOp-7:{&SV} = "="
        fiVal-2:{&SV} = fiVal-7:{&SV}
        fiVal-7:{&SV} = ""
        tCloseParen-2:CHECKED = tCloseParen-7:CHECKED
        tCloseParen-7:CHECKED = FALSE
        cbAnd-2:{&SV} = cbAnd-7:{&SV}
        cbAnd-7:{&SV} = "-"

        tOpenParen-3:CHECKED = tOpenParen-8:CHECKED
        tOpenParen-8:CHECKED = FALSE
        cbWhere-3:{&SV} = cbWhere-8:{&SV}
        cbWhere-8:{&SV} = "-"
        cbOp-3:{&SV} = cbOp-8:{&SV}
        cbOp-8:{&SV} = "="
        fiVal-3:{&SV} = fiVal-8:{&SV}
        fiVal-8:{&SV} = ""
        tCloseParen-3:CHECKED = tCloseParen-8:CHECKED
        tCloseParen-8:CHECKED = FALSE
        cbAnd-3:{&SV} = cbAnd-8:{&SV}
        cbAnd-8:{&SV} = "-"

        tOpenParen-4:CHECKED = tOpenParen-9:CHECKED
        tOpenParen-9:CHECKED = FALSE
        cbWhere-4:{&SV} = cbWhere-9:{&SV}
        cbWhere-9:{&SV} = "-"
        cbOp-4:{&SV} = cbOp-9:{&SV}
        cbOp-9:{&SV} = "="
        fiVal-4:{&SV} = fiVal-9:{&SV}
        fiVal-9:{&SV} = ""
        tCloseParen-4:CHECKED = tCloseParen-9:CHECKED
        tCloseParen-9:CHECKED = FALSE
        cbAnd-4:{&SV} = cbAnd-9:{&SV}
        cbAnd-9:{&SV} = "-"

        tOpenParen-5:CHECKED = tOpenParen-10:CHECKED
        tOpenParen-10:CHECKED = FALSE
        cbWhere-5:{&SV} = cbWhere-10:{&SV}
        cbWhere-10:{&SV} = "-"
        cbOp-5:{&SV} = cbOp-10:{&SV}
        cbOp-10:{&SV} = "="
        fiVal-5:{&SV} = fiVal-10:{&SV}
        fiVal-10:{&SV} = ""
        tCloseParen-5:CHECKED = tCloseParen-10:CHECKED
        tCloseParen-10:CHECKED = FALSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipMove3Down wWin 
PROCEDURE ipMove3Down :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    IF cbFile-4:{&SV} <> "-" THEN 
        RUN ipRemoveFromDisp IN THIS-PROCEDURE (cbFile-4:{&SV}).

    ASSIGN
        tMore-3:CHECKED {&IN} = TRUE
        cbFile-4:{&SV} = cbFile-3:{&SV}.

    APPLY 'leave' TO cbFile-4.
    
    ASSIGN
        tMore-2:CHECKED = FALSE
        cbFile-3:{&SV} = "-"
        cbOf-4:{&SV} = cbOf-3:{&SV}
        cbRel-4:{&SV} = cbRel-3:{&SV}
        cbOf-3:{&SV} = "WHERE"
        cbRel-3:{&SV} = "-"
        cFieldList[4] = "".
    
    APPLY 'value-changed' TO cbOf-4.

    ASSIGN
        tOpenParen-16:CHECKED = tOpenParen-11:CHECKED
        tOpenParen-11:CHECKED = FALSE
        cbWhere-16:{&SV} = cbWhere-11:{&SV}
        cbWhere-11:{&SV} = "-"
        cbOp-16:{&SV} = cbOp-11:{&SV}
        cbOp-11:{&SV} = "="
        fiVal-16:{&SV} = fiVal-11:{&SV}
        fiVal-11:{&SV} = ""
        tCloseParen-16:CHECKED = tCloseParen-11:CHECKED
        tCloseParen-11:CHECKED = FALSE
        cbAnd-16:{&SV} = cbAnd-11:{&SV}
        cbAnd-11:{&SV} = "-"

        tOpenParen-17:CHECKED = tOpenParen-12:CHECKED
        tOpenParen-12:CHECKED = FALSE
        cbWhere-17:{&SV} = cbWhere-12:{&SV}
        cbWhere-12:{&SV} = "-"
        cbOp-17:{&SV} = cbOp-12:{&SV}
        cbOp-12:{&SV} = "="
        fiVal-17:{&SV} = fiVal-12:{&SV}
        fiVal-12:{&SV} = ""
        tCloseParen-17:CHECKED = tCloseParen-12:CHECKED
        tCloseParen-12:CHECKED = FALSE
        cbAnd-17:{&SV} = cbAnd-12:{&SV}
        cbAnd-12:{&SV} = "-"

        tOpenParen-18:CHECKED = tOpenParen-13:CHECKED
        tOpenParen-13:CHECKED = FALSE
        cbWhere-18:{&SV} = cbWhere-13:{&SV}
        cbWhere-13:{&SV} = "-"
        cbOp-18:{&SV} = cbOp-13:{&SV}
        cbOp-13:{&SV} = "="
        fiVal-18:{&SV} = fiVal-13:{&SV}
        fiVal-13:{&SV} = ""
        tCloseParen-18:CHECKED = tCloseParen-13:CHECKED
        tCloseParen-13:CHECKED = FALSE
        cbAnd-18:{&SV} = cbAnd-13:{&SV}
        cbAnd-13:{&SV} = "-"

        tOpenParen-19:CHECKED = tOpenParen-14:CHECKED
        tOpenParen-14:CHECKED = FALSE
        cbWhere-19:{&SV} = cbWhere-14:{&SV}
        cbWhere-14:{&SV} = "-"
        cbOp-19:{&SV} = cbOp-14:{&SV}
        cbOp-14:{&SV} = "="
        fiVal-19:{&SV} = fiVal-14:{&SV}
        fiVal-14:{&SV} = ""
        tCloseParen-19:CHECKED = tCloseParen-14:CHECKED
        tCloseParen-14:CHECKED = FALSE
        cbAnd-19:{&SV} = cbAnd-14:{&SV}
        cbAnd-14:{&SV} = "-"

        tOpenParen-20:CHECKED = tOpenParen-15:CHECKED
        tOpenParen-15:CHECKED = FALSE
        cbWhere-20:{&SV} = cbWhere-15:{&SV}
        cbWhere-15:{&SV} = "-"
        cbOp-20:{&SV} = cbOp-15:{&SV}
        cbOp-15:{&SV} = "="
        fiVal-20:{&SV} = fiVal-15:{&SV}
        fiVal-15:{&SV} = ""
        tCloseParen-20:CHECKED = tCloseParen-15:CHECKED
        tCloseParen-15:CHECKED = FALSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipMove3Up wWin 
PROCEDURE ipMove3Up :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    ASSIGN
        tMore-1:CHECKED {&IN} = TRUE
        cbFile-2:{&SV} = cbFile-3:{&SV}.
        
    APPLY 'leave' TO cbFile-2.
    
    ASSIGN
        tMore-2:CHECKED = FALSE
        cbFile-3:{&SV} = "-"
        cbOf-2:{&SV} = cbOf-3:{&SV}
        cbRel-2:{&SV} = cbRel-3:{&SV}
        cbOf-3:{&SV} = "WHERE"
        cbRel-3:{&SV} = "-".

    ASSIGN
        tOpenParen-6:CHECKED = tOpenParen-11:CHECKED
        tOpenParen-11:CHECKED = FALSE
        cbWhere-6:{&SV} = cbWhere-11:{&SV}
        cbWhere-11:{&SV} = "-"
        cbOp-6:{&SV} = cbOp-11:{&SV}
        cbOp-11:{&SV} = "="
        fiVal-6:{&SV} = fiVal-11:{&SV}
        fiVal-11:{&SV} = ""
        tCloseParen-6:CHECKED = tCloseParen-11:CHECKED
        tCloseParen-11:CHECKED = FALSE
        cbAnd-6:{&SV} = cbAnd-11:{&SV}
        cbAnd-11:{&SV} = "-"

        tOpenParen-7:CHECKED = tOpenParen-12:CHECKED
        tOpenParen-12:CHECKED = FALSE
        cbWhere-7:{&SV} = cbWhere-12:{&SV}
        cbWhere-12:{&SV} = "-"
        cbOp-7:{&SV} = cbOp-12:{&SV}
        cbOp-12:{&SV} = "="
        fiVal-7:{&SV} = fiVal-12:{&SV}
        fiVal-12:{&SV} = ""
        tCloseParen-7:CHECKED = tCloseParen-12:CHECKED
        tCloseParen-12:CHECKED = FALSE
        cbAnd-7:{&SV} = cbAnd-12:{&SV}
        cbAnd-12:{&SV} = "-"

        tOpenParen-8:CHECKED = tOpenParen-13:CHECKED
        tOpenParen-13:CHECKED = FALSE
        cbWhere-8:{&SV} = cbWhere-13:{&SV}
        cbWhere-13:{&SV} = "-"
        cbOp-8:{&SV} = cbOp-13:{&SV}
        cbOp-13:{&SV} = "="
        fiVal-8:{&SV} = fiVal-13:{&SV}
        fiVal-13:{&SV} = ""
        tCloseParen-8:CHECKED = tCloseParen-13:CHECKED
        tCloseParen-13:CHECKED = FALSE
        cbAnd-8:{&SV} = cbAnd-13:{&SV}
        cbAnd-13:{&SV} = "-"

        tOpenParen-9:CHECKED = tOpenParen-14:CHECKED
        tOpenParen-14:CHECKED = FALSE
        cbWhere-9:{&SV} = cbWhere-14:{&SV}
        cbWhere-14:{&SV} = "-"
        cbOp-9:{&SV} = cbOp-14:{&SV}
        cbOp-14:{&SV} = "="
        fiVal-9:{&SV} = fiVal-14:{&SV}
        fiVal-14:{&SV} = ""
        tCloseParen-9:CHECKED = tCloseParen-14:CHECKED
        tCloseParen-14:CHECKED = FALSE
        cbAnd-9:{&SV} = cbAnd-14:{&SV}
        cbAnd-14:{&SV} = "-"

        tOpenParen-10:CHECKED = tOpenParen-15:CHECKED
        tOpenParen-15:CHECKED = FALSE
        cbWhere-10:{&SV} = cbWhere-15:{&SV}
        cbWhere-15:{&SV} = "-"
        cbOp-10:{&SV} = cbOp-15:{&SV}
        cbOp-15:{&SV} = "="
        fiVal-10:{&SV} = fiVal-15:{&SV}
        fiVal-15:{&SV} = ""
        tCloseParen-10:CHECKED = tCloseParen-15:CHECKED
        tCloseParen-15:CHECKED = FALSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipMove4Up wWin 
PROCEDURE ipMove4Up :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    ASSIGN
        tMore-2:CHECKED {&IN} = TRUE
        cbFile-3:{&SV} = cbFile-4:{&SV}.
        
    APPLY 'leave' TO cbFile-3.
    
    ASSIGN
        tMore-3:CHECKED = FALSE
        cbFile-4:{&SV} = "-"
        cbOf-3:{&SV} = cbOf-4:{&SV}
        cbRel-3:{&SV} = cbRel-4:{&SV}
        cbOf-4:{&SV} = "WHERE"
        cbRel-4:{&SV} = "-".

    ASSIGN
        tOpenParen-11:CHECKED = tOpenParen-16:CHECKED
        tOpenParen-16:CHECKED = FALSE
        cbWhere-11:{&SV} = cbWhere-16:{&SV}
        cbWhere-16:{&SV} = "-"
        cbOp-11:{&SV} = cbOp-16:{&SV}
        cbOp-16:{&SV} = "="
        fiVal-11:{&SV} = fiVal-16:{&SV}
        fiVal-16:{&SV} = ""
        tCloseParen-11:CHECKED = tCloseParen-16:CHECKED
        tCloseParen-16:CHECKED = FALSE
        cbAnd-11:{&SV} = cbAnd-16:{&SV}
        cbAnd-16:{&SV} = "-"

        tOpenParen-12:CHECKED = tOpenParen-17:CHECKED
        tOpenParen-17:CHECKED = FALSE
        cbWhere-12:{&SV} = cbWhere-17:{&SV}
        cbWhere-17:{&SV} = "-"
        cbOp-12:{&SV} = cbOp-17:{&SV}
        cbOp-17:{&SV} = "="
        fiVal-12:{&SV} = fiVal-17:{&SV}
        fiVal-17:{&SV} = ""
        tCloseParen-12:CHECKED = tCloseParen-17:CHECKED
        tCloseParen-17:CHECKED = FALSE
        cbAnd-12:{&SV} = cbAnd-17:{&SV}
        cbAnd-17:{&SV} = "-"

        tOpenParen-13:CHECKED = tOpenParen-18:CHECKED
        tOpenParen-18:CHECKED = FALSE
        cbWhere-13:{&SV} = cbWhere-18:{&SV}
        cbWhere-18:{&SV} = "-"
        cbOp-13:{&SV} = cbOp-18:{&SV}
        cbOp-18:{&SV} = "="
        fiVal-13:{&SV} = fiVal-18:{&SV}
        fiVal-18:{&SV} = ""
        tCloseParen-13:CHECKED = tCloseParen-18:CHECKED
        tCloseParen-18:CHECKED = FALSE
        cbAnd-13:{&SV} = cbAnd-18:{&SV}
        cbAnd-18:{&SV} = "-"

        tOpenParen-14:CHECKED = tOpenParen-19:CHECKED
        tOpenParen-19:CHECKED = FALSE
        cbWhere-14:{&SV} = cbWhere-19:{&SV}
        cbWhere-19:{&SV} = "-"
        cbOp-14:{&SV} = cbOp-19:{&SV}
        cbOp-19:{&SV} = "="
        fiVal-14:{&SV} = fiVal-19:{&SV}
        fiVal-19:{&SV} = ""
        tCloseParen-14:CHECKED = tCloseParen-19:CHECKED
        tCloseParen-19:CHECKED = FALSE
        cbAnd-14:{&SV} = cbAnd-19:{&SV}
        cbAnd-19:{&SV} = "-"

        tOpenParen-15:CHECKED = tOpenParen-20:CHECKED
        tOpenParen-20:CHECKED = FALSE
        cbWhere-15:{&SV} = cbWhere-20:{&SV}
        cbWhere-20:{&SV} = "-"
        cbOp-15:{&SV} = cbOp-20:{&SV}
        cbOp-20:{&SV} = "="
        fiVal-15:{&SV} = fiVal-20:{&SV}
        fiVal-20:{&SV} = ""
        tCloseParen-15:CHECKED = tCloseParen-20:CHECKED
        tCloseParen-20:CHECKED = FALSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipProcessQuery wWin 
PROCEDURE ipProcessQuery :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF VAR hf AS HANDLE NO-UNDO.
    DEF VAR jCtr AS INT NO-UNDO.
    DEF VAR iSrcCol AS INT NO-UNDO.
    DEF VAR iTgtCol AS INT NO-UNDO.
    DEF VAR cSrcList AS CHAR NO-UNDO.
    DEF VAR cTgtList AS CHAR NO-UNDO.
    DEF VAR cTmpLabel AS CHAR NO-UNDO.
    DEF VAR iStart AS INT NO-UNDO.
    DEF VAR iEnd AS INT NO-UNDO.
    DEF VAR cTmpStr AS CHAR NO-UNDO.
    DEF VAR cNewLabel AS CHAR NO-UNDO.
    DEF VAR iExtents AS INT NO-UNDO.
    DEF VAR iLast AS INT NO-UNDO.
    DEF VAR cTempFieldName AS CHAR NO-UNDO.
    DEF VAR cTempExtent AS CHAR NO-UNDO.
    DO iCtr = 1 TO 20:
        IF VALID-HANDLE(hCalcCol[iCtr]) THEN DELETE WIDGET hCalcCol[iCtr].
    END.

    hQuery:QUERY-OPEN.
    CREATE BROWSE hBrowse
        ASSIGN 
        FRAME = FRAME f-Main:HANDLE
        SENSITIVE = TRUE
        SEPARATORS = TRUE
        ROW-MARKERS = FALSE
        COLUMN-RESIZABLE = TRUE
        COLUMN-MOVABLE = TRUE 
        ALLOW-COLUMN-SEARCHING = TRUE
        MULTIPLE = TRUE
        QUERY = hQuery
        COL = 101
        ROW = 24.75
        WIDTH = 59
        HEIGHT = 7.5    
        VISIBLE = TRUE
        NO-VALIDATE = TRUE
        TRIGGERS:
            ON CTRL-A PERSISTENT RUN ipGetAll.
            ON CTRL-C PERSISTENT RUN ipCopyToClip.
        END TRIGGERS.
        . 

    ASSIGN
        iCtr = 1.
    FOR EACH ttColumns BY ttColumns.iPos:
        IF ttColumns.cTable <> "" THEN DO:
            ASSIGN
                cTempExtent = IF ttColumns.iExtent = 0 THEN "" ELSE "[" + STRING(ttColumns.iExtent) + "]".
            hBrowse:ADD-LIKE-COLUMN(ttColumns.cTable + "." + ttColumns.cField + cTempExtent).
        END.
        ELSE DO:
            hCalcCol[iCtr] = hBrowse:ADD-CALC-COLUMN(ttColumns.cDataType,
                                                     ttColumns.cFormat,
                                                     ttColumns.cInitVal,
                                                     ttColumns.cColLabel,
                                                     ttColumns.iPos).
            iCtr = iCtr + 1.
        END.
    END.
    
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipRemoveFromDisp wWin 
PROCEDURE ipRemoveFromDisp :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF INPUT PARAMETER ipcFileName AS CHAR.
    DEF VAR cTest AS CHAR.

    DO iCtr = 1 TO NUM-ENTRIES(slDisplayFields:LIST-ITEMS {&IN}):
        ASSIGN
            cTest = ENTRY(2,ENTRY(iCtr,slDisplayFields:LIST-ITEMS),"(")
            cTest = TRIM(cTest," ")
            cTest = TRIM(cTest,")").
        IF cTest = ipcFileName THEN DO:
            ASSIGN
                slDisplayFields:{&SV} = ENTRY(iCtr,slDisplayFields:LIST-ITEMS)
                iCtr = iCtr - 1.
            APPLY 'choose' TO bRemove.
        END.
    END.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipSaveFile wWin 
PROCEDURE ipSaveFile :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF INPUT PARAMETER cHowSave AS CHAR NO-UNDO.
    
    DEF VAR cDataString AS CHAR NO-UNDO.
    DEF VAR cCalcCol AS CHAR NO-UNDO.

    /* Note: this order is for PROGRAMMER's conventienc, nothing else */
    ASSIGN cDataString = 
        (IF cbFile-1:{&SV} <> ? THEN cbFile-1:{&SV} ELSE "") + "|" +
        (IF cbFile-2:{&SV} <> ? THEN cbFile-2:{&SV} ELSE "") + "|" +
        (IF cbFile-3:{&SV} <> ? THEN cbFile-3:{&SV} ELSE "") + "|" +
        (IF cbFile-4:{&SV} <> ? THEN cbFile-4:{&SV} ELSE "") + "|".
    ASSIGN cDataString = cDataString +
        (IF cbOf-2:{&SV} <> ? THEN cbOf-2:{&SV} ELSE "") + "|" +
        (IF cbOf-3:{&SV} <> ? THEN cbOf-3:{&SV} ELSE "") + "|" +
        (IF cbOf-4:{&SV} <> ? THEN cbOf-4:{&SV} ELSE "") + "|".
    ASSIGN cDataString = cDataString +
        (IF cbRel-2:{&SV} <> ? THEN cbRel-2:{&SV} ELSE "") + "|" +
        (IF cbRel-3:{&SV} <> ? THEN cbRel-3:{&SV} ELSE "") + "|" +
        (IF cbRel-4:{&SV} <> ? THEN cbRel-4:{&SV} ELSE "") + "|".
    ASSIGN cDataString = cDataString +
        (IF cbWhere-1:{&SV} <> ? THEN cbWhere-1:{&SV} ELSE "") + "|" +
        (IF cbWhere-2:{&SV} <> ? THEN cbWhere-2:{&SV} ELSE "") + "|" +
        (IF cbWhere-3:{&SV} <> ? THEN cbWhere-3:{&SV} ELSE "") + "|" +
        (IF cbWhere-4:{&SV} <> ? THEN cbWhere-4:{&SV} ELSE "") + "|" +
        (IF cbWhere-5:{&SV} <> ? THEN cbWhere-5:{&SV} ELSE "") + "|" +
        (IF cbWhere-6:{&SV} <> ? THEN cbWhere-6:{&SV} ELSE "") + "|" +
        (IF cbWhere-7:{&SV} <> ? THEN cbWhere-7:{&SV} ELSE "") + "|" +
        (IF cbWhere-8:{&SV} <> ? THEN cbWhere-8:{&SV} ELSE "") + "|" +
        (IF cbWhere-9:{&SV} <> ? THEN cbWhere-9:{&SV} ELSE "") + "|" +
        (IF cbWhere-10:{&SV} <> ? THEN cbWhere-10:{&SV} ELSE "") + "|" +
        (IF cbWhere-11:{&SV} <> ? THEN cbWhere-11:{&SV} ELSE "") + "|" +
        (IF cbWhere-12:{&SV} <> ? THEN cbWhere-12:{&SV} ELSE "") + "|" +
        (IF cbWhere-13:{&SV} <> ? THEN cbWhere-13:{&SV} ELSE "") + "|" +
        (IF cbWhere-14:{&SV} <> ? THEN cbWhere-14:{&SV} ELSE "") + "|" +
        (IF cbWhere-15:{&SV} <> ? THEN cbWhere-15:{&SV} ELSE "") + "|" +
        (IF cbWhere-16:{&SV} <> ? THEN cbWhere-16:{&SV} ELSE "") + "|" +
        (IF cbWhere-17:{&SV} <> ? THEN cbWhere-17:{&SV} ELSE "") + "|" +
        (IF cbWhere-18:{&SV} <> ? THEN cbWhere-18:{&SV} ELSE "") + "|" +
        (IF cbWhere-19:{&SV} <> ? THEN cbWhere-19:{&SV} ELSE "") + "|" +
        (IF cbWhere-20:{&SV} <> ? THEN cbWhere-20:{&SV} ELSE "") + "|".
    ASSIGN cDataString = cDataString +
        (IF cbOp-1:{&SV} <> ? THEN cbOp-1:{&SV} ELSE "") + "|" +
        (IF cbOp-2:{&SV} <> ? THEN cbOp-2:{&SV} ELSE "") + "|" +
        (IF cbOp-3:{&SV} <> ? THEN cbOp-3:{&SV} ELSE "") + "|" +
        (IF cbOp-4:{&SV} <> ? THEN cbOp-4:{&SV} ELSE "") + "|" +
        (IF cbOp-5:{&SV} <> ? THEN cbOp-5:{&SV} ELSE "") + "|" +
        (IF cbOp-6:{&SV} <> ? THEN cbOp-6:{&SV} ELSE "") + "|" +
        (IF cbOp-7:{&SV} <> ? THEN cbOp-7:{&SV} ELSE "") + "|" +
        (IF cbOp-8:{&SV} <> ? THEN cbOp-8:{&SV} ELSE "") + "|" +
        (IF cbOp-9:{&SV} <> ? THEN cbOp-9:{&SV} ELSE "") + "|" +
        (IF cbOp-10:{&SV} <> ? THEN cbOp-10:{&SV} ELSE "") + "|" +
        (IF cbOp-11:{&SV} <> ? THEN cbOp-11:{&SV} ELSE "") + "|" +
        (IF cbOp-12:{&SV} <> ? THEN cbOp-12:{&SV} ELSE "") + "|" +
        (IF cbOp-13:{&SV} <> ? THEN cbOp-13:{&SV} ELSE "") + "|" +
        (IF cbOp-14:{&SV} <> ? THEN cbOp-14:{&SV} ELSE "") + "|" +
        (IF cbOp-15:{&SV} <> ? THEN cbOp-15:{&SV} ELSE "") + "|" +
        (IF cbOp-16:{&SV} <> ? THEN cbOp-16:{&SV} ELSE "") + "|" +
        (IF cbOp-17:{&SV} <> ? THEN cbOp-17:{&SV} ELSE "") + "|" +
        (IF cbOp-18:{&SV} <> ? THEN cbOp-18:{&SV} ELSE "") + "|" +
        (IF cbOp-19:{&SV} <> ? THEN cbOp-19:{&SV} ELSE "") + "|" +
        (IF cbOp-20:{&SV} <> ? THEN cbOp-20:{&SV} ELSE "") + "|".
    ASSIGN cDataString = cDataString +
        (IF fiVal-1:{&SV} <> ? THEN fiVal-1:{&SV} ELSE "") + "|" +
        (IF fiVal-2:{&SV} <> ? THEN fiVal-2:{&SV} ELSE "") + "|" +
        (IF fiVal-3:{&SV} <> ? THEN fiVal-3:{&SV} ELSE "") + "|" +
        (IF fiVal-4:{&SV} <> ? THEN fiVal-4:{&SV} ELSE "") + "|" +
        (IF fiVal-5:{&SV} <> ? THEN fiVal-5:{&SV} ELSE "") + "|" +
        (IF fiVal-6:{&SV} <> ? THEN fiVal-6:{&SV} ELSE "") + "|" +
        (IF fiVal-7:{&SV} <> ? THEN fiVal-7:{&SV} ELSE "") + "|" +
        (IF fiVal-8:{&SV} <> ? THEN fiVal-8:{&SV} ELSE "") + "|" +
        (IF fiVal-9:{&SV} <> ? THEN fiVal-9:{&SV} ELSE "") + "|" +
        (IF fiVal-10:{&SV} <> ? THEN fiVal-10:{&SV} ELSE "") + "|" +
        (IF fiVal-11:{&SV} <> ? THEN fiVal-11:{&SV} ELSE "") + "|" +
        (IF fiVal-12:{&SV} <> ? THEN fiVal-12:{&SV} ELSE "") + "|" +
        (IF fiVal-13:{&SV} <> ? THEN fiVal-13:{&SV} ELSE "") + "|" +
        (IF fiVal-14:{&SV} <> ? THEN fiVal-14:{&SV} ELSE "") + "|" +
        (IF fiVal-15:{&SV} <> ? THEN fiVal-15:{&SV} ELSE "") + "|" +
        (IF fiVal-16:{&SV} <> ? THEN fiVal-16:{&SV} ELSE "") + "|" +
        (IF fiVal-17:{&SV} <> ? THEN fiVal-17:{&SV} ELSE "") + "|" +
        (IF fiVal-18:{&SV} <> ? THEN fiVal-18:{&SV} ELSE "") + "|" +
        (IF fiVal-19:{&SV} <> ? THEN fiVal-19:{&SV} ELSE "") + "|" +
        (IF fiVal-20:{&SV} <> ? THEN fiVal-20:{&SV} ELSE "") + "|".
    ASSIGN cDataString = cDataString +
        (IF cbAnd-1:{&SV} <> ? THEN cbAnd-1:{&SV} ELSE "") + "|" +
        (IF cbAnd-2:{&SV} <> ? THEN cbAnd-2:{&SV} ELSE "") + "|" +
        (IF cbAnd-3:{&SV} <> ? THEN cbAnd-3:{&SV} ELSE "") + "|" +
        (IF cbAnd-4:{&SV} <> ? THEN cbAnd-4:{&SV} ELSE "") + "|" +
        (IF cbAnd-6:{&SV} <> ? THEN cbAnd-6:{&SV} ELSE "") + "|" +
        (IF cbAnd-7:{&SV} <> ? THEN cbAnd-7:{&SV} ELSE "") + "|" +
        (IF cbAnd-8:{&SV} <> ? THEN cbAnd-8:{&SV} ELSE "") + "|" +
        (IF cbAnd-9:{&SV} <> ? THEN cbAnd-9:{&SV} ELSE "") + "|" +
        (IF cbAnd-11:{&SV} <> ? THEN cbAnd-11:{&SV} ELSE "") + "|" +
        (IF cbAnd-12:{&SV} <> ? THEN cbAnd-12:{&SV} ELSE "") + "|" +
        (IF cbAnd-13:{&SV} <> ? THEN cbAnd-13:{&SV} ELSE "") + "|" +
        (IF cbAnd-14:{&SV} <> ? THEN cbAnd-14:{&SV} ELSE "") + "|" +
        (IF cbAnd-16:{&SV} <> ? THEN cbAnd-16:{&SV} ELSE "") + "|" +
        (IF cbAnd-17:{&SV} <> ? THEN cbAnd-17:{&SV} ELSE "") + "|" +
        (IF cbAnd-18:{&SV} <> ? THEN cbAnd-18:{&SV} ELSE "") + "|" +
        (IF cbAnd-19:{&SV} <> ? THEN cbAnd-19:{&SV} ELSE "") + "|".
    ASSIGN cDataString = cDataString +
        (IF tOpenParen-1:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-2:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-3:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-4:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-5:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-6:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-7:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-8:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-9:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-10:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-11:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-12:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-13:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-14:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-15:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-16:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-17:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-18:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-19:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tOpenParen-20:CHECKED THEN "Y" ELSE "N") + "|".
    ASSIGN cDataString = cDataString +
        (IF tCloseParen-1:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-2:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-3:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-4:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-5:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-6:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-7:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-8:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-9:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-10:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-11:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-12:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-13:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-14:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-15:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-16:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-17:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-18:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-19:CHECKED THEN "Y" ELSE "N") + "|" +
        (IF tCloseParen-20:CHECKED THEN "Y" ELSE "N") + "|".
    ASSIGN cDataString = cDataString + 
        (IF cFieldList[1] <> ? THEN cFieldList[1] ELSE "") + "|" +
        (IF cFieldList[2] <> ? THEN cFieldList[2] ELSE "") + "|" +
        (IF cFieldList[3] <> ? THEN cFieldList[3] ELSE "") + "|" +
        (IF cFieldList[4] <> ? THEN cFieldList[4] ELSE "") + "|".
    ASSIGN cDataString = cDataString + 
        (if fiRptName:{&SV} <> ? then fiRptName:{&SV} else "") + "|" + 
        fiLockedCols:{&SV} + "|" +
        fiPagesWide:{&SV} + "|".

    FOR EACH ttColumns:
        ASSIGN 
            cCalcCol = ttColumns.cColLabel + "`" + 
                       ttColumns.cColType + "`" + 
                       ttColumns.cColumn + "`" + 
                       ttColumns.cDataType + "`" + 
                       ttColumns.cDispLabel + "`" + 
                       ttColumns.cField + "`" + 
                       ttColumns.cFormat + "`" + 
                       ttColumns.cFormula + "`" + 
                       ttColumns.cInitVal + "`" + 
                       ttColumns.cLabel + "`" + 
                       ttColumns.cTable + "`" + 
                       STRING(ttColumns.iBand) + "`" + 
                       STRING(ttColumns.iColumn) + "`" + 
                       STRING(ttColumns.iExtent) + "`" + 
                       STRING(ttColumns.iIdx) + "`" + 
                       STRING(ttColumns.iPos) + "`" + 
                       STRING(ttColumns.iRow).
            cDataString = cDataString + (if cCalcCol <> ? then cCalcCol + "|" else "").
    END.

    /* Mark the end of file */

    ASSIGN cDataString = cDataString + CHR(10).

    IF cHowSave = "SaveAs" OR cFileName = "" THEN DO:
        ASSIGN
            cFileName = (IF fiRptName:{&SV} <> "" then fiRptName:{&SV} else "SAMPLE") + " (" + STRING(YEAR(TODAY),"9999") + "_" +
                                                 STRING(MONTH(TODAY),"99") + "_" +
                                                 STRING(DAY(TODAY),"99") + ")" + ".qry".
        SYSTEM-DIALOG GET-FILE cFileName
        TITLE "Save this Query..."
        FILTERS "Query Files (*.qry)"  "*.qry"
        USE-FILENAME
        SAVE-AS
        DEFAULT-EXTENSION ".qry"
        INITIAL-DIR "..\Reports\".
    END.
    OUTPUT TO VALUE(cFileName).
    PUT UNFORMATTED cDataString.
    OUTPUT CLOSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipSetDisplay wWin 
PROCEDURE ipSetDisplay :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF VAR cTempFieldName AS CHAR NO-UNDO.
    DEF VAR iExtents AS INT NO-UNDO.
    DEF VAR iLast AS INT NO-UNDO.
    DEF VAR cTemp AS CHAR NO-UNDO.
    DEF VAR tTempPos AS INT NO-UNDO.
    DEF VAR cReservedPos AS CHAR NO-UNDO.
    DEF VAR iRow AS INT NO-UNDO.
    DEF VAR iCol AS INT NO-UNDO.
    
    for each ttColumns:
        if ttColumns.cColType = "DATA" then delete ttColumns.
        else assign cReservedPos = cReservedPos + string(ttColumns.iPos) + ",".
    end.
    assign
        cReservedPos = trim(cReservedPos,",")
        tTempPos = 1.
    IF cbFile-1:{&SV} <> ? 
    THEN DO:
        &SCOPED-DEFINE iSet 1
        FIND _file WHERE
            _file._file-name = cbFile-{&iSet}:{&SV}
            NO-LOCK NO-ERROR.
        DO iCtr = 1 TO NUM-ENTRIES(cFieldList[{&iSet}]):
            FIND _field OF _file WHERE
                _field._field-name = SUBSTRING(ENTRY(iCtr,cFieldList[{&iSet}]),1,INDEX(ENTRY(iCtr,cFieldList[{&iSet}]),"[") - 1)
                NO-LOCK NO-ERROR.
            IF AVAIL _field THEN DO:
                IF _field._extent < 2 THEN DO:
                    DO WHILE CAN-DO(cReservedPos,STRING(tTempPos)):
                        ASSIGN
                            tTempPos = tTempPos + 1.
                    END.
                    CREATE ttColumns.
                    ASSIGN
                        ttColumns.cColLabel = _field._label
                        ttColumns.cColType = "DATA"
                        ttColumns.cColumn = ""
                        ttColumns.cDataType = _field._data-type
                        ttColumns.cDispLabel = (if _field._label <> ? then _field._label else _field._field-name) + " (" + _file._file-name + ")"                        ttColumns.cField = _field._field-name
                        ttColumns.cFormat = _field._format
                        ttColumns.cFormula = ""
                        ttColumns.cInitVal = ""
                        ttColumns.cLabel = _field._label
                        ttColumns.cTable = _file._file-name
                        ttColumns.iBand = 1    
                        ttColumns.iColumn = 0    
                        ttColumns.iExtent = 0    
                        ttColumns.iIdx = tTempPos    
                        ttColumns.iPos = tTempPos
                        ttColumns.iRow = 1
                        tTempPos = tTempPos + 1
                        .
                END.
                ELSE DO jCtr = 1 TO _field._extent:
                    ASSIGN
                        cTemp = _field._field-name + "[" + STRING(jCtr) + "]".
                    IF CAN-DO(cFieldList[{&iSet}],cTemp) 
                    AND NOT CAN-FIND(FIRST ttColumns WHERE
                        ttColumns.cTable = _file._file-name AND
                        ttColumns.cField = _field._field-name AND
                        ttColumns.cLabel = _field._label AND
                        ttColumns.iExtent = jCtr)
                    THEN DO:
                        DO WHILE CAN-DO(cReservedPos,STRING(tTempPos)):
                            ASSIGN
                                tTempPos = tTempPos + 1.
                        END.
                        CREATE ttColumns.
                        ASSIGN
                            ttColumns.cColLabel = if _field._label <> ? then _field._label else _field._field-name + "[" + STRING(jCtr) + "]"
                            ttColumns.cColType = "DATA"
                            ttColumns.cColumn = ""
                            ttColumns.cDataType = _field._data-type
                            ttColumns.cDispLabel = if _field._label <> ? then _field._label else _field._field-name + "[" + STRING(jCtr) + "]" + " (" + _file._file-name + ")"
                            ttColumns.cField = _field._field-name
                            ttColumns.cFormat = _field._format
                            ttColumns.cFormula = ""
                            ttColumns.cInitVal = ""
                            ttColumns.cLabel = _field._label
                            ttColumns.cTable = _file._file-name
                            ttColumns.iBand = 1    
                            ttColumns.iColumn = 0    
                            ttColumns.iExtent = jCtr    
                            ttColumns.iIdx = tTempPos    
                            ttColumns.iPos = tTempPos
                            ttColumns.iRow = 1
                            tTempPos = tTempPos + 1
                            .
                    END.
                END.
            END.
        END.
    END.
    IF cbFile-2:{&SV} <> ? 
    AND cbFile-2:{&SV} <> cbFile-1:{&SV} 
    THEN DO:
        &SCOPED-DEFINE iSet 2
        FIND _file WHERE
            _file._file-name = cbFile-{&iSet}:{&SV}
            NO-LOCK NO-ERROR.
        DO iCtr = 1 TO NUM-ENTRIES(cFieldList[{&iSet}]):
            FIND _field OF _file WHERE
                _field._field-name = SUBSTRING(ENTRY(iCtr,cFieldList[{&iSet}]),1,INDEX(ENTRY(iCtr,cFieldList[{&iSet}]),"[") - 1)
                NO-LOCK NO-ERROR.
            IF AVAIL _field THEN DO:
                IF _field._extent < 2 THEN DO:
                    DO WHILE CAN-DO(cReservedPos,STRING(tTempPos)):
                        ASSIGN
                            tTempPos = tTempPos + 1.
                    END.
                    CREATE ttColumns.
                    ASSIGN
                        ttColumns.cColLabel = _field._label
                        ttColumns.cColType = "DATA"
                        ttColumns.cColumn = ""
                        ttColumns.cDataType = _field._data-type
                        ttColumns.cDispLabel = (if _field._label <> ? then _field._label else _field._field-name) + " (" + _file._file-name + ")"                        ttColumns.cField = _field._field-name
                        ttColumns.cFormat = _field._format
                        ttColumns.cFormula = ""
                        ttColumns.cInitVal = ""
                        ttColumns.cLabel = _field._label
                        ttColumns.cTable = _file._file-name
                        ttColumns.iBand = 1    
                        ttColumns.iColumn = 0    
                        ttColumns.iExtent = 0    
                        ttColumns.iIdx = tTempPos    
                        ttColumns.iPos = tTempPos
                        ttColumns.iRow = 1
                        tTempPos = tTempPos + 1
                        .
                END.
                ELSE DO jCtr = 1 TO _field._extent:
                    ASSIGN
                        cTemp = _field._field-name + "[" + STRING(jCtr) + "]".
                    IF CAN-DO(cFieldList[{&iSet}],cTemp) 
                    AND NOT CAN-FIND(FIRST ttColumns WHERE
                        ttColumns.cTable = _file._file-name AND
                        ttColumns.cField = _field._field-name AND
                        ttColumns.cLabel = _field._label AND
                        ttColumns.iExtent = jCtr)
                    THEN DO:
                        DO WHILE CAN-DO(cReservedPos,STRING(tTempPos)):
                            ASSIGN
                                tTempPos = tTempPos + 1.
                        END.
                        CREATE ttColumns.
                        ASSIGN
                            ttColumns.cColLabel = if _field._label <> ? then _field._label else _field._field-name + "[" + STRING(jCtr) + "]"
                            ttColumns.cColType = "DATA"
                            ttColumns.cColumn = ""
                            ttColumns.cDataType = _field._data-type
                            ttColumns.cDispLabel = if _field._label <> ? then _field._label else _field._field-name + "[" + STRING(jCtr) + "]" + " (" + _file._file-name + ")"
                            ttColumns.cField = _field._field-name
                            ttColumns.cFormat = _field._format
                            ttColumns.cFormula = ""
                            ttColumns.cInitVal = ""
                            ttColumns.cLabel = _field._label
                            ttColumns.cTable = _file._file-name
                            ttColumns.iBand = 1    
                            ttColumns.iColumn = 0    
                            ttColumns.iExtent = jCtr    
                            ttColumns.iIdx = tTempPos    
                            ttColumns.iPos = tTempPos
                            ttColumns.iRow = 1
                            tTempPos = tTempPos + 1
                            .
                    END.
                END.
            END.
        END.
    END.
    IF cbFile-3:{&SV} <> ? 
    AND cbFile-3:{&SV} <> cbFile-1:{&SV}
    AND cbFile-3:{&SV} <> cbFile-2:{&SV}
    THEN DO:
        &SCOPED-DEFINE iSet 3
        FIND _file WHERE
            _file._file-name = cbFile-{&iSet}:{&SV}
            NO-LOCK NO-ERROR.
        DO iCtr = 1 TO NUM-ENTRIES(cFieldList[{&iSet}]):
            FIND _field OF _file WHERE
                _field._field-name = SUBSTRING(ENTRY(iCtr,cFieldList[{&iSet}]),1,INDEX(ENTRY(iCtr,cFieldList[{&iSet}]),"[") - 1)
                NO-LOCK NO-ERROR.
            IF AVAIL _field THEN DO:
                IF _field._extent < 2 THEN DO:
                    DO WHILE CAN-DO(cReservedPos,STRING(tTempPos)):
                        ASSIGN
                            tTempPos = tTempPos + 1.
                    END.
                    CREATE ttColumns.
                    ASSIGN
                        ttColumns.cColLabel = _field._label
                        ttColumns.cColType = "DATA"
                        ttColumns.cColumn = ""
                        ttColumns.cDataType = _field._data-type
                        ttColumns.cDispLabel = (if _field._label <> ? then _field._label else _field._field-name) + " (" + _file._file-name + ")"                        ttColumns.cField = _field._field-name
                        ttColumns.cFormat = _field._format
                        ttColumns.cFormula = ""
                        ttColumns.cInitVal = ""
                        ttColumns.cLabel = _field._label
                        ttColumns.cTable = _file._file-name
                        ttColumns.iBand = 1    
                        ttColumns.iColumn = 0    
                        ttColumns.iExtent = 0    
                        ttColumns.iIdx = tTempPos    
                        ttColumns.iPos = tTempPos
                        ttColumns.iRow = 1
                        tTempPos = tTempPos + 1
                        .
                END.
                ELSE DO jCtr = 1 TO _field._extent:
                    ASSIGN
                        cTemp = _field._field-name + "[" + STRING(jCtr) + "]".
                    IF CAN-DO(cFieldList[{&iSet}],cTemp) 
                    AND NOT CAN-FIND(FIRST ttColumns WHERE
                        ttColumns.cTable = _file._file-name AND
                        ttColumns.cField = _field._field-name AND
                        ttColumns.cLabel = _field._label AND
                        ttColumns.iExtent = jCtr)
                    THEN DO:
                        DO WHILE CAN-DO(cReservedPos,STRING(tTempPos)):
                            ASSIGN
                                tTempPos = tTempPos + 1.
                        END.
                        CREATE ttColumns.
                        ASSIGN
                            ttColumns.cColLabel = if _field._label <> ? then _field._label else _field._field-name + "[" + STRING(jCtr) + "]"
                            ttColumns.cColType = "DATA"
                            ttColumns.cColumn = ""
                            ttColumns.cDataType = _field._data-type
                            ttColumns.cDispLabel = if _field._label <> ? then _field._label else _field._field-name + "[" + STRING(jCtr) + "]" + " (" + _file._file-name + ")"
                            ttColumns.cField = _field._field-name
                            ttColumns.cFormat = _field._format
                            ttColumns.cFormula = ""
                            ttColumns.cInitVal = ""
                            ttColumns.cLabel = _field._label
                            ttColumns.cTable = _file._file-name
                            ttColumns.iBand = 1    
                            ttColumns.iColumn = 0    
                            ttColumns.iExtent = jCtr    
                            ttColumns.iIdx = tTempPos    
                            ttColumns.iPos = tTempPos
                            ttColumns.iRow = 1
                            tTempPos = tTempPos + 1
                            .
                    END.
                END.
            END.
        END.
    END.
    IF cbFile-4:{&SV} <> ? 
    AND cbFile-4:{&SV} <> cbFile-1:{&SV}
    AND cbFile-4:{&SV} <> cbFile-2:{&SV}
    AND cbFile-4:{&SV} <> cbFile-3:{&SV}
    THEN DO:
        &SCOPED-DEFINE iSet 4
        FIND _file WHERE
            _file._file-name = cbFile-{&iSet}:{&SV}
            NO-LOCK NO-ERROR.
        DO iCtr = 1 TO NUM-ENTRIES(cFieldList[{&iSet}]):
            FIND _field OF _file WHERE
                _field._field-name = SUBSTRING(ENTRY(iCtr,cFieldList[{&iSet}]),1,INDEX(ENTRY(iCtr,cFieldList[{&iSet}]),"[") - 1)
                NO-LOCK NO-ERROR.
            IF AVAIL _field THEN DO:
                IF _field._extent < 2 THEN DO:
                    DO WHILE CAN-DO(cReservedPos,STRING(tTempPos)):
                        ASSIGN
                            tTempPos = tTempPos + 1.
                    END.
                    CREATE ttColumns.
                    ASSIGN
                        ttColumns.cColLabel = _field._label
                        ttColumns.cColType = "DATA"
                        ttColumns.cColumn = ""
                        ttColumns.cDataType = _field._data-type
                        ttColumns.cDispLabel = (if _field._label <> ? then _field._label else _field._field-name) + " (" + _file._file-name + ")"                        ttColumns.cField = _field._field-name
                        ttColumns.cFormat = _field._format
                        ttColumns.cFormula = ""
                        ttColumns.cInitVal = ""
                        ttColumns.cLabel = _field._label
                        ttColumns.cTable = _file._file-name
                        ttColumns.iBand = 1    
                        ttColumns.iColumn = 0    
                        ttColumns.iExtent = 0    
                        ttColumns.iIdx = tTempPos    
                        ttColumns.iPos = tTempPos
                        ttColumns.iRow = 1
                        tTempPos = tTempPos + 1
                        .
                END.
                ELSE DO jCtr = 1 TO _field._extent:
                    ASSIGN
                        cTemp = _field._field-name + "[" + STRING(jCtr) + "]".
                    IF CAN-DO(cFieldList[{&iSet}],cTemp) 
                    AND NOT CAN-FIND(FIRST ttColumns WHERE
                        ttColumns.cTable = _file._file-name AND
                        ttColumns.cField = _field._field-name AND
                        ttColumns.cLabel = _field._label AND
                        ttColumns.iExtent = jCtr)
                    THEN DO:
                        DO WHILE CAN-DO(cReservedPos,STRING(tTempPos)):
                            ASSIGN
                                tTempPos = tTempPos + 1.
                        END.
                        CREATE ttColumns.
                        ASSIGN
                            ttColumns.cColLabel = if _field._label <> ? then _field._label else _field._field-name + "[" + STRING(jCtr) + "]"
                            ttColumns.cColType = "DATA"
                            ttColumns.cColumn = ""
                            ttColumns.cDataType = _field._data-type
                            ttColumns.cDispLabel = if _field._label <> ? then _field._label else _field._field-name + "[" + STRING(jCtr) + "]" + " (" + _file._file-name + ")"
                            ttColumns.cField = _field._field-name
                            ttColumns.cFormat = _field._format
                            ttColumns.cFormula = ""
                            ttColumns.cInitVal = ""
                            ttColumns.cLabel = _field._label
                            ttColumns.cTable = _file._file-name
                            ttColumns.iBand = 1    
                            ttColumns.iColumn = 0    
                            ttColumns.iExtent = jCtr    
                            ttColumns.iIdx = tTempPos    
                            ttColumns.iPos = tTempPos
                            ttColumns.iRow = 1
                            tTempPos = tTempPos + 1
                            .
                    END.
                END.
            END.
        END.
    END.
    
    ASSIGN
        iRow = 1
        iCol = 1
        slDisplayFields:LIST-ITEMS = "".
    FOR EACH ttColumns BY ttColumns.iPos:
        slDisplayFields:ADD-LAST(ttColumns.cDispLabel).
        ASSIGN
            ttColumns.iRow = iRow
            ttColumns.iCol = iCol
            ttColumns.cColumn = ENTRY(iCol,cColList)
            iCol = iCol + 1.
        IF ttColumns.cColType = "SKIP" THEN ASSIGN
            iRow = iRow + 1
            iCol = 1.
        IF ttColumns.cColType = "DATA" THEN ASSIGN
            cFullFieldList = cFullFieldList + ttColumns.cTable + "." + ttColumns.cField + (IF ttColumns.iExtent <> 0 THEN "[" + STRING(ttColumns.iExtent) + "]" ELSE "") + ",".
    END.
    ASSIGN
        cFullFieldList = TRIM(cFullFieldList,",").

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipShowQuery wWin 
PROCEDURE ipShowQuery :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF VAR lField AS LOG.

    ASSIGN
        eQuery:{&SV} = "FOR ".
    
    IF cbFile-1:{&SV} <> "-" THEN DO:
        ASSIGN
            eQuery:{&SV} = eQuery:{&SV} + "EACH " + cbFile-1:{&SV} + " NO-LOCK WHERE ".

        &SCOPED-DEFINE iFileLevel 1

        &SCOPED-DEFINE iFieldLevel 1
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.

        &SCOPED-DEFINE iFieldLevel 2
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.

        &SCOPED-DEFINE iFieldLevel 3
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.

        &SCOPED-DEFINE iFieldLevel 4
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.

        &SCOPED-DEFINE iFieldLevel 5
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
        END.

        IF eQuery:{&SV} > "FOR EACH " THEN ASSIGN
            eQuery:{&SV} = eQuery:{&SV} + ", ".
    END.

    IF cbFile-2:{&SV} <> "-" THEN DO:
        ASSIGN
            eQuery:{&SV} = eQuery:{&SV} + "EACH ".
            eQuery:{&SV} = eQuery:{&SV} + cbFile-2:{&SV} + 
                           (IF cbOf-2:{&SV} = "OF" THEN (" OF " + cbRel-2:{&SV} + " NO-LOCK WHERE ") ELSE " NO-LOCK WHERE ").

        &SCOPED-DEFINE iFileLevel 2
    
        &SCOPED-DEFINE iFieldLevel 6
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.
        &SCOPED-DEFINE iFieldLevel 7
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.
        &SCOPED-DEFINE iFieldLevel 8
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.
        &SCOPED-DEFINE iFieldLevel 9
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.
        &SCOPED-DEFINE iFieldLevel 10
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
        END.
        IF eQuery:{&SV} > "FOR EACH " THEN ASSIGN
            eQuery:{&SV} = eQuery:{&SV} + ", ".
    END.

    RUN ipShowQuery2 IN THIS-PROCEDURE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ipShowQuery2 wWin 
PROCEDURE ipShowQuery2 :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEF VAR lField AS LOG.

    IF cbFile-3:{&SV} <> "-" THEN DO:
        ASSIGN
            eQuery:{&SV} = eQuery:{&SV} + "EACH ".
            eQuery:{&SV} = eQuery:{&SV} + cbFile-3:{&SV} + 
                           (IF cbOf-3:{&SV} = "OF" THEN (" OF " + cbRel-3:{&SV} + " NO-LOCK WHERE ") ELSE " NO-LOCK WHERE ").
    
        &SCOPED-DEFINE iFileLevel 3
    
        &SCOPED-DEFINE iFieldLevel 11
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.
        &SCOPED-DEFINE iFieldLevel 12
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.
        &SCOPED-DEFINE iFieldLevel 13
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.
        &SCOPED-DEFINE iFieldLevel 14
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.
        &SCOPED-DEFINE iFieldLevel 15
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
        END.
        IF eQuery:{&SV} > "FOR EACH " THEN ASSIGN
            eQuery:{&SV} = eQuery:{&SV} + ", ".
    END.

    IF cbFile-4:{&SV} <> "-" THEN DO:
        ASSIGN
            eQuery:{&SV} = eQuery:{&SV} + "EACH ".
            eQuery:{&SV} = eQuery:{&SV} + cbFile-4:{&SV} + 
                           (IF cbOf-4:{&SV} = "OF" THEN (" OF " + cbRel-4:{&SV} + " NO-LOCK WHERE ") ELSE " NO-LOCK WHERE ").

        &SCOPED-DEFINE iFileLevel 4
    
        &SCOPED-DEFINE iFieldLevel 16
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.

        &SCOPED-DEFINE iFieldLevel 17
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.

        &SCOPED-DEFINE iFieldLevel 18
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.

        &SCOPED-DEFINE iFieldLevel 19
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
            ASSIGN 
                eQuery:{&SV} = eQuery:{&SV} + (IF cbAnd-{&iFieldLevel}:{&SV} <> "-" THEN " " + cbAnd-{&iFieldLevel}:{&SV} + " " ELSE "").
        END.

        &SCOPED-DEFINE iFieldLevel 20
        IF cbWhere-{&iFieldLevel}:{&SV} <> "-" THEN DO:
            IF NUM-ENTRIES(fiVal-{&iFieldLevel}:{&SV},".") > 1
            AND CAN-DO(cFileList,ENTRY(1,fiVal-{&iFieldLevel}:{&SV},".")) THEN ASSIGN
                lField = TRUE.
            ASSIGN
                eQuery:{&SV} = eQuery:{&SV} + 
                (IF tOpenParen-{&iFieldLevel}:CHECKED THEN "(" ELSE "") +
                cbFile-{&iFileLevel}:{&SV} + "." + cbWhere-{&iFieldLevel}:{&SV} + " " +
                cbOp-{&iFieldLevel}:{&SV} + " " +
                (IF cDataType[{&iFieldLevel}] = "CHARACTER" AND NOT lField THEN quoter(fiVal-{&iFieldLevel}:{&SV}) ELSE fiVal-{&iFieldLevel}:{&SV}) + 
                (IF tCloseParen-{&iFieldLevel}:CHECKED THEN ")" ELSE "").
        END.
    END.

    ASSIGN
        eQuery:{&SV} = TRIM(eQuery:{&SV}," ")
        eQuery:{&SV} = TRIM(eQuery:{&SV},",")
        eQuery:{&SV} = TRIM(eQuery:{&SV}," WHERE").


END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

