        1   /* log_oedb.p
        2    *
        3    * rule set for oedb
        4    *
        5    */
        6   
        7   
        8   /*******************************************************************************
        9    *******************************************************************************
       10    **                                                                           **
       11    **                                                                           **
       12    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       13    **  http://www.greenfieldtech.com                                            **
       14    **                                                                           **
       15    **  ProTop is free software; you can redistribute it and/or modify it        **
       16    **  under the terms of the GNU General Public License (GPL) as published     **
       17    **  by the Free Software Foundation; either version 2 of the License, or     **
       18    **  at your option) any later version.                                       **
       19    **                                                                           **
       20    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       21    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       22    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       23    **  for more details.                                                        **
       24    **                                                                           **
       25    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       26    **  of use and alternative licensing options for this software.              **
       27    **                                                                           **
       28    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       29    **                                                                           **
       30    **  See http://www.fsf.org for more information about the GPL.               **
       31    **                                                                           **
       32    **                                                                           **
       33    *******************************************************************************
       34    *******************************************************************************
       35    *
       36    * protop.i
       37    *
       38    * Header file for protop family of programs
       39    *
       40    *
       41    * Known Bugs & Issues:
       42    *
       43    *
       44    * To Do:
       45    *
       46    *
       47    * Author:
       48    *
       49    *      Tom Bascom, Greenfield Technologies
       50    *      http://www.greenfieldtech.com
       51    *      August 28, 2003
       52    *
       53    */
       54   
       55   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       56   &global-define  FASTLOCK        true
       57   &ELSE
       58   &global-define  FASTLOCK        false
       59   &ENDIF
       60   
       61   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       62   &global-define  OE11            "yes"
       63   &global-define  xDEBUGTT        false
       64   &ENDIF
       65   
       66   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       67   &global-define  NOSERIALIZE     serialize-hidden
       68   &ENDIF
       69   
       70   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       71   &global-define  BIGINT          int64
       72   &ELSE
       73   &global-define  BIGINT          decimal
       74   &ENDIF
       75   
       76   
       77   /* lib/v9.i
       78    *
       79    */
       80   
       81   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       82   &global-define  CPYLOB  "no"
       83   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       84   &global-define  LNGCR   character
       85   &global-define  DTZ     integer
       86   &global-define  BIGINT  decimal
       87   &ELSE
       88   &global-define  OE10    "yes"
       89   &global-define  NOW     now
       90   &global-define  LNGCR   longchar
       91   &global-define  DTZ     datetime-tz
       92   &global-define  BIGINT  int64
       93   &ENDIF
       94    
       95   
       96   /* use extended _connect fields: -client, -cache*
       97    */
       98   
       99   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      100   &global-define  CONNECTX        "yes"
      101   &ELSE
      102   &global-define  CONNECTX        "no"
      103   &ENDIF
      104   
      105   define stream inStrm.
      106   
      107   define new global shared variable dbgMode as integer no-undo initial 1.
      108   
      109   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      110    *
      111    * someday everyone will have OO and I will replace these with a gsv class
      112    * or something of that ilk
      113    *
      114    */
      115   
      116   define new global shared variable pt_shortname   as character no-undo.
      117   define new global shared variable pt_uniqName    as character no-undo.
      118   define new global shared variable pt_server      as character no-undo.
      119   define new global shared variable pt_resrcType   as character no-undo.
      120   
      121   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      122   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      123   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      124   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      125   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      126   
      127   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      128   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      129   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      130   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      131   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      132   define new global shared variable pt_ioFileName  as character no-undo.
      133   define new global shared variable pt_dfCmd       as character no-undo.
      134   
      135   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      136   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      137   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      138   
      139   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      140   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      141   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      142   
      143   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      144   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      145   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      146   
      147   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      148   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      149   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      150   
      151   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      152   
      153   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      154   
      155   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      156   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      157   
      158   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      159    * 
      160    */
      161   
      162   define new global shared variable stime as integer no-undo.                     /* start time                           */
      163   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      164   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      165   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      166   
      167   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      168   
      169                                                                                   /* corresponding to base checkpoint#    */
      170   /** Global Shared Temp Table Definitions
      171    **
      172    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      173    ** And a shared temp-table is logically the same as a db table so who really cares?
      174    **
      175    **/
      176   
      177   /* cache _File and _Index records so that we don't keep hitting the db to translate
      178    */
      179   
      180   define new global shared temp-table tt_tbl no-undo
      181     field xid      as integer                                             /* _File._File-Num              */
      182     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      183     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      184     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      185     field tblname  as character                                           /* _File._File-Name             */
      186     index xid-idx is unique primary xid.
      187   
      188   define new global shared temp-table tt_idx no-undo
      189     field xid      as integer                                             /* _Index._Idx-Num              */
      190     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      191     field idxname  as character                                           /* _Index._Idx-Name             */
      192     field idxnote  as character
      193     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      194     field tblnum   as integer                                             /* _File._File-Num              */
      195     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      196     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      197     field tblname  as character                                           /* _File._File-Name             */
      198     index xid-idx is unique primary xid.
      199   
      200   define new global shared temp-table tt_areaExtent no-undo
      201     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      202     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      203   
      204     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      205     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      206     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      207   
      208     index ae-idx is unique primary areaNum extNum.
      209   
      210   define new global shared temp-table tt_area no-undo
      211     field xid      as integer    format ">>>9"
      212     field SANum    as integer    format ">>>9"        label "#"
      213     field areaPool as character  format "x(2)"        label "BX"
      214   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      215     field SAName   as character  format "x(30)"       label "Area Name"
      216     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      217     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      218     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      219     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      220     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      221     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      222     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      223   
      224     field blkszkb as integer     format ">>9"         label "BSZ"
      225     field rpb     as integer     format ">>9"         label "RPB"
      226     field clstrsz as integer     format ">>9"         label "CSZ"
      227   
      228     field numTbls as integer     format ">>>>9"       label "#Tbls"
      229     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      230     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      231   
      232     field numExts as integer     format ">>>>9"       label "#Exts"
      233     field hasVar  as logical     format "Yes/No"      label "Var?"
      234   
      235     field xnote   as character   format "x"           label "*"
      236   
      237     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      238     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      239   
      240     index pctAlloc-idx is primary pctAlloc descending
      241     index pctLastX-idx pctLastX pctAlloc descending
      242     index allocGB-idx allocGB descending
      243     index totGB-idx totGB descending
      244     index xid-idx is unique xid
      245     index SANum-idx is unique SANum
      246     index SAName-idx is unique SAName
      247   .
      248   
      249   *** Encrypted Source ***
      250   *** Encrypted Source ***
      251   *** Encrypted Source ***
      252   *** Encrypted Source ***
      253   *** Encrypted Source ***
      254   *** Encrypted Source ***
      255   *** Encrypted Source ***
      256   *** Encrypted Source ***
      257   *** Encrypted Source ***
      258   *** Encrypted Source ***
      259   *** Encrypted Source ***
      260   *** Encrypted Source ***
      261   *** Encrypted Source ***
      262   *** Encrypted Source ***
      263   *** Encrypted Source ***
      264   *** Encrypted Source ***
      265   *** Encrypted Source ***
      266   *** Encrypted Source ***
      267   *** Encrypted Source ***
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319    
      320   
      321   /*******************************************************************************
      322    *******************************************************************************
      323    **                                                                           **
      324    **                                                                           **
      325    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      326    **  http://www.greenfieldtech.com                                            **
      327    **                                                                           **
      328    **  ProTop is free software; you can redistribute it and/or modify it        **
      329    **  under the terms of the GNU General Public License (GPL) as published     **
      330    **  by the Free Software Foundation; either version 2 of the License, or     **
      331    **  at your option) any later version.                                       **
      332    **                                                                           **
      333    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      334    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      335    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      336    **  for more details.                                                        **
      337    **                                                                           **
      338    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      339    **  of use and alternative licensing options for this software.              **
      340    **                                                                           **
      341    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      342    **                                                                           **
      343    **  See http://www.fsf.org for more information about the GPL.               **
      344    **                                                                           **
      345    **                                                                           **
      346    *******************************************************************************
      347    *******************************************************************************
      348    *
      349    * protoplib.i
      350    *
      351    * ProTop infrastructure library definitions
      352    *
      353    */
      354   
      355   function uDateTime returns integer () in super.
      356   function string2uDateTime returns integer( input p_text as character ) in super.
      357   function searchDir returns character ( input xDir as character ) in super.
      358   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      359   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      360   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      361   function myPID returns character () in super.
      362   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      363   
      364   /* end protoplib.i */
      365    
      366   
      367   /*******************************************************************************
      368    *******************************************************************************
      369    **                                                                           **
      370    **                                                                           **
      371    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      372    **  http://www.greenfieldtech.com                                            **
      373    **                                                                           **
      374    **  ProTop is free software; you can redistribute it and/or modify it        **
      375    **  under the terms of the GNU General Public License (GPL) as published     **
      376    **  by the Free Software Foundation; either version 2 of the License, or     **
      377    **  at your option) any later version.                                       **
      378    **                                                                           **
      379    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      380    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      381    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      382    **  for more details.                                                        **
      383    **                                                                           **
      384    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      385    **  of use and alternative licensing options for this software.              **
      386    **                                                                           **
      387    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      388    **                                                                           **
      389    **  See http://www.fsf.org for more information about the GPL.               **
      390    **                                                                           **
      391    **                                                                           **
      392    *******************************************************************************
      393    *******************************************************************************
      394    *
      395    * vstlib.i
      396    *
      397    * VST library definitions
      398    *
      399    */
      400   
      401   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      402   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      403   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      404   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      405   
      406   function connectFlags returns character ( input cnxId as integer ) in super.
      407   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      408   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      409   
      410   function isAIEnabled returns logical () in super.
      411   function isReplSource returns logical () in super.
      412   function isReplTarget returns logical () in super.
      413   function isBackupRunning returns logical () in super.
      414   function isWorkgroup returns logical () in super.
      415   
      416   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      417   
      418   /* end vstlib.i */
      419    
      420   
      421   function add2ds returns logical ( input h as handle ) in super.
      422   function getTempTableHandle returns handle ( input n as character ) in super.
      423   
      424   /* end protop.i */
      425    
      426   
      427   /* standard handlers
      428    *
      429    */
      430   
      431   subscribe to "oedb_rules"    anywhere run-procedure "chkRuleCfg".       /* load the rules related to this log type              */
      432   subscribe to "oedb_line"     anywhere run-procedure "parse_line".       /* parse the raw log line                               */
      433   
      434   /* handlers specific to the log type (procedures to be define below)
      435    *
      436    */
      437   
      438   subscribe to "oedb_Login"    anywhere run-procedure "oedb_Login".
      439   subscribe to "oedb_Logout"   anywhere run-procedure "oedb_Logout".
      440   subscribe to "oedb_Unknown"  anywhere run-procedure "oedb_Unknowmn".
      441   subscribe to "oedb_ignore"   anywhere run-procedure "oedb_Ignore".
      442   
      443   /* the rule set
      444    *
      445    */
      446   
      447   define temp-table tt_ruleCfg
      448     field ruleId     as character                                         /* oe message number                                    */
      449     field ruleAction as character                                         /* publish this!                                        */
      450     field nagFreq    as character                                         /* how often should we nag?                             */
      451     index ruleId-idx is primary unique ruleId
      452   .
      453   
      454   define variable ruleCfgFile as character no-undo                        /* name of the config file holding the rules            */
      455     initial "etc/log_oedb.cfg"
      456   .
      457   
      458   define variable ruleCfgDate as date      no-undo.                       /* last date that the rules changed                     */
      459   define variable ruleCfgTime as integer   no-undo.                       /* last date that the rules changed                     */
      460   
      461   define variable alertTempl as character no-undo
      462     initial "[&1]~n[server: &2]~n[&3]"
      463   .
      464   
      465   session:add-super-procedure( this-procedure ).
      466   
      467   return.
      468   
      469   
      470   /* does a string end with another string?
      471    *
      472    */
      473   
      474   function ends returns logical ( input s as character, input t as character ):
      475     return ( r-index( s, t ) = (( length( s ) - length( t )) + 1 )).
      476   end.
      477   
      478   
      479   /* is it ok to act on this?  or have we nagged enough?
      480    *
      481    */
      482   
      483   define temp-table tt_nagTracker
      484     field ruleId     as character
      485     field lastNag    as datetime
      486     index ruleId-idx is primary unique ruleId
      487   .
      488   
      489   function chkNag returns logical ( input rid as character, input n as integer ):
      490   
      491     if n <= 0  then return yes.                                           /* always report this event                             */
      492   
      493     find tt_nagTracker where tt_nagTracker.ruleId = rid no-error.
      494     if not available tt_nagTracker then
      495       do:
      496         create tt_nagTracker.
      497         assign
      498           tt_nagTracker.ruleId  = rid
      499           tt_nagTracker.lastNag = now
      500         .
      501         return yes.
      502       end.
      503   
      504     if interval( now, tt_nagTracker.lastNag, "seconds" ) < n then
      505       return no.
      506      else
      507       do:
      508         tt_nagTracker.lastNag = now.
      509         return yes.
      510       end.
      511   
      512   end.
      513   
      514   
      515   /* check the rule configuration, (re)load if necessary
      516    *
      517    * this will work with any rule configuration file that follows the standard pattern:
      518    *   - first column is ruleId, character, unique
      519    *   - as many additional fields as needed
      520    *   - # is for comments
      521    *   - will be reloaded on any change
      522    */
      523   
      524   procedure chkRuleCfg:
      525   
      526     define variable i as integer no-undo.
      527   
      528     file-info:file-name = ruleCfgFile.
      529   
      530     if ruleCfgDate <> file-info:file-mod-date or ruleCfgTime <> file-info:file-mod-time or file-info:full-pathname = ? then
      531       do:
      532   
      533         assign
      534           ruleCfgDate = file-info:file-mod-date
      535           ruleCfgTime = file-info:file-mod-time
      536         .
      537   
      538         empty temp-table tt_ruleCfg.
      539   
      540         if file-info:full-pathname = ? then
      541           do:
      542             message now "No config file:" ruleCfgFile.
      543             return.
      544           end.
      545   
      546         if dbgMode >= 3 then
      547           message now "Parsing config file:" ruleCfgFile.
      548   
      549         input from value( file-info:full-pathname ).
      550         load_cfg: repeat:
      551   
      552           do on error undo, leave load_cfg:
      553   
      554             create tt_ruleCfg.
      555             tt_ruleCfg.ruleId = "".
      556   
      557             import tt_ruleCfg no-error.
      558   
      559             if error-status:num-messages > 0 then
      560               do:
      561                 do i = 1 to error-status:num-messages:
      562                   message now error-status:get-message(i).
      563                 end.
      564                 delete tt_ruleCfg.
      565                 next load_cfg.
      566               end.
      567   
      568           end.
      569   
      570           if tt_ruleCfg.ruleId = "" or tt_ruleCfg.ruleId begins "#" then
      571             delete tt_ruleCfg.
      572   
      573         end.
      574         input close.
      575   
      576         for each tt_ruleCfg where tt_ruleCfg.ruleId = "" or tt_ruleCfg.ruleId begins "#":
      577           delete tt_ruleCfg.
      578         end.
      579   
      580   /*
      581    *    for each tt_ruleCfg where tt_ruleCfg.ruleAction = "ignore" or tt_ruleCfg.ruleAction = "":
      582    *      delete tt_ruleCfg.
      583    *    end.
      584    */
      585   
      586         if dbgMode >= 3 then
      587           do:
      588             message now "Config file," ruleCfgFile "contents:".
      589             for each tt_ruleCfg:
      590               display tt_ruleCfg with width 132.
      591             end.
      592           end.
      593   
      594       end.
      595   
      596     return.
      597   
      598   end.
      599   
      600   
      601   /* handle log messages - taking advantage of the known structure of those messages
      602    *
      603    */
      604   
      605   procedure parse_line:
      606   
      607     define input        parameter xLine   as character no-undo.
      608     define input        parameter lgType  as character no-undo.
      609     define input        parameter lgName  as character no-undo.
      610     define input-output parameter xStatus as character no-undo.
      611   
      612     define variable m as character no-undo.                               /* message #                                            */
      613     define variable w as character no-undo.                               /* message text                                         */
      614     define variable p as character no-undo.                               /* process-id                                           */
      615     define variable u as character no-undo.                               /* progress usr#                                        */
      616   
      617     if dbgMode >= 9 then message now lgType lgName xLine.
      618   
      619     /* valid oedb .lg file lines have a structure to them:
      620      *   - they start with a timestamp: 
      621      *   - position 30 is "]"
      622      *   - the message number is in a known position and format
      623      *   - the process-id is in a known position and format
      624      *   - the user number is in a "sort of" known position and format
      625      */
      626   
      627     if substring( xLine, 30, 1 ) <> "]" then                              /* verify that this is a line from an oe10+ .lg file    */
      628       return.
      629      else
      630       assign                                                              /* find the message number -- i.e. "(334)"              */
      631         w = entry( 2, xLine, "(" )
      632         m = entry( 1, w, ")" )                                            /* just the message number                              */
      633         w = trim( substring( xLine, index( xLine, "(" )))                 /* "(334)   Multi-user session end." etc.               */
      634         p = trim( substring( xLine, 34, 10 ))                             /* process-id                                           */
      635         u = trim( substring( xLine, 64, 15 ))                             /* i.e. "ABL   764: (45"                                */
      636         u = trim( entry( 1, u, ":" ))                                     /* i.e." ABL   764"                                     */
      637         u = trim( substring( u, r-index( u, " " )))                       /* usr#                                                 */
      638       no-error.
      639   
      640     if dbgMode >= 8 then message now p u m w.                             /* the payload...                                       */
      641   
      642     find tt_ruleCfg where tt_ruleCfg.ruleId = m no-error.
      643     if not available tt_ruleCfg then
      644       publish "oedb_Unknown" ( p, u, m, w, input-output xStatus ).
      645      else
      646       do:
      647         if tt_ruleCfg.ruleAction = "ignore" or tt_ruleCfg.ruleAction = "" then
      648           .
      649          else
      650           if chkNag( tt_ruleCfg.ruleId, integer( tt_ruleCfg.nagFreq )) = yes then
      651             publish "oedb_" + tt_ruleCfg.ruleAction ( tt_ruleCfg.ruleId, lgName, input-output xStatus, p, u, m, w ).
      652       end.
      653   
      654     return.
      655   
      656   end.
      657   
      658   
      659   /* a tt to hold login/logout info
      660    *
      661    * this is a silly example to show how to store context so that the logic behind log events can 
      662    * have knowledge of previous events in order to build more complex analysis
      663    *
      664    */
      665   
      666   define temp-table tt_login no-undo
      667     field usrNum as character
      668     field PID    as character
      669     field inTS   as datetime
      670     index usrNumPID-idx is primary unique usrNum PID
      671   .
      672   
      673   
      674   /* login event
      675    *
      676    * record the login time for this session
      677    *
      678    */
      679   
      680   procedure oedb_Login:
      681   
      682     define input        parameter rid     as character no-undo.
      683     define input        parameter lgName  as character no-undo.
      684     define input-output parameter xStatus as character no-undo.
      685     define input        parameter p       as character no-undo.
      686     define input        parameter u       as character no-undo.
      687     define input        parameter m       as character no-undo.
      688     define input        parameter w       as character no-undo.
      689   
      690     if dbgMode >= 9 then message now "login:" p u m w.                    /* the payload...                                       */
      691   
      692     /* usr# and PID are both reused -- sometimes rapidly so it is
      693      * not safe to rely on only one of them as a unique key, the
      694      * combination  is reasonably safe though
      695      */
      696   
      697     find tt_login where tt_login.usrNum = u and tt_login.PID = p no-error.
      698     if not available tt_login then create tt_login.
      699     assign
      700       tt_login.usrNum = u
      701       tt_login.PID    = p
      702       tt_login.inTS   = now
      703     .
      704   
      705     return.
      706   
      707   end.
      708   
      709   
      710   /* logout event
      711    *
      712    */
      713   
      714   procedure oedb_Logout:
      715   
      716     define input        parameter rid     as character no-undo.
      717     define input        parameter lgName  as character no-undo.
      718     define input-output parameter xStatus as character no-undo.
      719     define input        parameter p       as character no-undo.
      720     define input        parameter u       as character no-undo.
      721     define input        parameter m       as character no-undo.
      722     define input        parameter w       as character no-undo.
      723   
      724     define variable msgTxt as character no-undo.
      725   
      726     if dbgMode >= 9 then message now "logout:" p u m w.
      727   
      728     /* the login may have occurred before we started looking
      729      */
      730   
      731     find tt_login where tt_login.usrNum = u and tt_login.PID = p no-error.
      732     if not available tt_login then return.
      733   
      734     msgTxt = substitute(  "usr &1, pid &2, logged in for: &3", u, p, string( interval( now, tt_login.inTS, "seconds" ), "hh:mm:ss" )).
      735   
      736     msgTxt = msgTxt + "~n" + substitute( alertTempl, now, pt_server, lgName ).
      737   
      738     publish "alert" ( rid, msgTxt ).
      739   
      740     delete tt_login.
      741   
      742     return.
      743   
      744   end.
      745   
      746   
      747   /* unknown event
      748    *
      749    */
      750   
      751   procedure oedb_Unknown:
      752   
      753     define input        parameter rid     as character no-undo.
      754     define input        parameter lgName  as character no-undo.
      755     define input-output parameter xStatus as character no-undo.
      756     define input        parameter p       as character no-undo.
      757     define input        parameter u       as character no-undo.
      758     define input        parameter m       as character no-undo.
      759     define input        parameter w       as character no-undo.
      760   
      761     if dbgMode >= 9 then message now "unknown:" p u m w.
      762   
      763     /* what do we want to do with unknown events?
      764      */
      765   
      766     return.
      767   
      768   end.
      769   
      770   
      771   procedure oedb_Ignore:
      772   
      773     define input        parameter rid     as character no-undo.
      774     define input        parameter lgName  as character no-undo.
      775     define input-output parameter xStatus as character no-undo.
      776     define input        parameter p       as character no-undo.
      777     define input        parameter u       as character no-undo.
      778     define input        parameter m       as character no-undo.
      779     define input        parameter w       as character no-undo.
      780   
      781     if dbgMode >= 9 then message now "ignoring:" p u m w.
      782   
      783     message now "This shouldn't be happening!  'ignoring:'" p u m w.      /* "ignore" is supposed to be suppressed                */
      784   
      785     return.
      786   
      787   end.
