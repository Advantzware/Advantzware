        1   /* dbmaint.p
        2    *
        3    * manage etc/dblist.cfg
        4    *
        5    */
        6   
        7   
        8   /*******************************************************************************
        9    *******************************************************************************
       10    **                                                                           **
       11    **                                                                           **
       12    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       13    **  http://www.greenfieldtech.com                                            **
       14    **                                                                           **
       15    **  ProTop is free software; you can redistribute it and/or modify it        **
       16    **  under the terms of the GNU General Public License (GPL) as published     **
       17    **  by the Free Software Foundation; either version 2 of the License, or     **
       18    **  at your option) any later version.                                       **
       19    **                                                                           **
       20    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       21    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       22    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       23    **  for more details.                                                        **
       24    **                                                                           **
       25    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       26    **  of use and alternative licensing options for this software.              **
       27    **                                                                           **
       28    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       29    **                                                                           **
       30    **  See http://www.fsf.org for more information about the GPL.               **
       31    **                                                                           **
       32    **                                                                           **
       33    *******************************************************************************
       34    *******************************************************************************
       35    *
       36    * protop.i
       37    *
       38    * Header file for protop family of programs
       39    *
       40    *
       41    * Known Bugs & Issues:
       42    *
       43    *
       44    * To Do:
       45    *
       46    *
       47    * Author:
       48    *
       49    *      Tom Bascom, Greenfield Technologies
       50    *      http://www.greenfieldtech.com
       51    *      August 28, 2003
       52    *
       53    */
       54   
       55   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       56   &global-define  FASTLOCK        true
       57   &ELSE
       58   &global-define  FASTLOCK        false
       59   &ENDIF
       60   
       61   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       62   &global-define  OE11            "yes"
       63   &global-define  xDEBUGTT        false
       64   &ENDIF
       65   
       66   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       67   &global-define  NOSERIALIZE     serialize-hidden
       68   &ENDIF
       69   
       70   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       71   &global-define  BIGINT          int64
       72   &ELSE
       73   &global-define  BIGINT          decimal
       74   &ENDIF
       75   
       76   
       77   /* lib/v9.i
       78    *
       79    */
       80   
       81   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       82   &global-define  CPYLOB  "no"
       83   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       84   &global-define  LNGCR   character
       85   &global-define  DTZ     integer
       86   &global-define  BIGINT  decimal
       87   &ELSE
       88   &global-define  OE10    "yes"
       89   &global-define  NOW     now
       90   &global-define  LNGCR   longchar
       91   &global-define  DTZ     datetime-tz
       92   &global-define  BIGINT  int64
       93   &ENDIF
       94    
       95   
       96   /* use extended _connect fields: -client, -cache*
       97    */
       98   
       99   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      100   &global-define  CONNECTX        "yes"
      101   &ELSE
      102   &global-define  CONNECTX        "no"
      103   &ENDIF
      104   
      105   define stream inStrm.
      106   
      107   define new global shared variable dbgMode as integer no-undo initial 1.
      108   
      109   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      110    *
      111    * someday everyone will have OO and I will replace these with a gsv class
      112    * or something of that ilk
      113    *
      114    */
      115   
      116   define new global shared variable pt_shortname   as character no-undo.
      117   define new global shared variable pt_uniqName    as character no-undo.
      118   define new global shared variable pt_server      as character no-undo.
      119   define new global shared variable pt_resrcType   as character no-undo.
      120   
      121   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      122   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      123   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      124   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      125   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      126   
      127   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      128   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      129   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      130   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      131   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      132   define new global shared variable pt_ioFileName  as character no-undo.
      133   define new global shared variable pt_dfCmd       as character no-undo.
      134   
      135   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      136   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      137   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      138   
      139   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      140   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      141   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      142   
      143   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      144   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      145   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      146   
      147   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      148   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      149   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      150   
      151   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      152   
      153   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      154   
      155   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      156   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      157   
      158   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      159    * 
      160    */
      161   
      162   define new global shared variable stime as integer no-undo.                     /* start time                           */
      163   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      164   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      165   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      166   
      167   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      168   
      169                                                                                   /* corresponding to base checkpoint#    */
      170   /** Global Shared Temp Table Definitions
      171    **
      172    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      173    ** And a shared temp-table is logically the same as a db table so who really cares?
      174    **
      175    **/
      176   
      177   /* cache _File and _Index records so that we don't keep hitting the db to translate
      178    */
      179   
      180   define new global shared temp-table tt_tbl no-undo
      181     field xid      as integer                                             /* _File._File-Num              */
      182     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      183     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      184     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      185     field tblname  as character                                           /* _File._File-Name             */
      186     index xid-idx is unique primary xid.
      187   
      188   define new global shared temp-table tt_idx no-undo
      189     field xid      as integer                                             /* _Index._Idx-Num              */
      190     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      191     field idxname  as character                                           /* _Index._Idx-Name             */
      192     field idxnote  as character
      193     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      194     field tblnum   as integer                                             /* _File._File-Num              */
      195     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      196     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      197     field tblname  as character                                           /* _File._File-Name             */
      198     index xid-idx is unique primary xid.
      199   
      200   define new global shared temp-table tt_areaExtent no-undo
      201     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      202     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      203   
      204     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      205     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      206     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      207   
      208     index ae-idx is unique primary areaNum extNum.
      209   
      210   define new global shared temp-table tt_area no-undo
      211     field xid      as integer    format ">>>9"
      212     field SANum    as integer    format ">>>9"        label "#"
      213     field areaPool as character  format "x(2)"        label "BX"
      214   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      215     field SAName   as character  format "x(30)"       label "Area Name"
      216     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      217     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      218     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      219     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      220     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      221     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      222     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      223   
      224     field blkszkb as integer     format ">>9"         label "BSZ"
      225     field rpb     as integer     format ">>9"         label "RPB"
      226     field clstrsz as integer     format ">>9"         label "CSZ"
      227   
      228     field numTbls as integer     format ">>>>9"       label "#Tbls"
      229     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      230     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      231   
      232     field numExts as integer     format ">>>>9"       label "#Exts"
      233     field hasVar  as logical     format "Yes/No"      label "Var?"
      234   
      235     field xnote   as character   format "x"           label "*"
      236   
      237     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      238     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      239   
      240     index pctAlloc-idx is primary pctAlloc descending
      241     index pctLastX-idx pctLastX pctAlloc descending
      242     index allocGB-idx allocGB descending
      243     index totGB-idx totGB descending
      244     index xid-idx is unique xid
      245     index SANum-idx is unique SANum
      246     index SAName-idx is unique SAName
      247   .
      248   
      249   *** Encrypted Source ***
      250   *** Encrypted Source ***
      251   *** Encrypted Source ***
      252   *** Encrypted Source ***
      253   *** Encrypted Source ***
      254   *** Encrypted Source ***
      255   *** Encrypted Source ***
      256   *** Encrypted Source ***
      257   *** Encrypted Source ***
      258   *** Encrypted Source ***
      259   *** Encrypted Source ***
      260   *** Encrypted Source ***
      261   *** Encrypted Source ***
      262   *** Encrypted Source ***
      263   *** Encrypted Source ***
      264   *** Encrypted Source ***
      265   *** Encrypted Source ***
      266   *** Encrypted Source ***
      267   *** Encrypted Source ***
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319    
      320   
      321   /*******************************************************************************
      322    *******************************************************************************
      323    **                                                                           **
      324    **                                                                           **
      325    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      326    **  http://www.greenfieldtech.com                                            **
      327    **                                                                           **
      328    **  ProTop is free software; you can redistribute it and/or modify it        **
      329    **  under the terms of the GNU General Public License (GPL) as published     **
      330    **  by the Free Software Foundation; either version 2 of the License, or     **
      331    **  at your option) any later version.                                       **
      332    **                                                                           **
      333    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      334    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      335    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      336    **  for more details.                                                        **
      337    **                                                                           **
      338    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      339    **  of use and alternative licensing options for this software.              **
      340    **                                                                           **
      341    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      342    **                                                                           **
      343    **  See http://www.fsf.org for more information about the GPL.               **
      344    **                                                                           **
      345    **                                                                           **
      346    *******************************************************************************
      347    *******************************************************************************
      348    *
      349    * protoplib.i
      350    *
      351    * ProTop infrastructure library definitions
      352    *
      353    */
      354   
      355   function uDateTime returns integer () in super.
      356   function string2uDateTime returns integer( input p_text as character ) in super.
      357   function searchDir returns character ( input xDir as character ) in super.
      358   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      359   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      360   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      361   function myPID returns character () in super.
      362   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      363   
      364   /* end protoplib.i */
      365    
      366   
      367   /*******************************************************************************
      368    *******************************************************************************
      369    **                                                                           **
      370    **                                                                           **
      371    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      372    **  http://www.greenfieldtech.com                                            **
      373    **                                                                           **
      374    **  ProTop is free software; you can redistribute it and/or modify it        **
      375    **  under the terms of the GNU General Public License (GPL) as published     **
      376    **  by the Free Software Foundation; either version 2 of the License, or     **
      377    **  at your option) any later version.                                       **
      378    **                                                                           **
      379    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      380    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      381    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      382    **  for more details.                                                        **
      383    **                                                                           **
      384    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      385    **  of use and alternative licensing options for this software.              **
      386    **                                                                           **
      387    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      388    **                                                                           **
      389    **  See http://www.fsf.org for more information about the GPL.               **
      390    **                                                                           **
      391    **                                                                           **
      392    *******************************************************************************
      393    *******************************************************************************
      394    *
      395    * vstlib.i
      396    *
      397    * VST library definitions
      398    *
      399    */
      400   
      401   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      402   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      403   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      404   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      405   
      406   function connectFlags returns character ( input cnxId as integer ) in super.
      407   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      408   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      409   
      410   function isAIEnabled returns logical () in super.
      411   function isReplSource returns logical () in super.
      412   function isReplTarget returns logical () in super.
      413   function isBackupRunning returns logical () in super.
      414   function isWorkgroup returns logical () in super.
      415   
      416   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      417   
      418   /* end vstlib.i */
      419    
      420   
      421   function add2ds returns logical ( input h as handle ) in super.
      422   function getTempTableHandle returns handle ( input n as character ) in super.
      423   
      424   /* end protop.i */
      425    
      426   
      427   define variable ptVerStr as character no-undo initial "
      428   3.14
      429    ".
      430   
      431   ptVerStr = trim( entry( 1, ptVerStr, "~n" )).
      432   
      433   define new global shared variable dbgMode as integer   no-undo initial 3.
      434   define new global shared variable custId  as character no-undo.
      435   
      436   define variable monint as decimal no-undo initial 3.
      437   
      438   define variable mergeStat as logical no-undo.
      439   
      440   run lib/chkscreen.p.
      441   
      442   run lib/windows.p persistent.
      443   
      444   /* {lib/windows.i} */
      445   *** Encrypted Source ***
      446   *** Encrypted Source ***
      447   *** Encrypted Source ***
      448   *** Encrypted Source ***
      449   *** Encrypted Source ***
      450   *** Encrypted Source ***
      451   *** Encrypted Source ***
      452   *** Encrypted Source ***
      453   *** Encrypted Source ***
      454   *** Encrypted Source ***
      455   *** Encrypted Source ***
      456   *** Encrypted Source ***
      457   *** Encrypted Source ***
      458   *** Encrypted Source ***
      459   *** Encrypted Source ***
      460   *** Encrypted Source ***
      461   *** Encrypted Source ***
      462   *** Encrypted Source ***
      463   *** Encrypted Source ***
      464   *** Encrypted Source ***
      465   *** Encrypted Source ***
      466   *** Encrypted Source ***
      467   *** Encrypted Source ***
      468   *** Encrypted Source ***
      469   *** Encrypted Source ***
      470   *** Encrypted Source ***
      471   *** Encrypted Source ***
      472   *** Encrypted Source ***
      473   *** Encrypted Source ***
      474   *** Encrypted Source ***
      475   *** Encrypted Source ***
      476   *** Encrypted Source ***
      477   *** Encrypted Source ***
      478   *** Encrypted Source ***
      479   *** Encrypted Source ***
      480   *** Encrypted Source ***
      481   *** Encrypted Source ***
      482   *** Encrypted Source ***
      483   *** Encrypted Source ***
      484   *** Encrypted Source ***
      485   *** Encrypted Source ***
      486   *** Encrypted Source ***
      487   *** Encrypted Source ***
      488   *** Encrypted Source ***
      489   *** Encrypted Source ***
      490   *** Encrypted Source ***
      491   *** Encrypted Source ***
      492   *** Encrypted Source ***
      493   *** Encrypted Source ***
      494   *** Encrypted Source ***
      495   *** Encrypted Source ***
      496   *** Encrypted Source ***
      497   *** Encrypted Source ***
      498   *** Encrypted Source ***
      499   *** Encrypted Source ***
      500   *** Encrypted Source ***
      501   *** Encrypted Source ***
      502   *** Encrypted Source ***
      503   *** Encrypted Source ***
      504   *** Encrypted Source ***
      505   *** Encrypted Source ***
      506   *** Encrypted Source ***
      507   *** Encrypted Source ***
      508   *** Encrypted Source ***
      509   *** Encrypted Source ***
      510   *** Encrypted Source ***
      511   *** Encrypted Source ***
      512   *** Encrypted Source ***
      513   *** Encrypted Source ***
      514   *** Encrypted Source ***
      515   *** Encrypted Source ***
      516   *** Encrypted Source ***
      517   *** Encrypted Source ***
      518   *** Encrypted Source ***
      519   *** Encrypted Source ***
      520   *** Encrypted Source ***
      521   *** Encrypted Source ***
      522   *** Encrypted Source ***
      523   *** Encrypted Source ***
      524   *** Encrypted Source ***
      525   *** Encrypted Source ***
      526   *** Encrypted Source ***
      527   *** Encrypted Source ***
      528   *** Encrypted Source ***
      529   *** Encrypted Source ***
      530   *** Encrypted Source ***
      531   *** Encrypted Source ***
      532   *** Encrypted Source ***
      533   *** Encrypted Source ***
      534   *** Encrypted Source ***
      535   *** Encrypted Source ***
      536   *** Encrypted Source ***
      537   *** Encrypted Source ***
      538   *** Encrypted Source ***
      539   *** Encrypted Source ***
      540   *** Encrypted Source ***
      541   *** Encrypted Source ***
      542   *** Encrypted Source ***
      543   *** Encrypted Source ***
      544   *** Encrypted Source ***
      545   *** Encrypted Source ***
      546   *** Encrypted Source ***
      547   *** Encrypted Source ***
      548   *** Encrypted Source ***
      549   *** Encrypted Source ***
      550   *** Encrypted Source ***
      551   *** Encrypted Source ***
      552   *** Encrypted Source ***
      553   *** Encrypted Source ***
      554   *** Encrypted Source ***
      555   *** Encrypted Source ***
      556   *** Encrypted Source ***
      557   *** Encrypted Source ***
      558   *** Encrypted Source ***
      559   *** Encrypted Source ***
      560   *** Encrypted Source ***
      561   *** Encrypted Source ***
      562   *** Encrypted Source ***
      563   *** Encrypted Source ***
      564   *** Encrypted Source ***
      565   *** Encrypted Source ***
      566   *** Encrypted Source ***
      567   *** Encrypted Source ***
      568   *** Encrypted Source ***
      569   *** Encrypted Source ***
      570   *** Encrypted Source ***
      571   *** Encrypted Source ***
      572   *** Encrypted Source ***
      573   *** Encrypted Source ***
      574   *** Encrypted Source ***
      575   *** Encrypted Source ***
      576   *** Encrypted Source ***
      577   *** Encrypted Source ***
      578   *** Encrypted Source ***
      579   *** Encrypted Source ***
      580   *** Encrypted Source ***
      581   *** Encrypted Source ***
      582   *** Encrypted Source ***
      583   *** Encrypted Source ***
      584   *** Encrypted Source ***
      585   *** Encrypted Source ***
      586   *** Encrypted Source ***
      587   *** Encrypted Source ***
      588   *** Encrypted Source ***
      589   *** Encrypted Source ***
      590   *** Encrypted Source ***
      591   *** Encrypted Source ***
      592   *** Encrypted Source ***
      593   *** Encrypted Source ***
      594   *** Encrypted Source ***
      595   *** Encrypted Source ***
      596   *** Encrypted Source ***
      597   *** Encrypted Source ***
      598   *** Encrypted Source ***
      599   *** Encrypted Source ***
      600   *** Encrypted Source ***
      601   *** Encrypted Source ***
      602   *** Encrypted Source ***
      603   *** Encrypted Source ***
      604   *** Encrypted Source ***
      605   *** Encrypted Source ***
      606   *** Encrypted Source ***
      607   *** Encrypted Source ***
      608   *** Encrypted Source ***
      609   *** Encrypted Source ***
      610   *** Encrypted Source ***
      611   *** Encrypted Source ***
      612   *** Encrypted Source ***
      613   *** Encrypted Source ***
      614   *** Encrypted Source ***
      615   *** Encrypted Source ***
      616   *** Encrypted Source ***
      617   *** Encrypted Source ***
      618   *** Encrypted Source ***
      619   *** Encrypted Source ***
      620   *** Encrypted Source ***
      621   *** Encrypted Source ***
      622   *** Encrypted Source ***
      623   *** Encrypted Source ***
      624   *** Encrypted Source ***
      625   *** Encrypted Source ***
      626   *** Encrypted Source ***
      627   *** Encrypted Source ***
      628   *** Encrypted Source ***
      629   *** Encrypted Source ***
      630   *** Encrypted Source ***
      631   *** Encrypted Source ***
      632   *** Encrypted Source ***
      633   *** Encrypted Source ***
      634   *** Encrypted Source ***
      635   *** Encrypted Source ***
      636   *** Encrypted Source ***
      637   *** Encrypted Source ***
      638   *** Encrypted Source ***
      639   *** Encrypted Source ***
      640   *** Encrypted Source ***
      641   *** Encrypted Source ***
      642   *** Encrypted Source ***
      643   *** Encrypted Source ***
      644   *** Encrypted Source ***
      645   *** Encrypted Source ***
      646   *** Encrypted Source ***
      647   *** Encrypted Source ***
      648   *** Encrypted Source ***
      649   *** Encrypted Source ***
      650   *** Encrypted Source ***
      651   *** Encrypted Source ***
      652   *** Encrypted Source ***
      653   *** Encrypted Source ***
      654   *** Encrypted Source ***
      655   *** Encrypted Source ***
      656   *** Encrypted Source ***
      657   *** Encrypted Source ***
      658   *** Encrypted Source ***
      659   *** Encrypted Source ***
      660   *** Encrypted Source ***
      661   *** Encrypted Source ***
      662   *** Encrypted Source ***
      663   *** Encrypted Source ***
      664   *** Encrypted Source ***
      665   *** Encrypted Source ***
      666   *** Encrypted Source ***
      667   *** Encrypted Source ***
      668   *** Encrypted Source ***
      669   *** Encrypted Source ***
      670   *** Encrypted Source ***
      671   *** Encrypted Source ***
      672   *** Encrypted Source ***
      673   *** Encrypted Source ***
      674   *** Encrypted Source ***
      675   *** Encrypted Source ***
      676   *** Encrypted Source ***
      677   *** Encrypted Source ***
      678   *** Encrypted Source ***
      679   *** Encrypted Source ***
      680   *** Encrypted Source ***
      681   *** Encrypted Source ***
      682   *** Encrypted Source ***
      683   *** Encrypted Source ***
      684   *** Encrypted Source ***
      685   *** Encrypted Source ***
      686   *** Encrypted Source ***
      687   *** Encrypted Source ***
      688   *** Encrypted Source ***
      689   *** Encrypted Source ***
      690   *** Encrypted Source ***
      691   *** Encrypted Source ***
      692   *** Encrypted Source ***
      693   *** Encrypted Source ***
      694   *** Encrypted Source ***
      695   *** Encrypted Source ***
      696   *** Encrypted Source ***
      697   *** Encrypted Source ***
      698   *** Encrypted Source ***
      699   *** Encrypted Source ***
      700   *** Encrypted Source ***
      701   *** Encrypted Source ***
      702   *** Encrypted Source ***
      703   *** Encrypted Source ***
      704   *** Encrypted Source ***
      705   *** Encrypted Source ***
      706   *** Encrypted Source ***
      707   *** Encrypted Source ***
      708   *** Encrypted Source ***
      709   *** Encrypted Source ***
      710   *** Encrypted Source ***
      711   *** Encrypted Source ***
      712   *** Encrypted Source ***
      713   *** Encrypted Source ***
      714   *** Encrypted Source ***
      715   *** Encrypted Source ***
      716   *** Encrypted Source ***
      717   *** Encrypted Source ***
      718   *** Encrypted Source ***
      719   *** Encrypted Source ***
      720   *** Encrypted Source ***
      721   *** Encrypted Source ***
      722   *** Encrypted Source ***
      723   *** Encrypted Source ***
      724   *** Encrypted Source ***
      725   *** Encrypted Source ***
      726   *** Encrypted Source ***
      727   *** Encrypted Source ***
      728   *** Encrypted Source ***
      729   *** Encrypted Source ***
      730   *** Encrypted Source ***
      731   *** Encrypted Source ***
      732   *** Encrypted Source ***
      733   *** Encrypted Source ***
      734   *** Encrypted Source ***
      735   *** Encrypted Source ***
      736   *** Encrypted Source ***
      737   *** Encrypted Source ***
      738   *** Encrypted Source ***
      739   *** Encrypted Source ***
      740   *** Encrypted Source ***
      741   *** Encrypted Source ***
      742   *** Encrypted Source ***
      743   *** Encrypted Source ***
      744   *** Encrypted Source ***
      745   *** Encrypted Source ***
      746   *** Encrypted Source ***
      747   *** Encrypted Source ***
      748   *** Encrypted Source ***
      749   *** Encrypted Source ***
      750   *** Encrypted Source ***
      751   *** Encrypted Source ***
      752   *** Encrypted Source ***
      753   *** Encrypted Source ***
      754   *** Encrypted Source ***
      755   *** Encrypted Source ***
      756   *** Encrypted Source ***
      757   *** Encrypted Source ***
      758   *** Encrypted Source ***
      759   *** Encrypted Source ***
      760   *** Encrypted Source ***
      761   *** Encrypted Source ***
      762   *** Encrypted Source ***
      763   *** Encrypted Source ***
      764   *** Encrypted Source ***
      765   *** Encrypted Source ***
      766   *** Encrypted Source ***
      767   *** Encrypted Source ***
      768   *** Encrypted Source ***
      769   *** Encrypted Source ***
      770   *** Encrypted Source ***
      771   *** Encrypted Source ***
      772   *** Encrypted Source ***
      773   *** Encrypted Source ***
      774   *** Encrypted Source ***
      775   *** Encrypted Source ***
      776   *** Encrypted Source ***
      777   *** Encrypted Source ***
      778   *** Encrypted Source ***
      779   *** Encrypted Source ***
      780   *** Encrypted Source ***
      781   *** Encrypted Source ***
      782   *** Encrypted Source ***
      783   *** Encrypted Source ***
      784   *** Encrypted Source ***
      785   *** Encrypted Source ***
      786   *** Encrypted Source ***
      787   *** Encrypted Source ***
      788   *** Encrypted Source ***
      789   *** Encrypted Source ***
      790   *** Encrypted Source ***
      791   *** Encrypted Source ***
      792   *** Encrypted Source ***
      793   *** Encrypted Source ***
      794   *** Encrypted Source ***
      795   *** Encrypted Source ***
      796   *** Encrypted Source ***
      797   *** Encrypted Source ***
      798   *** Encrypted Source ***
      799   *** Encrypted Source ***
      800   *** Encrypted Source ***
      801   *** Encrypted Source ***
      802   *** Encrypted Source ***
      803   *** Encrypted Source ***
      804   *** Encrypted Source ***
      805   *** Encrypted Source ***
      806   *** Encrypted Source ***
      807   *** Encrypted Source ***
      808   *** Encrypted Source ***
      809   *** Encrypted Source ***
      810   *** Encrypted Source ***
      811   *** Encrypted Source ***
      812   *** Encrypted Source ***
      813   *** Encrypted Source ***
      814   *** Encrypted Source ***
      815   *** Encrypted Source ***
      816   *** Encrypted Source ***
      817   *** Encrypted Source ***
      818   *** Encrypted Source ***
      819   *** Encrypted Source ***
      820   *** Encrypted Source ***
      821   *** Encrypted Source ***
      822   *** Encrypted Source ***
      823   *** Encrypted Source ***
      824   *** Encrypted Source ***
      825   *** Encrypted Source ***
      826   *** Encrypted Source ***
      827   *** Encrypted Source ***
      828   *** Encrypted Source ***
      829   *** Encrypted Source ***
      830   *** Encrypted Source ***
      831   *** Encrypted Source ***
      832   *** Encrypted Source ***
      833   *** Encrypted Source ***
      834   *** Encrypted Source ***
      835   *** Encrypted Source ***
      836   *** Encrypted Source ***
      837   *** Encrypted Source ***
      838   *** Encrypted Source ***
      839   *** Encrypted Source ***
      840   *** Encrypted Source ***
      841   *** Encrypted Source ***
      842   *** Encrypted Source ***
      843   *** Encrypted Source ***
      844   *** Encrypted Source ***
      845   *** Encrypted Source ***
      846   *** Encrypted Source ***
      847   *** Encrypted Source ***
      848   *** Encrypted Source ***
      849   *** Encrypted Source ***
      850   *** Encrypted Source ***
      851   *** Encrypted Source ***
      852   *** Encrypted Source ***
      853   *** Encrypted Source ***
      854   *** Encrypted Source ***
      855   *** Encrypted Source ***
      856   *** Encrypted Source ***
      857   *** Encrypted Source ***
      858   *** Encrypted Source ***
      859   *** Encrypted Source ***
      860   *** Encrypted Source ***
      861   *** Encrypted Source ***
      862   *** Encrypted Source ***
      863   *** Encrypted Source ***
      864   *** Encrypted Source ***
      865   *** Encrypted Source ***
      866   *** Encrypted Source ***
      867   *** Encrypted Source ***
      868   *** Encrypted Source ***
      869   *** Encrypted Source ***
      870   *** Encrypted Source ***
      871   *** Encrypted Source ***
      872   *** Encrypted Source ***
      873   *** Encrypted Source ***
      874   *** Encrypted Source ***
      875   *** Encrypted Source ***
      876   *** Encrypted Source ***
      877   *** Encrypted Source ***
      878   *** Encrypted Source ***
      879   *** Encrypted Source ***
      880   *** Encrypted Source ***
      881   *** Encrypted Source ***
      882   *** Encrypted Source ***
      883   *** Encrypted Source ***
      884   *** Encrypted Source ***
      885   *** Encrypted Source ***
      886   *** Encrypted Source ***
      887   *** Encrypted Source ***
      888   *** Encrypted Source ***
      889   *** Encrypted Source ***
      890   *** Encrypted Source ***
      891   *** Encrypted Source ***
      892   *** Encrypted Source ***
      893   *** Encrypted Source ***
      894   *** Encrypted Source ***
      895   *** Encrypted Source ***
      896   *** Encrypted Source ***
      897   *** Encrypted Source ***
      898   *** Encrypted Source ***
      899   *** Encrypted Source ***
      900   *** Encrypted Source ***
      901   *** Encrypted Source ***
      902   *** Encrypted Source ***
      903   *** Encrypted Source ***
      904   *** Encrypted Source ***
      905   *** Encrypted Source ***
      906   *** Encrypted Source ***
      907   *** Encrypted Source ***
      908   *** Encrypted Source ***
      909   *** Encrypted Source ***
      910   *** Encrypted Source ***
      911   *** Encrypted Source ***
      912   *** Encrypted Source ***
      913   *** Encrypted Source ***
      914   *** Encrypted Source ***
      915   *** Encrypted Source ***
      916   *** Encrypted Source ***
      917   *** Encrypted Source ***
      918   *** Encrypted Source ***
      919   *** Encrypted Source ***
      920   *** Encrypted Source ***
      921   *** Encrypted Source ***
      922   *** Encrypted Source ***
      923   *** Encrypted Source ***
      924   *** Encrypted Source ***
      925   *** Encrypted Source ***
      926   *** Encrypted Source ***
      927   *** Encrypted Source ***
      928   *** Encrypted Source ***
      929   *** Encrypted Source ***
      930   *** Encrypted Source ***
      931   *** Encrypted Source ***
      932   *** Encrypted Source ***
      933   *** Encrypted Source ***
      934   *** Encrypted Source ***
      935   *** Encrypted Source ***
      936   *** Encrypted Source ***
      937   *** Encrypted Source ***
      938   *** Encrypted Source ***
      939   *** Encrypted Source ***
      940   *** Encrypted Source ***
      941   *** Encrypted Source ***
      942   *** Encrypted Source ***
      943   *** Encrypted Source ***
      944   *** Encrypted Source ***
      945   *** Encrypted Source ***
      946   *** Encrypted Source ***
      947   *** Encrypted Source ***
      948   *** Encrypted Source ***
      949   *** Encrypted Source ***
      950   *** Encrypted Source ***
      951   *** Encrypted Source ***
      952   *** Encrypted Source ***
      953   *** Encrypted Source ***
      954   *** Encrypted Source ***
      955   *** Encrypted Source ***
      956   *** Encrypted Source ***
      957    
      958   
      959   define stream inStrm.
      960   
      961   /* setup
      962    */
      963   
      964   pause 0 before-hide.
      965   
      966   if "TTY" <> "tty" then                                     /* look reasonable if someone fires up prowin32         */
      967     assign
      968       current-window:hidden       = true
      969       session:v6display           = true
      970       current-window:height-chars = 48
      971       current-window:width-chars  = 132
      972       current-window:bgcolor      = 15
      973       current-window:hidden       = false
      974       current-window:visible      = true
      975     .
      976   
      977   run lib/protop-cfg.p persistent.                                        /* initialize protop environment                        */
      978   
      979   file-info:file-name = pt_tmpdir.
      980   if file-info:full-pathname = ? then os-command silent value( "mkdir " + pt_tmpdir ).
      981   
      982   file-info:file-name = pt_logdir.
      983   if file-info:full-pathname = ? then os-command silent value( "mkdir " + pt_logdir ).
      984   
      985   file-info:file-name = "etc/custid.cfg".
      986   if file-info:full-pathname = ? then
      987     custId = "".
      988    else
      989     do on error undo, leave
      990        on endkey undo, leave:
      991       input stream inStrm from value( file-info:full-pathname ).
      992       import stream inStrm unformatted custId.
      993       input stream inStrm close.
      994     end.
      995   
      996   run ssg/sausage02.p persistent.
      997   run ssg/sausage06.p persistent.
      998   
      999   define variable changeStatus as character no-undo.
     1000   
     1001   define variable numFound as integer no-undo.
     1002   
     1003   define variable c as handle no-undo.
     1004   define variable f as handle no-undo.
     1005   define variable x as handle no-undo.
     1006   define variable z as handle no-undo.
     1007   
     1008   define variable r as rowid no-undo.
     1009   
     1010   define query  q for tt_dbList.
     1011   
     1012   define browse b
     1013     query q
     1014     display                       /* over-ride width for updates in the upd_tt_dblist frame       */
     1015       tt_dbList.friendlyName      /* x(20) */
     1016       tt_dbList.dbPath            /* x(60) */
     1017       tt_dbList.monitorDB         /* x(4)  */
     1018       tt_dbList.resrcType         /* x(10) */
     1019       tt_dbList.serverName        /* x(20) */
     1020   /*
     1021       tt_dbList.statusInfo format "x(30)"
     1022    */
     1023      with
     1024       /* no-box */
     1025       /* width 132 */
     1026       /* 20 down */
     1027       size 132 by 20
     1028       no-scrollbar-vertical
     1029   .
     1030   
     1031   form
     1032     " <insert>, ^T = insert new record." skip
     1033     " <delete>, ^D = delete record." skip
     1034     " <enter>      = update a record." skip
     1035     skip(1)
     1036     " m = toggle 'Mon?' flag." skip
     1037     skip(1)
     1038     " s = save changes." skip
     1039     " x = save and exit." skip
     1040     " q = quit without saving." skip
     1041    with
     1042     frame info
     1043     row 1
     1044     column 1
     1045     width 132
     1046   .
     1047   
     1048   form b with frame dbList column 1 no-box width 132.
     1049   
     1050   form changeStatus with frame chgStatus row 1 column 1 overlay top-only no-box no-labels.
     1051   
     1052   form
     1053     tt_dbList.friendlyName      format "x(128)" view-as fill-in size 20 by 1
     1054     tt_dbList.dbPath            format "x(128)" view-as fill-in size 60 by 1
     1055     tt_dbList.monitorDB
     1056     tt_dbList.resrcType at 88     /* "no-labels" messes up the alignment because "Mon?" (above) is wider than "yes" */
     1057     tt_dbList.serverName        format "x(128)" view-as fill-in size 20 by 1
     1058    with
     1059     frame upd_tt_dbList
     1060     no-box
     1061     no-labels
     1062     overlay
     1063     column 4
     1064     width 128 /* must fit inside container with space... */
     1065   .
     1066   
     1067   c = frame chgStatus:handle.
     1068   f = frame upd_tt_dbList:handle.
     1069   x = frame dbList:handle.
     1070   
     1071   z = browse b:handle.
     1072   
     1073   function showChanges returns logical:
     1074   
     1075     assign
     1076       c:row     = x:row + x:height
     1077       c:column  = x:width - 9
     1078       c:visible = ( changeStatus > "" )
     1079       c:hidden  = not c:visible
     1080     .
     1081   
     1082     display changeStatus with frame chgStatus.
     1083   
     1084     return true.
     1085   
     1086   end.
     1087   
     1088   procedure new_dbList:
     1089   
     1090     define buffer tt_dbList for tt_dbList.
     1091   
     1092     create tt_dbList.
     1093     assign
     1094       changeStatus          = "unsaved"
     1095       tt_dbList.monitorStat = "new"
     1096       tt_dbList.serverName  = pt_server
     1097     .
     1098   
     1099     r = rowid( tt_dbList ).
     1100   
     1101   /* query q:handle:reposition-to-rowid( r ). */
     1102   
     1103     return.
     1104   
     1105   end.
     1106   
     1107   on "q", "ctrl-e" of b in frame dbList do:
     1108   
     1109     define variable ok as logical no-undo.
     1110   
     1111     ok = no.
     1112   
     1113     if changeStatus <> "unsaved" then
     1114       ok = yes.
     1115      else
     1116       message
     1117           skip
     1118           "There are unsaved changes." skip
     1119           "Do you really want to quit without saving?"
     1120           skip(1)
     1121         view-as alert-box question buttons yes-no-cancel
     1122         title " Quit Without Saving? "
     1123         update ok
     1124       .
     1125   
     1126     if ok then apply "close" to this-procedure.
     1127   
     1128     return no-apply.
     1129   
     1130   end.
     1131   
     1132   on "leave" of frame upd_tt_dbList do:                   /* this prevents the tab order from overflowing to the browse widget    */
     1133   
     1134     file-info:file-name = tt_dbList.dbPath + ".db".
     1135     if file-info:full-pathname = ? then
     1136       assign
     1137         tt_dbList.monitorPID = "1"
     1138         tt_dbList.statusInfo = "invalid dbPath"
     1139       .
     1140      else
     1141       tt_dbList.monitorPID = "2".
     1142   
     1143     apply "entry" to b in frame dbList.
     1144   
     1145     return no-apply.
     1146   
     1147   end.
     1148   
     1149   on "go" of frame upd_tt_dbList do:
     1150   
     1151     if ( tt_dbList.friendlyName <> input tt_dbList.friendlyName ) or
     1152        ( tt_dbList.dbPath       <> input tt_dbList.dbPath ) or
     1153        ( tt_dbList.resrcType    <> input tt_dbList.resrcType ) or
     1154        ( tt_dbList.monitorDB    <> input tt_dbList.monitorDB ) or
     1155        ( tt_dbList.serverName   <> input tt_dbList.serverName ) then
     1156       assign
     1157         changeStatus = "unsaved"
     1158         tt_dbList.monitorStat = ( if tt_dbList.monitorStat begins "new" then "new" else "changed" )
     1159       .
     1160   
     1161     if tt_dbList.monitorPID = "1" then
     1162       tt_dbList.statusInfo = ( if tt_dbList.monitorStat > "" then tt_dbList.monitorStat + ", " else "" ) + "invalid dbPath".
     1163      else
     1164       tt_dbList.statusInfo = tt_dbList.monitorStat.
     1165   
     1166     assign
     1167       tt_dbList.friendlyName = input tt_dbList.friendlyName
     1168       tt_dbList.dbPath       = input tt_dbList.dbPath
     1169       tt_dbList.resrcType    = input tt_dbList.resrcType
     1170       tt_dbList.monitorDB    = input tt_dbList.monitorDB
     1171       tt_dbList.serverName   = input tt_dbList.serverName
     1172     .
     1173   
     1174     if r-index( tt_dbList.dbPath, ".db" ) = ( length( tt_dbList.dbPath ) - 2 ) then
     1175       assign
     1176         tt_dbList.dbPath = substring( tt_dbList.dbPath, 1, length( tt_dbList.dbPath ) - 3 )
     1177         changeStatus = "unsaved"
     1178         tt_dbList.monitorStat = ( if tt_dbList.monitorStat begins "new" then "new" else "changed" )
     1179       .
     1180   
     1181     z:refresh().
     1182     apply "entry" to b in frame dbList.
     1183   
     1184     return no-apply.
     1185   
     1186   end.
     1187   
     1188   on "s", "x" of b in frame dbList do:
     1189   
     1190     define variable lk as integer no-undo.
     1191   
     1192     lk = lastkey.
     1193   
     1194     message "saving data".
     1195   
     1196     output to value( "etc/dblist.cfg" ) unbuffered.
     1197   
     1198     put unformatted "# etc/dblist.cfg" skip.
     1199     put unformatted "#" skip.
     1200     put unformatted "# note: please do NOT append .db to /dbpath/dbName" skip.
     1201     put unformatted "#" skip.
     1202     put unformatted "# friendlyName|/dbpath/dbName|serverName|monitor[|dlc[|type]]" skip.
     1203     put unformatted "# s2k|/db/s2k|myserver|no" skip.
     1204     put unformatted "#" skip.
     1205     put skip(1).
     1206   
     1207     for each tt_dbList:
     1208   
     1209       /* remove old GUID field if it exists
     1210        */
     1211   
     1212       if num-entries( tt_dbList.serverName, "-" ) = 5 and length( tt_dbList.serverName ) = 36 then tt_dbList.serverName = "".
     1213   
     1214       /* remove ".db" if it somehow got through to this point
     1215        */
     1216   
     1217       if r-index( tt_dbList.dbPath, ".db" ) = ( length( tt_dbList.dbPath ) - 2 ) then
     1218         tt_dbList.dbPath = substring( tt_dbList.dbPath, 1, length( tt_dbList.dbPath ) - 3 ).
     1219   
     1220       put unformatted
     1221         tt_dbList.friendlyName "|"
     1222         tt_dbList.dbPath "|"
     1223         tt_dbList.serverName "|"
     1224         tt_dbList.monitorDB "|"
     1225         tt_dbList.dlcPath "|"
     1226         tt_dbList.resrcType
     1227         skip
     1228       .
     1229   
     1230     end.
     1231   
     1232     output close.
     1233   
     1234     if custId <> "" and custId <> ? and pt_backend <> "" and pt_backend <> ? then
     1235       run lib/mergedblist.p ( input-output custId, pt_backend, "POST", output mergeStat ).
     1236   
     1237     for each tt_dbList where tt_dbList.statusInfo begins "new" and tt_dbList.monitorPID  = "2":
     1238   
     1239       assign
     1240         tt_dbList.monitorPID  = ""
     1241         tt_dbList.monitorStat = ""
     1242         tt_dbList.statusInfo  = ""
     1243       .
     1244   
     1245     end.
     1246   
     1247     changeStatus = "".
     1248     showChanges().
     1249   
     1250     if lk = 88 or lk = 120 then apply "close" to this-procedure.
     1251   
     1252     return no-apply.
     1253   
     1254   end.
     1255   
     1256   on "m" of b in frame dbList do:
     1257   
     1258     assign
     1259       tt_dbList.monitorDB   = not( tt_dbList.monitorDB )
     1260       changeStatus          = "unsaved"
     1261       tt_dbList.monitorStat = ( if tt_dbList.monitorStat begins "new" then "new" else "changed" )
     1262     .
     1263   
     1264     if tt_dbList.monitorPID = "1" then
     1265       tt_dbList.statusInfo = tt_dbList.monitorStat + ", invalid dbPath".
     1266      else
     1267       tt_dbList.statusInfo = tt_dbList.monitorStat.
     1268   
     1269     z:refresh().
     1270     showChanges().
     1271   
     1272     return no-apply.
     1273   
     1274   end.
     1275   
     1276   on "entry", "value-changed" of b in frame dbList do:
     1277   
     1278     z:refresh().
     1279     assign
     1280       f:row     = x:row + z:focused-row + 2
     1281       f:column  = x:column + 3
     1282     .
     1283     showChanges().
     1284   
     1285     if tt_dbList.monitorPID = "1" then
     1286       tt_dbList.statusInfo = ( if tt_dbList.monitorStat > "" then tt_dbList.monitorStat + ", " else "" ) + "invalid dbPath".
     1287      else
     1288       tt_dbList.statusInfo = tt_dbList.monitorStat.
     1289   
     1290     hide message no-pause.
     1291   
     1292     return.
     1293   
     1294   end.
     1295   
     1296   on "insert-mode", "ctrl-t" of b in frame dbList do:
     1297   
     1298     message "insert row!".
     1299   
     1300     find first tt_dbList where tt_dbList.friendlyName = "" no-error.
     1301     if available tt_dbList then
     1302       r = rowid( tt_dbList ).
     1303      else
     1304       run new_dbList.
     1305   
     1306     close query q.
     1307     open query q for each tt_dbList.
     1308     z:refresh().
     1309   
     1310     apply "enter" to b in frame dbList.
     1311   
     1312     /* for reasons that are currently mysterious to me an extra copy of the
     1313      * most recently inserted row appears in the browse widget.  this does
     1314      * not seem to hurt anything and both copies can be editied - but it is
     1315      * very odd.  and somewhat annoying.
     1316      *
     1317      */
     1318   
     1319     close query q.
     1320     open query q for each tt_dbList.
     1321   
     1322     z:refresh().
     1323   
     1324     return no-apply.
     1325   
     1326   end.
     1327   
     1328   on "delete-character", "delete-line", "ctrl-d" of b in frame dbList do:
     1329   
     1330     message "delete row!".
     1331     changeStatus = "unsaved".
     1332     delete tt_dbList.
     1333     z:delete-current-row().
     1334   
     1335     return no-apply.
     1336   
     1337   end.
     1338   
     1339   on "enter" of b in frame dbList do:
     1340   
     1341     enable
     1342       tt_dbList.friendlyName
     1343       tt_dbList.dbPath
     1344       tt_dbList.monitorDB
     1345       tt_dbList.resrcType
     1346       tt_dbList.serverName
     1347       /* tt_dbList.dlcPath  */
     1348      with frame upd_tt_dbList
     1349     .
     1350   
     1351     if "TTY" <> "tty" then                           /* look reasonable if someone fires up prowin32         */
     1352       assign
     1353         f:row = x:row + z:focused-row /* + 2 */   /* 1 if no-box, 2 if there are boxes... */
     1354         f:column = x:column /* + 3 */
     1355       .
     1356      else
     1357       assign
     1358         f:row = x:row + z:focused-row + 2                         /* 1 if no-box, 2 if there are boxes... */
     1359         f:column = x:column + 3
     1360       .
     1361   
     1362     if available tt_dbList then
     1363       do:
     1364         display tt_dbList.friendlyName tt_dbList.dbPath tt_dbList.monitorDB tt_dbList.resrcType tt_dbList.serverName with frame upd_tt_dbList.
     1365         apply "entry" to tt_dbList.friendlyName in frame upd_tt_dbList.
     1366       end.
     1367     z:refresh().
     1368   
     1369     return no-apply.
     1370   
     1371   end.
     1372   
     1373   
     1374   /* main block
     1375    */
     1376   
     1377   view frame info.
     1378   
     1379   os-copy value( "etc/dblist.cfg" ) value( "etc/dblist.bak" ).
     1380   os-copy value( "etc/dblist.cfg" ) value( pt_tmpdir + "/dblist.save" ).
     1381   
     1382   dbgMode = 3.
     1383   
     1384   /***
     1385   message "Checking portal:" pt_backend custId dbgMode.
     1386   pause.
     1387    ***/
     1388   
     1389   if custId <> "" and custId <> ? and pt_backend <> "" and pt_backend <> ? then
     1390     run lib/mergedblist.p ( input-output custId, pt_backend, "", output mergeStat ).
     1391   
     1392   run chkDBList.
     1393   
     1394   for each tt_dbList:
     1395   
     1396     file-info:file-name = tt_dbList.dbPath + ".db".
     1397     if file-info:full-pathname = ? then
     1398       assign
     1399         tt_dbList.monitorPID = "1"
     1400         tt_dbList.statusInfo = "invalid dbPath"
     1401       .
     1402      else
     1403       tt_dbList.monitorPID = "2".
     1404   
     1405     numFound = numFound + 1.
     1406   
     1407   end.
     1408   
     1409   if numFound = 0 then run new_dbList.
     1410   
     1411   open query q for each tt_dbList.
     1412   
     1413   enable b with frame dbList.
     1414   
     1415   apply "entry" to b in frame dbList.
     1416   
     1417   if numFound = 0 then
     1418     do:
     1419       find first tt_dbList.
     1420       apply "entry" to tt_dbList.friendlyName in frame upd_tt_dbList.
     1421     end.
     1422   
     1423   do on error undo, leave on endkey undo, leave on stop undo, leave:
     1424   
     1425     wait-for "close" of this-procedure.
     1426   
     1427   end.
     1428   
     1429   quit.
