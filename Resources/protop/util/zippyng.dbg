        1   /* zippyng.p
        2    *
        3    * (see lib/zippy.p for more details)
        4    *
        5    * run a constant workload against the db and record the time that it takes
        6    *
        7    * ideally 3 instances of this monitor will be run:
        8    *
        9    *  1) connect on the db server with shared memory
       10    *
       11    *      _progres dbname -b -p util/zippyng.p -param "shm" > tmp/zippyng.shm.err
       12    *
       13    *  2) connect on the db server client/server thru localhost
       14    *
       15    *      _progres dbname -b -p util/zippyng.p -param "lh"  -H localhost -S port > tmp/zippyng.lh.err
       16    *
       17    *  3) connect from a remote client over a network
       18    *
       19    *      _progres dbname -b -p util/zippyng.p -param "cs"  -H dbserver  -S port > tmp/zippyng.cs.err
       20    *
       21    * if everything is operating correctly the times should be consistent and the
       22    * ratio between them stable as the workload increases or decreases
       23    *
       24    * if the shared memory timings vary then you likely have a CPU bottleneck or VM
       25    * configuration issue
       26    *
       27    * if there are not enough "remote servers" being started then you would see the
       28    * ratio between shared memory and localhost vary
       29    *
       30    * if there is a bottleneck in the network layer you should see that as variation
       31    * in the ratios between all 3 tests
       32    *
       33    */
       34   
       35   define new global shared variable pt_logdir as character no-undo.
       36   define new global shared variable pt_tmpdir as character no-undo.
       37   
       38   define variable i as integer no-undo.
       39   define variable r as integer no-undo.
       40   define variable t as integer no-undo.
       41   
       42   define variable p1 as character no-undo.
       43   define variable DS as character no-undo.
       44   
       45   define variable logFileName  as character no-undo.
       46   define variable flgFileName  as character no-undo.
       47   define variable monName      as character no-undo.
       48   define variable zipsync      as character no-undo.
       49   
       50   DS = ( if opsys = "unix" then "/" else "~\" ).
       51   
       52   if session:parameter <> "" then p1 = "." + session:parameter.
       53   
       54   run lib/protoplib.p  persistent.
       55   run lib/vstlib.p     persistent.
       56   run lib/protop-cfg.p persistent.                                        /* initialize protop environment                        */
       57   
       58   run getMonName ( input-output monName ).
       59   
       60   assign
       61     logFileName = substitute( "&1/&2&3.&4", pt_logdir, monName, p1, "log" )
       62     flgFileName = substitute( "&1/&2&3.&4", pt_tmpdir, monName, p1, "flg" )
       63   .
       64   
       65   run mkFlag ( flgFileName ).
       66   
       67   run lib/zippy.p persistent.
       68   
       69   do for _myconnection transaction:
       70     find first _myconnection exclusive-lock no-error.
       71     buffer _myConnection:handle:buffer-field( "_myconn-userMisc" ):buffer-value = substitute( "pt3:zippy&1", p1 ) no-error.
       72   end.
       73   
       74   zipsync = os-getenv( "ZIPSYNC" ).
       75   if zipsync = ? then zipsync = "".
       76   
       77   output to value( logFileName ) append unbuffered.
       78   
       79   do while true:
       80   
       81     run zippy ( output r, output t ).
       82   
       83     put now (( r / t ) * 1000 ) format ">>>>>>>>9" skip.
       84   
       85     if zipsync <> "" then
       86       os-command silent value( zipsync ).
       87   
       88     do i = 1 to 60:
       89       file-info:file-name = flgFileName.
       90       if file-info:full-pathname = ? then quit.
       91       pause 1 no-message.
       92     end.
       93   
       94   end.
       95   
       96   output close.
       97   
       98   return.
