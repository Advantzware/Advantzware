        1   /* trxmon.p
        2    *
        3    * mpro -p util/trxmon.p -param "friendlyName"
        4    *
        5    */
        6   
        7   
        8   /*******************************************************************************
        9    *******************************************************************************
       10    **                                                                           **
       11    **                                                                           **
       12    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       13    **  http://www.greenfieldtech.com                                            **
       14    **                                                                           **
       15    **  ProTop is free software; you can redistribute it and/or modify it        **
       16    **  under the terms of the GNU General Public License (GPL) as published     **
       17    **  by the Free Software Foundation; either version 2 of the License, or     **
       18    **  at your option) any later version.                                       **
       19    **                                                                           **
       20    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       21    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       22    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       23    **  for more details.                                                        **
       24    **                                                                           **
       25    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       26    **  of use and alternative licensing options for this software.              **
       27    **                                                                           **
       28    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       29    **                                                                           **
       30    **  See http://www.fsf.org for more information about the GPL.               **
       31    **                                                                           **
       32    **                                                                           **
       33    *******************************************************************************
       34    *******************************************************************************
       35    *
       36    * protop.i
       37    *
       38    * Header file for protop family of programs
       39    *
       40    *
       41    * Known Bugs & Issues:
       42    *
       43    *
       44    * To Do:
       45    *
       46    *
       47    * Author:
       48    *
       49    *      Tom Bascom, Greenfield Technologies
       50    *      http://www.greenfieldtech.com
       51    *      August 28, 2003
       52    *
       53    */
       54   
       55   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       56   &global-define  FASTLOCK        true
       57   &ELSE
       58   &global-define  FASTLOCK        false
       59   &ENDIF
       60   
       61   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       62   &global-define  OE11            "yes"
       63   &global-define  xDEBUGTT        false
       64   &ENDIF
       65   
       66   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       67   &global-define  NOSERIALIZE     serialize-hidden
       68   &ENDIF
       69   
       70   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       71   &global-define  BIGINT          int64
       72   &ELSE
       73   &global-define  BIGINT          decimal
       74   &ENDIF
       75   
       76   
       77   /* lib/v9.i
       78    *
       79    */
       80   
       81   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       82   &global-define  CPYLOB  "no"
       83   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       84   &global-define  LNGCR   character
       85   &global-define  DTZ     integer
       86   &global-define  BIGINT  decimal
       87   &ELSE
       88   &global-define  OE10    "yes"
       89   &global-define  NOW     now
       90   &global-define  LNGCR   longchar
       91   &global-define  DTZ     datetime-tz
       92   &global-define  BIGINT  int64
       93   &ENDIF
       94    
       95   
       96   /* use extended _connect fields: -client, -cache*
       97    */
       98   
       99   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      100   &global-define  CONNECTX        "yes"
      101   &ELSE
      102   &global-define  CONNECTX        "no"
      103   &ENDIF
      104   
      105   define stream inStrm.
      106   
      107   define new global shared variable dbgMode as integer no-undo initial 1.
      108   
      109   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      110    *
      111    * someday everyone will have OO and I will replace these with a gsv class
      112    * or something of that ilk
      113    *
      114    */
      115   
      116   define new global shared variable pt_shortname   as character no-undo.
      117   define new global shared variable pt_uniqName    as character no-undo.
      118   define new global shared variable pt_server      as character no-undo.
      119   define new global shared variable pt_resrcType   as character no-undo.
      120   
      121   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      122   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      123   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      124   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      125   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      126   
      127   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      128   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      129   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      130   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      131   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      132   define new global shared variable pt_ioFileName  as character no-undo.
      133   define new global shared variable pt_dfCmd       as character no-undo.
      134   
      135   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      136   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      137   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      138   
      139   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      140   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      141   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      142   
      143   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      144   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      145   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      146   
      147   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      148   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      149   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      150   
      151   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      152   
      153   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      154   
      155   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      156   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      157   
      158   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      159    * 
      160    */
      161   
      162   define new global shared variable stime as integer no-undo.                     /* start time                           */
      163   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      164   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      165   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      166   
      167   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      168   
      169                                                                                   /* corresponding to base checkpoint#    */
      170   /** Global Shared Temp Table Definitions
      171    **
      172    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      173    ** And a shared temp-table is logically the same as a db table so who really cares?
      174    **
      175    **/
      176   
      177   /* cache _File and _Index records so that we don't keep hitting the db to translate
      178    */
      179   
      180   define new global shared temp-table tt_tbl no-undo
      181     field xid      as integer                                             /* _File._File-Num              */
      182     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      183     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      184     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      185     field tblname  as character                                           /* _File._File-Name             */
      186     index xid-idx is unique primary xid.
      187   
      188   define new global shared temp-table tt_idx no-undo
      189     field xid      as integer                                             /* _Index._Idx-Num              */
      190     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      191     field idxname  as character                                           /* _Index._Idx-Name             */
      192     field idxnote  as character
      193     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      194     field tblnum   as integer                                             /* _File._File-Num              */
      195     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      196     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      197     field tblname  as character                                           /* _File._File-Name             */
      198     index xid-idx is unique primary xid.
      199   
      200   define new global shared temp-table tt_areaExtent no-undo
      201     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      202     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      203   
      204     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      205     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      206     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      207   
      208     index ae-idx is unique primary areaNum extNum.
      209   
      210   define new global shared temp-table tt_area no-undo
      211     field xid      as integer    format ">>>9"
      212     field SANum    as integer    format ">>>9"        label "#"
      213     field areaPool as character  format "x(2)"        label "BX"
      214   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      215     field SAName   as character  format "x(30)"       label "Area Name"
      216     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      217     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      218     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      219     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      220     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      221     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      222     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      223   
      224     field blkszkb as integer     format ">>9"         label "BSZ"
      225     field rpb     as integer     format ">>9"         label "RPB"
      226     field clstrsz as integer     format ">>9"         label "CSZ"
      227   
      228     field numTbls as integer     format ">>>>9"       label "#Tbls"
      229     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      230     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      231   
      232     field numExts as integer     format ">>>>9"       label "#Exts"
      233     field hasVar  as logical     format "Yes/No"      label "Var?"
      234   
      235     field xnote   as character   format "x"           label "*"
      236   
      237     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      238     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      239   
      240     index pctAlloc-idx is primary pctAlloc descending
      241     index pctLastX-idx pctLastX pctAlloc descending
      242     index allocGB-idx allocGB descending
      243     index totGB-idx totGB descending
      244     index xid-idx is unique xid
      245     index SANum-idx is unique SANum
      246     index SAName-idx is unique SAName
      247   .
      248   
      249   *** Encrypted Source ***
      250   *** Encrypted Source ***
      251   *** Encrypted Source ***
      252   *** Encrypted Source ***
      253   *** Encrypted Source ***
      254   *** Encrypted Source ***
      255   *** Encrypted Source ***
      256   *** Encrypted Source ***
      257   *** Encrypted Source ***
      258   *** Encrypted Source ***
      259   *** Encrypted Source ***
      260   *** Encrypted Source ***
      261   *** Encrypted Source ***
      262   *** Encrypted Source ***
      263   *** Encrypted Source ***
      264   *** Encrypted Source ***
      265   *** Encrypted Source ***
      266   *** Encrypted Source ***
      267   *** Encrypted Source ***
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319    
      320   
      321   /*******************************************************************************
      322    *******************************************************************************
      323    **                                                                           **
      324    **                                                                           **
      325    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      326    **  http://www.greenfieldtech.com                                            **
      327    **                                                                           **
      328    **  ProTop is free software; you can redistribute it and/or modify it        **
      329    **  under the terms of the GNU General Public License (GPL) as published     **
      330    **  by the Free Software Foundation; either version 2 of the License, or     **
      331    **  at your option) any later version.                                       **
      332    **                                                                           **
      333    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      334    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      335    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      336    **  for more details.                                                        **
      337    **                                                                           **
      338    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      339    **  of use and alternative licensing options for this software.              **
      340    **                                                                           **
      341    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      342    **                                                                           **
      343    **  See http://www.fsf.org for more information about the GPL.               **
      344    **                                                                           **
      345    **                                                                           **
      346    *******************************************************************************
      347    *******************************************************************************
      348    *
      349    * protoplib.i
      350    *
      351    * ProTop infrastructure library definitions
      352    *
      353    */
      354   
      355   function uDateTime returns integer () in super.
      356   function string2uDateTime returns integer( input p_text as character ) in super.
      357   function searchDir returns character ( input xDir as character ) in super.
      358   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      359   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      360   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      361   function myPID returns character () in super.
      362   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      363   
      364   /* end protoplib.i */
      365    
      366   
      367   /*******************************************************************************
      368    *******************************************************************************
      369    **                                                                           **
      370    **                                                                           **
      371    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      372    **  http://www.greenfieldtech.com                                            **
      373    **                                                                           **
      374    **  ProTop is free software; you can redistribute it and/or modify it        **
      375    **  under the terms of the GNU General Public License (GPL) as published     **
      376    **  by the Free Software Foundation; either version 2 of the License, or     **
      377    **  at your option) any later version.                                       **
      378    **                                                                           **
      379    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      380    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      381    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      382    **  for more details.                                                        **
      383    **                                                                           **
      384    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      385    **  of use and alternative licensing options for this software.              **
      386    **                                                                           **
      387    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      388    **                                                                           **
      389    **  See http://www.fsf.org for more information about the GPL.               **
      390    **                                                                           **
      391    **                                                                           **
      392    *******************************************************************************
      393    *******************************************************************************
      394    *
      395    * vstlib.i
      396    *
      397    * VST library definitions
      398    *
      399    */
      400   
      401   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      402   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      403   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      404   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      405   
      406   function connectFlags returns character ( input cnxId as integer ) in super.
      407   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      408   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      409   
      410   function isAIEnabled returns logical () in super.
      411   function isReplSource returns logical () in super.
      412   function isReplTarget returns logical () in super.
      413   function isBackupRunning returns logical () in super.
      414   function isWorkgroup returns logical () in super.
      415   
      416   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      417   
      418   /* end vstlib.i */
      419    
      420   
      421   function add2ds returns logical ( input h as handle ) in super.
      422   function getTempTableHandle returns handle ( input n as character ) in super.
      423   
      424   /* end protop.i */
      425    
      426   
      427   /* dbgMode = 1  minimal
      428    * dbgMode = 3  errors only
      429    * dbgMode = 4  + success
      430    * dbgMode = 5  verbose details (usually overkill)
      431    */
      432   
      433   dbgMode = 3.
      434   
      435   define variable monName      as character   no-undo.
      436   define variable tick         as decimal     no-undo initial 5.0.        /* clock tick - 1/2 sec rounds up to 1 prior to OE11    */
      437   define variable monint       as integer     no-undo initial 300.        /* monitor refresh interval                             */
      438                                                                           /* 10 is useful for testing 300 is typical for PROD     */
      439   
      440   define variable logFileName  as character   no-undo.
      441   define variable flgFileName  as character   no-undo.
      442   define variable dbgFileName  as character   no-undo.
      443   
      444   /* config file definition
      445    */
      446   
      447   define temp-table tt_config no-undo
      448     field cfgId    as character format "x(20)"                            /* standard first field, must be unique                 */
      449     field cfgValue as character format "x(60)"                            /* the value                                            */
      450     index cfgId-idx is primary unique cfgId                               /* standard primary, unique index                       */
      451   .
      452   
      453   /********************************************************************************************************************************/
      454   /* this is the business end of things...
      455    *
      456    * all code specific to this monitor should go in here
      457    *
      458    */
      459   
      460   define variable emailList    as character no-undo.
      461   define variable stuckList    as character no-undo.
      462   define variable mailxBody    as longchar  no-undo.
      463   define variable inLine       as character no-undo.
      464   define variable trxThreshold as integer   no-undo initial 3600.         /* how old is an "old" transaction?                     */
      465   define variable trxZapAfter  as integer   no-undo initial 1800.         /* how long must it be idle before being zapped?        */
      466   define variable trxZapBatch  as integer   no-undo initial  900.         /* how often do we actually zap things?                 */
      467   
      468   define variable vlogdir      as character no-undo.
      469   define variable exListDate   as date      no-undo.
      470   define variable exListTime   as integer   no-undo.
      471   
      472   define temp-table tt_userExclude no-undo
      473     field exName as character
      474     index exName-idx is primary exName
      475   .
      476   
      477   define temp-table tt_trx no-undo
      478   
      479     field xid       as integer   format ">>>>>>>>>9"    label "Id"
      480     field xValid    as logical
      481     field zap       as logical
      482     field trxNum    as integer   format ">>>>>>>>>9"    label "TRX#"
      483     field userEx    as character format "x(6)"          label "Exempt"
      484     field userNum   as integer   format ">>>>9"         label "Usr#"
      485     field userName  as character format "x(15)"         label "Name"
      486     field userPID   as character format "x(8)"          label "PID"
      487     field userFlags as character format "x(5)"          label "Flags"
      488     field userDev   as character format "x(16)"         label "Device"
      489     field trx-rl    as integer   format ">>>>>>>>9"     label "BI Clstr"
      490     field trx-st    as character format "x(4)"          label "Stat"
      491     field xtime     as character format "x(13)"         label "Start"
      492     field duraStr   as character format "x(12)"         label "    Duration"
      493     field trx-wait  as character format "x(34)"         label "Wait Resource (dbkey)"
      494     field duration  as integer   format ">>>>>9"        label " Len"
      495   
      496     field dbAccess  as int64      format ">>>>>>>>>>>9" label "db Access"
      497     field lastAct   as datetime                         label "Last Active"
      498   
      499     index xid-idx is unique xid
      500     index duraStr-idx is primary duraStr descending
      501     index zap-idx zap
      502   
      503   .
      504   
      505   define stream zapMail.
      506   
      507   
      508   procedure checkExList:
      509   
      510     file-info:file-name = "etc/exclude.trx".
      511     if file-info:full-pathname = ? then
      512       do:
      513         empty temp-table tt_userExclude.
      514         return.
      515       end.
      516   
      517     if exListDate <> file-info:file-mod-date or exListTime <> file-info:file-mod-time then
      518       do:
      519   
      520         empty temp-table tt_userExclude.
      521   
      522         input stream inStrm from value( file-info:full-pathname ).
      523         repeat:
      524           create tt_userExclude.
      525           import stream inStrm tt_userExclude.
      526         end.
      527         input stream inStrm close.
      528   
      529         for each tt_userExclude:
      530           exName = trim( exName ).
      531           if exName = "" then delete tt_userExclude.
      532         end.
      533   
      534         assign
      535           exListDate = file-info:file-mod-date
      536           exListTime = file-info:file-mod-time
      537         .
      538   
      539         /*
      540         for each tt_userExclude:
      541           display tt_userExclude.
      542         end.
      543         pause.
      544          */
      545   
      546       end.
      547   
      548     return.
      549   
      550   end.
      551   
      552   
      553   procedure updTRXlist:
      554   
      555     for each tt_TRX:
      556       xvalid = no.
      557     end.
      558   
      559     /* Get transaction data from _Trans VST
      560      *
      561      */
      562   
      563     for each dictdb._Trans no-lock
      564        where _Trans-usrNum <> ?
      565          and _Trans-state <> "allocated":
      566   
      567       /* and _Trans-duration <> ?        */
      568       /* by _Trans-duration descending:  */
      569   
      570       find tt_TRX where tt_TRX.xid = _Trans-id no-error.
      571       if not available tt_TRX then create tt_trx.
      572   
      573       assign
      574         tt_trx.xid      = _Trans-id
      575         tt_trx.xValid   = yes
      576         tt_trx.xtime    = ( if _Trans-txtime <> ? then substring( _Trans-txtime, 12 ) else "" )
      577         tt_trx.userNum  = _Trans-usrnum
      578         tt_trx.trxNum   = _Trans-num
      579         tt_trx.trx-rl   = _Trans-counter
      580         tt_trx.trx-st   = _Trans-state
      581         tt_trx.duration = ( if _Trans-duration <> ? then _Trans-duration else 0 )
      582         tt_trx.duraStr  = string( integer( truncate( tt_trx.duration / 86400, 0 )), ">>>" ) + " " + string( tt_trx.duration, "hh:mm:ss" )
      583       .
      584   
      585       case tt_trx.trx-st:
      586         when "ALLOCATED"  then tt_trx.trx-st = "ALLO".
      587         when "ACTIVE"     then tt_trx.trx-st = "ACTV".
      588         when "DEAD"       then tt_trx.trx-st = "DEAD".
      589         when "COMMITTING" then tt_trx.trx-st = "COMM".
      590         when "PREPARING"  then tt_trx.trx-st = "PRPG".
      591         when "PREPARED"   then tt_trx.trx-st = "PRPD".
      592       end.
      593   
      594       /* get some info about the session that started the trx
      595        *
      596        */
      597   
      598       /* About usr#
      599        *
      600        * PROMON = usr#
      601        * .lg file = usr#
      602        * _myconnection.myconn-userid = usr#
      603        * _connection._connect-usr = usr#
      604        * _connection._connection-id = usr# + 1
      605        *
      606        * _connection-id is a *much* more efficient way to access _connect -- thus we jump through hoops (add one to the usr#)
      607        *
      608        */
      609   
      610       find dictdb._Connect no-lock where _Connect-id = _Trans-usrnum + 1 no-error.
      611   
      612       if available _Connect then
      613         assign
      614           tt_trx.userFlags = connectFlags( _Connect-Id )
      615           tt_trx.userName  = connectName( _Connect-Id, tt_trx.userFlags )
      616           tt_trx.userPID   = string( _connect-PID )
      617           tt_trx.userDev   = _connect-Device
      618           tt_trx.trx-wait  = ( if available _Connect then ( string( _Connect-wait ) + " " + string( _Connect-wait1 )) else "" )
      619         .
      620   
      621       find _userio where _userio-id = _connect-id.                        /* has there been a db activity since we last looked?   */
      622   
      623       if tt_TRX.dbAccess <> _userio-dbAccess then                         /* if it is different then update the last activity     */
      624         assign                                                            /* time stamp                                           */
      625           tt_trx.dbAccess = _userio-dbAccess
      626           tt_trx.lastAct  = now
      627         .
      628   
      629       find tt_userExclude where exName = tt_trx.userName no-error.        /* is this an exempt user?                              */
      630         tt_trx.userEx = ( if available( tt_userExclude ) then "*" else "" ).
      631   
      632     end.
      633   
      634     for each tt_TRX where xvalid = no:                                    /* remove transactions that are no longer "on the radar" */
      635       delete tt_TRX.
      636     end.
      637   
      638     return.
      639   
      640   end.
      641   
      642   
      643   /* "monitor" is called by the main body
      644    *
      645    */
      646   
      647   define variable zapTimer as integer no-undo.
      648   
      649   procedure monitor:
      650   
      651     define variable i as integer no-undo.
      652   
      653     define variable scratchFile as character no-undo.
      654     define variable subjectLine as character no-undo.
      655   
      656     if dbgMode >= 3 then message now substitute( "&1...", monName ).
      657   
      658     run chkConfig.
      659     run checkExList.
      660     run updTRXlist.
      661   
      662     zapTimer = zapTimer + monInt.
      663   
      664     /* check for zapping candidates -- active transactions older than the threshold
      665      */
      666   
      667     i = 0.
      668     for each tt_trx where tt_trx.duration >= trxThreshold break by tt_trx.duration descending:
      669   
      670       /* is the last activity older than the zapAfter limit?
      671        */
      672   
      673       if ( abs( interval( tt_trx.lastAct, now, "seconds" )) < trxZapAfter ) then
      674         tt_trx.zap = no.
      675        else                                                               /* a candidate has been found!                          */
      676         do:
      677   
      678           assign
      679             i = i + 1
      680             tt_trx.zap = yes
      681           .
      682   
      683           /* log the details of sessions about to be zapped
      684            */
      685   
      686           message now "disconnect:"
      687             tt_trx.userNum
      688             tt_trx.userEx
      689             tt_trx.userName
      690             tt_trx.userPID
      691             tt_trx.userFlags
      692             tt_trx.userDev
      693             tt_trx.trx-st
      694             tt_trx.duraStr
      695             tt_trx.dbAccess
      696             abs( interval( tt_trx.lastAct, now, "seconds" ))
      697           .
      698   
      699         end.
      700   
      701     end.
      702   
      703     /* if there is at least one session that needs to be disconnected...
      704      */
      705   
      706     if i >= 1 then
      707       do:
      708   
      709         if zapTimer < trxZapBatch then return.
      710   
      711         /* send out an email to interested parties
      712          */
      713   
      714         assign
      715           subjectLine = substitute( "Disconnecting &1 very old transaction&2", i, ( if i > 1 then "s" else "" ))
      716           scratchFile = pt_tmpdir + "/disconnect.tmp"
      717         .
      718   
      719         if opsys begins "win" then scratchFile = replace( scratchFile, "/", "~\" ).
      720   
      721         os-command value( substitute( 'echo "" > &1', scratchFile )).
      722   
      723         output stream zapMail close.
      724         output stream zapMail to value( scratchFile ) append unbuffered.
      725   
      726         put stream zapMail unformatted now " " subjectLine ":" skip.
      727         put stream zapMail skip(1).
      728   
      729         output stream zapMail close.
      730   
      731         for each tt_trx where tt_trx.zap = yes by tt_trx.duration descending:
      732   
      733           output stream zapMail to value( scratchFile ) append.
      734   
      735           put stream zapMail unformatted " Usr# Name            PID      Flags Device           Stat     Duration       Idle" skip.
      736           put stream zapMail unformatted "----- --------------- -------- ----- ---------------- ---- ------------ ----------" skip.
      737   
      738           put stream zapMail
      739               tt_trx.userNum   format ">>>>9" space(1)
      740               tt_trx.userName  format "x(15)" space(1)
      741               tt_trx.userPID   format "x(8)"  space(1)
      742               tt_trx.userFlags format "x(5)"  space(1)
      743               tt_trx.userDev   format "x(16)" space(1)
      744               tt_trx.trx-st    format "x(4)"  space(1)
      745               tt_trx.duraStr   format "x(12)" space(1)
      746               abs( interval( tt_trx.lastAct, now, "seconds" )) format ">>>>>>>>>9"
      747               ( if tt_trx.userEx = "*" then " EXEMPT" else "" )
      748             skip
      749           .
      750   
      751           output stream zapMail close.
      752   
      753           if tt_trx.userEx = "*" then next.                                               /* skip over Excluded users     */
      754   
      755           pause 0.5.
      756   
      757           if tt_trx.userFlags begins "S" then
      758             os-command value( substitute( "bin/disconnect &1 &2 &3", pdbname(1), tt_trx.userNum, tt_trx.userPID )).
      759            else
      760             os-command value( substitute( "bin/disconnect &1 &2", pdbname(1), tt_trx.userNum )).
      761   
      762           /* check for _connect-disconnect = 1
      763            */
      764   
      765           find _Connect no-lock where _Connect-Id = tt_trx.userNum + 1 no-error.
      766   
      767           if available _Connect and _Connect-Disconnect = 1 then
      768             do:
      769               pause 5.    /* perhaps it will become unstuck... */
      770               find _Connect no-lock where _Connect-Id = tt_trx.userNum + 1 no-error.
      771             end.
      772   
      773           /* the session is still connected but "stuck" so try harder to disconnect them
      774            */
      775   
      776           if available _Connect and _Connect-Disconnect = 1 then
      777             do:
      778   
      779               /* stuck users get a special email
      780                */
      781   
      782               output stream zapMail to value( pt_tmpdir + "/disconnectx.tmp" ) append.
      783   
      784               put stream zapMail unformatted " Usr# Name            PID      Flags Device           Stat     Duration       Idle" skip.
      785               put stream zapMail unformatted "----- --------------- -------- ----- ---------------- ---- ------------ ----------" skip.
      786   
      787               put stream zapMail
      788                   tt_trx.userNum   format ">>>>9" space(1)
      789                   tt_trx.userName  format "x(15)" space(1)
      790                   tt_trx.userPID   format "x(8)"  space(1)
      791                   tt_trx.userFlags format "x(5)"  space(1)
      792                   tt_trx.userDev   format "x(16)" space(1)
      793                   tt_trx.trx-st    format "x(4)"  space(1)
      794                   tt_trx.duraStr   format "x(12)" space(1)
      795                   abs( interval( tt_trx.lastAct, now, "seconds" )) format ">>>>>>>>>9"
      796                 skip
      797               .
      798   
      799               put stream zapMail unformatted skip(2).
      800               put stream zapMail unformatted "disconnect flag is set!" skip.
      801               put stream zapMail unformatted skip(2).
      802   
      803               output stream zapMail close.
      804   
      805               if tt_trx.userFlags begins "S" then
      806                 os-command value( substitute( "bin/disconnectx &1 &2 &3", pdbname(1), tt_trx.userNum, tt_trx.userPID )).
      807                else
      808                 os-command value( substitute( "bin/disconnectx &1 &2", pdbname(1), tt_trx.userNum )).
      809   
      810               /* stuck users get a special email -- regardless of NOTRXRAG
      811                */
      812   
      813               if stuckList <> "" and stuckList <> ? then
      814                 do:
      815   
      816                   /* os-command value( substitute( 'cat &3 | mailx -s "&4 &1" &2', pdbname(1), stuckList,  pt_tmpdir + "/disconnectx.tmp", "Stuck disconnection" )). */
      817   
      818                   mailxBody = "".
      819                   file-info:file-name = pt_tmpdir + "/disconnectx.tmp".
      820                   if file-info:full-pathname <> ? then
      821                     do:
      822                       mailxBody = mailxBody + substitute( "=== &1 ===", file-info:full-pathname ) + chr(10) + chr(10).
      823                       input stream inStrm from value( file-info:full-pathname ).
      824                       repeat:
      825                         inLine = "".
      826                         import stream inStrm unformatted inLine.
      827                         mailxBody = mailxBody + chr(10) + inLine.
      828                       end.
      829                       mailxBody = mailxBody + chr(10).
      830                       input stream inStrm close.
      831                     end.
      832   
      833                   run ptSendMail ( stuckList, "", substitute( "Stuck disconnection &1", pdbname(1)), mailxBody, "" ).
      834   
      835                 end.
      836   
      837             end.
      838   
      839           output stream zapMail to value( scratchFile ) append.
      840   
      841           put stream zapMail unformatted skip(2).
      842           put stream zapMail unformatted fill( "=", 60 ) skip.
      843           put stream zapMail unformatted skip(2).
      844   
      845           output stream zapMail close.
      846   
      847         end.
      848   
      849         output stream zapMail close.
      850   
      851         os-append
      852           value( scratchFile )
      853           value( substitute( "&1/disconnect.&2.&3", vlogdir, string( month( today ), "99" ), string( day( today ), "99" )))
      854         .
      855   
      856         if emailList <> "" and emailList <> ? then
      857           do:
      858   
      859             /* os-command value( substitute( 'cat &3 | mailx -s "&4 &1" &2', pdbname(1), emailList, scratchFile, subjectLine )). */
      860   
      861             mailxBody = "".
      862             file-info:file-name = scratchFile.
      863             if file-info:full-pathname <> ? then
      864               do:
      865                 mailxBody = mailxBody + substitute( "=== &1 ===", file-info:full-pathname ) + chr(10) + chr(10).
      866                 input stream inStrm from value( file-info:full-pathname ).
      867                 repeat:
      868                   inLine = "".
      869                   import stream inStrm unformatted inLine.
      870                   mailxBody = mailxBody + chr(10) + inLine.
      871                 end.
      872                 mailxBody = mailxBody + chr(10).
      873                 input stream inStrm close.
      874               end.
      875   
      876             run ptSendMail ( emailList, "", substitute( "&1 &2", subjectLine, pdbname(1)), mailxBody, "" ).
      877   
      878           end.
      879   
      880         /* if we have actually zapped something then
      881          * the timer needs to be reset
      882          */
      883   
      884         zapTimer = 0.
      885   
      886       end.
      887   
      888     return.
      889   
      890   end.
      891   
      892   /********************************************************************************************************************************/
      893   
      894   define variable cfgFile as character no-undo.
      895   define variable cfgDate as date      no-undo.
      896   define variable cfgTime as integer   no-undo.
      897   
      898   /* chkConfig
      899    *
      900    * reads a generic etc/monName.cfg file into tt_config as defined above
      901    *   - will notice if the file time-stamp changes and re-read the config
      902    *   - eliminates blank lines and treates lines starting with "#" as comments
      903    *   - only requires the first field to be a unique char id field called "cfgId"
      904    *
      905    */
      906   
      907   define variable firstCfgCheck as logical initial yes.
      908   
      909   procedure chkConfig:
      910   
      911     define variable i as integer no-undo.
      912   
      913     if cfgFile = "" or cfgFile = ? then
      914       do:
      915   
      916         if dbgMode > 3 then message now "looking for:" substitute( "&1/&2.&3.&4", "etc", monName, pt_shortname, "cfg" ).
      917         file-info:file-name = substitute( "&1/&2.&3.&4", "etc", monName, pt_shortname, "cfg" ).
      918         if file-info:full-pathname = ? then
      919           do:
      920             if dbgMode > 3 then message now "looking for:" substitute( "&1/&2.&3", "etc", monName, "cfg" ).
      921             file-info:file-name = substitute( "&1/&2.&3", "etc", monName, "cfg" ).
      922           end.
      923   
      924         if file-info:full-pathname <> ? then
      925           do:
      926             cfgFile = file-info:full-pathname.
      927             if dbgMode > 3 then message now "using:" file-info:full-pathname.
      928             firstCfgCheck = yes.
      929           end.
      930          else
      931           do:
      932             if firstCfgCheck then
      933               do:
      934                 if dbgMode > 3 then message now "no config file found, using internal default settings".
      935                 firstCfgCheck = no.
      936               end.
      937             return.
      938           end.
      939       end.
      940   
      941     file-info:file-name = cfgFile.                                /* no cfgFile was found or it has disappeared while running     */
      942     if file-info:full-pathname = ? then
      943       do:
      944         cfgFile = "".
      945         return.
      946       end.
      947   
      948     if cfgDate <> file-info:file-mod-date or cfgTime <> file-info:file-mod-time then
      949       do:
      950   
      951         assign
      952           cfgDate = file-info:file-mod-date
      953           cfgTime = file-info:file-mod-time
      954         .
      955   
      956         empty temp-table tt_config.
      957   
      958         if file-info:full-pathname = ? then
      959           do:
      960             if dbgMode >= 3 then message now "No config file:" cfgFile.
      961             return.
      962           end.
      963   
      964         if dbgMode >= 3 then
      965           message now "Parsing config file:" cfgFile.
      966   
      967         input stream inStrm from value( file-info:full-pathname ).
      968         load_cfg: repeat:
      969   
      970           do on error undo, leave load_cfg:
      971   
      972             create tt_config.
      973             tt_config.cfgId = "".
      974   
      975             import stream inStrm tt_config no-error.
      976   
      977             if error-status:num-messages > 0 then
      978               do:
      979                 do i = 1 to error-status:num-messages:
      980                   if dbgMode >= 0 then message now error-status:get-message(i).
      981                 end.
      982                 delete tt_config.
      983                 next load_cfg.
      984               end.
      985   
      986           end.
      987   
      988           if tt_config.cfgId = "" or tt_config.cfgId begins "#" then
      989             delete tt_config.
      990   
      991         end.
      992         input stream inStrm close.
      993   
      994         for each tt_config where tt_config.cfgId = "" or tt_config.cfgId begins "#":
      995           delete tt_config.
      996         end.
      997   
      998         /*
      999          * message now "Config file," cfgFile "contents:".
     1000          * for each tt_config:
     1001          *   display tt_config with width 132.
     1002          * end.
     1003          */
     1004   
     1005         for each tt_config:
     1006   
     1007           if dbgMode >= 0 then message now substitute( "&1 = [&2]", tt_config.cfgId, tt_config.cfgValue ).
     1008   
     1009           case tt_config.cfgId:
     1010             when "monInt"       then monInt       = integer( tt_config.cfgValue ).
     1011             when "trxThreshold" then trxThreshold = integer( tt_config.cfgValue ).
     1012             when "trxZapAfter"  then trxZapAfter  = integer( tt_config.cfgValue ).
     1013             when "trxZapBatch"  then trxZapBatch  = integer( tt_config.cfgValue ).
     1014             when "emailList"    then emailList    = tt_config.cfgValue.
     1015             when "stuckList"    then stuckList    = tt_config.cfgValue.
     1016           end.
     1017   
     1018         end.
     1019   
     1020       end.
     1021   
     1022     return.
     1023   
     1024   end.
     1025   
     1026   /* main body
     1027    *
     1028    */
     1029   
     1030   define variable lastRefresh  as datetime-tz no-undo.                    /* when was the last refresh?                           */
     1031   
     1032   if num-entries( session:parameter, "|" ) >= 1 then pt_shortname = entry( 1, session:parameter, "|" ).
     1033   
     1034   run lib/protoplib.p  persistent.                                        /* load protop infrastructure library                   */
     1035   run lib/vstlib.p     persistent.                                        /* db related infrastructure                            */
     1036   run lib/protop-cfg.p persistent.                                        /* initialize protop environment                        */
     1037   run lib/mailx.p      persistent.                                        /* handle mail                                          */
     1038   
     1039   run getMonName ( input-output monName ).
     1040   
     1041   file-info:file-name = pt_tmpdir.                                        /* make certain that we have a temp directory!          */
     1042   if file-info:full-pathname = ? then
     1043     os-command silent value( "mkdir " + pt_tmpdir ).
     1044   
     1045   file-info:file-name = pt_logdir.                                        /* make certain that we have a log directory!           */
     1046   if file-info:full-pathname = ? then
     1047     os-command silent value( "mkdir " + pt_logdir ).
     1048   
     1049   message now "Initializing" monName pt_shortname "pdbname:" pdbname(1).
     1050   
     1051   assign
     1052     logFileName = substitute( "&1/&2.&3.&4", pt_logdir, monName, pt_shortname, "log" )
     1053     flgFileName = substitute( "&1/&2.&3.&4", pt_tmpdir, monName, pt_shortname, "flg" )
     1054     dbgFileName = substitute( "&1/&2.&3.&4", pt_tmpdir, monName, pt_shortname, "dbg" )
     1055   .
     1056   
     1057   vlogdir = ( if pt_vstmon <> "" then pt_vstmon else pt_logdir ).
     1058   
     1059   run mkFlag ( flgFileName ).
     1060   
     1061   output to value( logFileName ) unbuffered append.                       /* if a 2nd copy starts, try to make it obvious         */
     1062   
     1063   lastRefresh = add-interval( now, monInt * -2, "seconds" ).              /* don't wait on the first iteration                    */
     1064   
     1065   message now "Starting" monName pt_shortname "pdbname:" pdbname(1).
     1066   
     1067   /* the monitoring loop
     1068    *
     1069    */
     1070   
     1071   do while true:
     1072   
     1073     pause tick no-message.                                                /* check flag and debug level while waiting             */
     1074   
     1075     if lastkey > 0 and lastkey <> 32 then leave.                          /* useful if we are running interactively               */
     1076   
     1077     file-info:file-name = flgFileName.                                    /* are we being politely asked to stop?                 */
     1078     if file-info:full-pathname = ? then                                   /* (if the flag disappears we are bing asked to stop)   */
     1079       do:
     1080         message now flgFileName "has disappeared.".
     1081         message now substitute( "Gracefully shutting down &1.", monName ).
     1082         leave.
     1083       end.
     1084   
     1085     run chkDbgMode ( dbgFileName, input-output dbgMode ).                 /* has the requested debug level changed?               */
     1086   
     1087     if abs( interval( now, lastRefresh, "seconds" )) < monint then        /* if the monitoring interval hasn't been reached yet   */
     1088       next.                                                               /* then loop                                            */
     1089   
     1090     lastRefresh = now.                                                    /* the last time the monitored data was refreshed       */
     1091   
     1092     run monitor.
     1093   
     1094   end.
     1095   
     1096   /* just in case...
     1097    */
     1098   
     1099   file-info:file-name = flgFileName.
     1100   if file-info:full-pathname <> ? then os-delete value( file-info:full-pathname ).
     1101   
     1102   output close.
     1103   
     1104   if dbgMode >= 3 then
     1105     do:
     1106       output to value( logFileName ) unbuffered append.
     1107       message now "==Quit==".
     1108       output close.
     1109     end.
     1110   
     1111   quit.
