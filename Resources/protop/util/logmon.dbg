        1   /* logmon.p
        2    *
        3    * mpro -p util/logmon.p
        4    *
        5    */
        6   
        7   
        8   /*******************************************************************************
        9    *******************************************************************************
       10    **                                                                           **
       11    **                                                                           **
       12    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       13    **  http://www.greenfieldtech.com                                            **
       14    **                                                                           **
       15    **  ProTop is free software; you can redistribute it and/or modify it        **
       16    **  under the terms of the GNU General Public License (GPL) as published     **
       17    **  by the Free Software Foundation; either version 2 of the License, or     **
       18    **  at your option) any later version.                                       **
       19    **                                                                           **
       20    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       21    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       22    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       23    **  for more details.                                                        **
       24    **                                                                           **
       25    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       26    **  of use and alternative licensing options for this software.              **
       27    **                                                                           **
       28    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       29    **                                                                           **
       30    **  See http://www.fsf.org for more information about the GPL.               **
       31    **                                                                           **
       32    **                                                                           **
       33    *******************************************************************************
       34    *******************************************************************************
       35    *
       36    * protop.i
       37    *
       38    * Header file for protop family of programs
       39    *
       40    *
       41    * Known Bugs & Issues:
       42    *
       43    *
       44    * To Do:
       45    *
       46    *
       47    * Author:
       48    *
       49    *      Tom Bascom, Greenfield Technologies
       50    *      http://www.greenfieldtech.com
       51    *      August 28, 2003
       52    *
       53    */
       54   
       55   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       56   &global-define  FASTLOCK        true
       57   &ELSE
       58   &global-define  FASTLOCK        false
       59   &ENDIF
       60   
       61   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       62   &global-define  OE11            "yes"
       63   &global-define  xDEBUGTT        false
       64   &ENDIF
       65   
       66   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       67   &global-define  NOSERIALIZE     serialize-hidden
       68   &ENDIF
       69   
       70   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       71   &global-define  BIGINT          int64
       72   &ELSE
       73   &global-define  BIGINT          decimal
       74   &ENDIF
       75   
       76   
       77   /* lib/v9.i
       78    *
       79    */
       80   
       81   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       82   &global-define  CPYLOB  "no"
       83   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       84   &global-define  LNGCR   character
       85   &global-define  DTZ     integer
       86   &global-define  BIGINT  decimal
       87   &ELSE
       88   &global-define  OE10    "yes"
       89   &global-define  NOW     now
       90   &global-define  LNGCR   longchar
       91   &global-define  DTZ     datetime-tz
       92   &global-define  BIGINT  int64
       93   &ENDIF
       94    
       95   
       96   /* use extended _connect fields: -client, -cache*
       97    */
       98   
       99   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      100   &global-define  CONNECTX        "yes"
      101   &ELSE
      102   &global-define  CONNECTX        "no"
      103   &ENDIF
      104   
      105   define stream inStrm.
      106   
      107   define new global shared variable dbgMode as integer no-undo initial 1.
      108   
      109   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      110    *
      111    * someday everyone will have OO and I will replace these with a gsv class
      112    * or something of that ilk
      113    *
      114    */
      115   
      116   define new global shared variable pt_shortname   as character no-undo.
      117   define new global shared variable pt_uniqName    as character no-undo.
      118   define new global shared variable pt_server      as character no-undo.
      119   define new global shared variable pt_resrcType   as character no-undo.
      120   
      121   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      122   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      123   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      124   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      125   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      126   
      127   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      128   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      129   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      130   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      131   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      132   define new global shared variable pt_ioFileName  as character no-undo.
      133   define new global shared variable pt_dfCmd       as character no-undo.
      134   
      135   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      136   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      137   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      138   
      139   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      140   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      141   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      142   
      143   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      144   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      145   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      146   
      147   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      148   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      149   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      150   
      151   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      152   
      153   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      154   
      155   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      156   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      157   
      158   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      159    * 
      160    */
      161   
      162   define new global shared variable stime as integer no-undo.                     /* start time                           */
      163   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      164   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      165   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      166   
      167   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      168   
      169                                                                                   /* corresponding to base checkpoint#    */
      170   /** Global Shared Temp Table Definitions
      171    **
      172    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      173    ** And a shared temp-table is logically the same as a db table so who really cares?
      174    **
      175    **/
      176   
      177   /* cache _File and _Index records so that we don't keep hitting the db to translate
      178    */
      179   
      180   define new global shared temp-table tt_tbl no-undo
      181     field xid      as integer                                             /* _File._File-Num              */
      182     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      183     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      184     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      185     field tblname  as character                                           /* _File._File-Name             */
      186     index xid-idx is unique primary xid.
      187   
      188   define new global shared temp-table tt_idx no-undo
      189     field xid      as integer                                             /* _Index._Idx-Num              */
      190     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      191     field idxname  as character                                           /* _Index._Idx-Name             */
      192     field idxnote  as character
      193     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      194     field tblnum   as integer                                             /* _File._File-Num              */
      195     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      196     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      197     field tblname  as character                                           /* _File._File-Name             */
      198     index xid-idx is unique primary xid.
      199   
      200   define new global shared temp-table tt_areaExtent no-undo
      201     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      202     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      203   
      204     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      205     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      206     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      207   
      208     index ae-idx is unique primary areaNum extNum.
      209   
      210   define new global shared temp-table tt_area no-undo
      211     field xid      as integer    format ">>>9"
      212     field SANum    as integer    format ">>>9"        label "#"
      213     field areaPool as character  format "x(2)"        label "BX"
      214   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      215     field SAName   as character  format "x(30)"       label "Area Name"
      216     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      217     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      218     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      219     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      220     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      221     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      222     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      223   
      224     field blkszkb as integer     format ">>9"         label "BSZ"
      225     field rpb     as integer     format ">>9"         label "RPB"
      226     field clstrsz as integer     format ">>9"         label "CSZ"
      227   
      228     field numTbls as integer     format ">>>>9"       label "#Tbls"
      229     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      230     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      231   
      232     field numExts as integer     format ">>>>9"       label "#Exts"
      233     field hasVar  as logical     format "Yes/No"      label "Var?"
      234   
      235     field xnote   as character   format "x"           label "*"
      236   
      237     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      238     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      239   
      240     index pctAlloc-idx is primary pctAlloc descending
      241     index pctLastX-idx pctLastX pctAlloc descending
      242     index allocGB-idx allocGB descending
      243     index totGB-idx totGB descending
      244     index xid-idx is unique xid
      245     index SANum-idx is unique SANum
      246     index SAName-idx is unique SAName
      247   .
      248   
      249   *** Encrypted Source ***
      250   *** Encrypted Source ***
      251   *** Encrypted Source ***
      252   *** Encrypted Source ***
      253   *** Encrypted Source ***
      254   *** Encrypted Source ***
      255   *** Encrypted Source ***
      256   *** Encrypted Source ***
      257   *** Encrypted Source ***
      258   *** Encrypted Source ***
      259   *** Encrypted Source ***
      260   *** Encrypted Source ***
      261   *** Encrypted Source ***
      262   *** Encrypted Source ***
      263   *** Encrypted Source ***
      264   *** Encrypted Source ***
      265   *** Encrypted Source ***
      266   *** Encrypted Source ***
      267   *** Encrypted Source ***
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319    
      320   
      321   /*******************************************************************************
      322    *******************************************************************************
      323    **                                                                           **
      324    **                                                                           **
      325    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      326    **  http://www.greenfieldtech.com                                            **
      327    **                                                                           **
      328    **  ProTop is free software; you can redistribute it and/or modify it        **
      329    **  under the terms of the GNU General Public License (GPL) as published     **
      330    **  by the Free Software Foundation; either version 2 of the License, or     **
      331    **  at your option) any later version.                                       **
      332    **                                                                           **
      333    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      334    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      335    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      336    **  for more details.                                                        **
      337    **                                                                           **
      338    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      339    **  of use and alternative licensing options for this software.              **
      340    **                                                                           **
      341    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      342    **                                                                           **
      343    **  See http://www.fsf.org for more information about the GPL.               **
      344    **                                                                           **
      345    **                                                                           **
      346    *******************************************************************************
      347    *******************************************************************************
      348    *
      349    * protoplib.i
      350    *
      351    * ProTop infrastructure library definitions
      352    *
      353    */
      354   
      355   function uDateTime returns integer () in super.
      356   function string2uDateTime returns integer( input p_text as character ) in super.
      357   function searchDir returns character ( input xDir as character ) in super.
      358   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      359   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      360   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      361   function myPID returns character () in super.
      362   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      363   
      364   /* end protoplib.i */
      365    
      366   
      367   /*******************************************************************************
      368    *******************************************************************************
      369    **                                                                           **
      370    **                                                                           **
      371    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      372    **  http://www.greenfieldtech.com                                            **
      373    **                                                                           **
      374    **  ProTop is free software; you can redistribute it and/or modify it        **
      375    **  under the terms of the GNU General Public License (GPL) as published     **
      376    **  by the Free Software Foundation; either version 2 of the License, or     **
      377    **  at your option) any later version.                                       **
      378    **                                                                           **
      379    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      380    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      381    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      382    **  for more details.                                                        **
      383    **                                                                           **
      384    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      385    **  of use and alternative licensing options for this software.              **
      386    **                                                                           **
      387    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      388    **                                                                           **
      389    **  See http://www.fsf.org for more information about the GPL.               **
      390    **                                                                           **
      391    **                                                                           **
      392    *******************************************************************************
      393    *******************************************************************************
      394    *
      395    * vstlib.i
      396    *
      397    * VST library definitions
      398    *
      399    */
      400   
      401   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      402   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      403   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      404   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      405   
      406   function connectFlags returns character ( input cnxId as integer ) in super.
      407   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      408   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      409   
      410   function isAIEnabled returns logical () in super.
      411   function isReplSource returns logical () in super.
      412   function isReplTarget returns logical () in super.
      413   function isBackupRunning returns logical () in super.
      414   function isWorkgroup returns logical () in super.
      415   
      416   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      417   
      418   /* end vstlib.i */
      419    
      420   
      421   function add2ds returns logical ( input h as handle ) in super.
      422   function getTempTableHandle returns handle ( input n as character ) in super.
      423   
      424   /* end protop.i */
      425    
      426   
      427   /* dbgMode = 1  minimal
      428    * dbgMode = 3  errors
      429    * dbgMode = 4  + success
      430    * dbgMode = 5  verbose details (usually overkill)
      431    */
      432   
      433   dbgMode = 4.
      434   
      435   define new global shared variable custId as character no-undo.
      436   
      437   define variable monName      as character   no-undo.
      438   define variable tick         as decimal     no-undo initial 0.5.        /* clock tick - 1/2 sec rounds up to 1 prior to OE11    */
      439   define variable monint       as integer     no-undo initial 5.          /* monitor refresh interval                             */
      440   
      441   define variable logFileName  as character   no-undo.
      442   define variable flgFileName  as character   no-undo.
      443   define variable dbgFileName  as character   no-undo.
      444   
      445   /* generic config file definition
      446    */
      447   
      448   define temp-table tt_config no-undo
      449   
      450     field cfgId   as character                                            /* standard first field, must be unique                 */
      451   
      452     /* user defined config fields
      453      *
      454      * if these are *all* character fields then comments in the config file
      455      * will not throw specious "Invalid character..." errors -- if you need
      456      * other data types just be aware that some of the parse errors may be
      457      * false alarms
      458      */
      459   
      460     field logType as character                                            /* text, dblog, appsrv...                               */
      461     field logTemplate as character format "x(60)"                         /* the full path name of the target log file            */
      462     field strtPad as character                                            /* how far to look backwards at startup?                */
      463   
      464     field logName as character                                            /* the actual log name found with os-dir                */
      465   
      466     index cfgId-idx is primary unique cfgId                               /* standard primary, unique index                       */
      467   
      468     /* user defined config indexes (if any)
      469      */
      470   
      471     index logTemplate-idx is unique logTemplate                                   /* logTemplate must be unique                           */
      472   
      473   .
      474   
      475   /********************************************************************************************************************************/
      476   
      477   /* this is the business end of things... all code specific to this monitor should go in here
      478    *
      479    */
      480   
      481   run util/log_oedb.p persistent.                                         /* log handler for openedge db .lg files                */
      482   run util/log_ubrk.p persistent.                                         /* log handler for ubroker managed logs                 */
      483   run util/log_text.p persistent.                                         /* log handler for generic text logs                    */
      484   
      485   
      486   /*** super-procedure? ***/
      487   
      488   define temp-table tt_logInfo no-undo
      489     field logName   as character                                          /* the log file being monitored                         */
      490     field logOffset as int64                                              /* offset that we have read up to                       */
      491     field strtPad   as integer                                            /* how far to look backwards at startup?                */
      492     index logName-idx is primary unique logName
      493   .
      494   
      495   procedure scanLog:
      496   
      497     define input parameter lgName as character no-undo.
      498     define input parameter lgType as character no-undo.
      499   
      500     define variable eof      as int64 no-undo.
      501     define variable offset   as int64 no-undo.
      502     define variable lgLine   as character no-undo.
      503     define variable xStatus  as character no-undo.
      504   
      505     define variable i as integer no-undo.
      506   
      507     find first tt_logInfo where tt_logInfo.logName = lgName no-error.
      508     if not available tt_logInfo then
      509       do:
      510         find tt_config where tt_config.logTemplate = lgName no-error.
      511         create tt_logInfo.
      512         assign
      513           tt_logInfo.logOffset = -1                                       /* if set to -1 we are in initialization mode           */
      514           tt_logInfo.logName   = lgName
      515           tt_logInfo.strtPad   = ( if available tt_config then integer( tt_config.strtPad ) else 0 )
      516         .
      517       end.
      518   
      519     file-info:file-name = lgName.
      520     if file-info:full-pathname = ? then
      521       do:
      522         message now substitute( "scanLog: &1 is missing!", lgName ).
      523         return.
      524       end.
      525   
      526     if (( index( file-info:file-type, "F" ) < 1 ) or ( index( file-info:file-type, "R" ) < 1 )) then
      527       do:
      528         message now substitute( "scanLog: &1 is not readable a log file: &2", lgName, file-info:file-type ).
      529         return.
      530       end.
      531   
      532     /* make sure that the rule set for this type of log is up to date
      533      */
      534   
      535     publish lgType + "_rules".
      536   
      537     /* ready to scan!
      538      */
      539   
      540     if dbgMode >= 7 then message now substitute( "Scanning &1:", lgName ).
      541   
      542     input stream inStrm from value( lgName ).
      543   
      544     offset = tt_logInfo.logOffset.
      545     seek stream inStrm to end.
      546     eof = seek( inStrm ).
      547   
      548     /* when we first start, backup from eof -- otherwise we may
      549      * not have a complete line of text to work with.  it can
      550      * also be helpful to potentially review messages that might
      551      * have appeared just prior to starting
      552      */
      553   
      554     if offset < 0 then                                                    /* will be -1 on initial startup                        */
      555       offset = max( 0, eof - max( 2048, tt_logInfo.strtPad )).            /* if possible backup at least 2048 bytes on init       */
      556   
      557     if offset > eof then                                                  /* lg file must have been truncated...                  */
      558       do:
      559         offset = 0.
      560         message now substitute( "scanLog: &1 seems to have been truncated", lgName ).
      561       end.
      562   
      563     if offset < eof then                                                  /* catch up!                                            */
      564       do:
      565   
      566         seek stream inStrm to offset.                                             /* reposition to last read offset                       */
      567   
      568         i = 0.
      569         read_lg: do while true:                                           /* read log lines                                       */
      570   
      571           lgLine = "".
      572   
      573           do on error  undo, leave read_lg on endkey undo, leave read_lg:
      574             import stream inStrm unformatted lgLine.
      575           end.
      576   
      577           i = i + 1.
      578           if i modulo 100000 = 0 then message now substitute( "Scanning &1.lg line: &2", lgName, i ).
      579           offset = seek( inStrm ).
      580   
      581           /* if this is the initial reading of the log file then
      582            * catch up to the present without looking at everything
      583            */
      584   
      585           if tt_logInfo.logOffset = -1                                    /* -1 means that startup is happening                   */
      586             and offset <= ( eof - tt_logInfo.strtPad ) then next read_lg.
      587   
      588           if i >= 10000 then leave read_lg.                               /* read no more than 10,000 lines per scanLog() call    */
      589   
      590           /* parse the log file line
      591            *
      592            */
      593   
      594           publish lgType + "_line" ( lgLine, lgType, lgName, input-output xStatus ).
      595   
      596         end.
      597   
      598         tt_logInfo.logOffset = offset.
      599   
      600       end.
      601   
      602     input stream inStrm close.
      603   
      604     if dbgMode >= 6 then message now substitute( "Scanned &1 lines in &2", i, lgName ).
      605   
      606     return.
      607   
      608   end.
      609   
      610   /*** end super-procedure candidate ***/
      611   
      612   
      613   
      614   function chkLogTemplate returns character ( template as character ):
      615   
      616     define variable fileName     as character no-undo.
      617     define variable logPath      as character no-undo.
      618     define variable xName        as character no-undo format "x(60)".
      619   
      620     if index( template, "*" ) = 0 then
      621       return template.
      622   
      623     logPath  = substring( template, 1, r-index( template, "/" ) - 1 ).
      624   
      625     input stream inStrm from os-dir( logPath ) no-attr-list.
      626     repeat:
      627       import stream inStrm ^ xName.
      628       if xName matches template then
      629         fileName = max( xName, fileName ).
      630     end.
      631     input stream inStrm close.
      632   
      633     return fileName.
      634   
      635   end.
      636   
      637   
      638   procedure monitor:
      639   
      640     define variable oldName     as character no-undo.
      641     define variable logName     as character no-undo.
      642     define variable logBaseName as character no-undo.
      643   
      644     define variable i as integer no-undo.
      645   
      646     run chkConfig.
      647   
      648     for each tt_config:
      649       i = i + 1.
      650     end.
      651   
      652     if dbgMode >= 6 then message now substitute( "monitor() &1 config records found", i ).
      653   
      654     oldName = pt_shortName.
      655   
      656     for each tt_config:
      657   
      658       logName = chkLogTemplate( tt_config.logTemplate ).
      659       logBaseName = substring( logName, r-index( logName, "/" ) + 1 ).
      660   
      661       pt_shortName = logBaseName.
      662       pt_shortName = "logmon".
      663   
      664       if dbgMode >= 5 then
      665         message now substitute( "monitoring &1 &2 &3", tt_config.cfgId, tt_config.logType, tt_config.logTemplate ).
      666   
      667       run scanLog( logName, tt_config.logType ).
      668   
      669     end.
      670   
      671     pt_shortName = oldName.
      672   
      673     return.
      674   
      675   end.
      676   
      677   
      678   /********************************************************************************************************************************/
      679   
      680   /* most code below is standard and should not need modification
      681    */
      682   
      683   define variable cfgFile as character no-undo.
      684   define variable cfgDate as date      no-undo.
      685   define variable cfgTime as integer   no-undo.
      686   
      687   /* chkConfig
      688    *
      689    * reads a generic etc/monName.cfg file into tt_config as defined above
      690    *   - will notice if the file time-stamp changes and re-read the config
      691    *   - eliminates blank lines and treats lines starting with "#" as comments
      692    *   - only requires the first field to be a unique char id field called "cfgId"
      693    *
      694    */
      695   
      696   define variable firstCfgCheck as logical initial yes.
      697   
      698   procedure chkConfig:
      699   
      700     define variable i as integer no-undo.
      701   
      702     if cfgFile = "" or cfgFile = ? then
      703       do:
      704         if dbgMode >= 3 then message now "looking for:" substitute( "&1/&2.&3.&4", "etc", monName, pt_shortname, "cfg" ).
      705         file-info:file-name = substitute( "&1/&2.&3.&4", "etc", monName, pt_shortname, "cfg" ).
      706         if file-info:full-pathname = ? then
      707           do:
      708             if dbgMode >= 3 then message now "looking for:" substitute( "&1/&2.&3", "etc", monName, "cfg" ).
      709             file-info:file-name = substitute( "&1/&2.&3", "etc", monName, "cfg" ).
      710           end.
      711         if file-info:full-pathname <> ? then
      712           do:
      713             cfgFile = file-info:full-pathname.
      714             if dbgMode >= 3 then message now "using:" file-info:full-pathname.
      715             firstCfgCheck = yes.
      716           end.
      717          else
      718           do:
      719             if firstCfgCheck then
      720               do:
      721                 if dbgMode >= 3 then message now "no config file found, using internal default settings".
      722                 firstCfgCheck = no.
      723               end.
      724             return.
      725           end.
      726       end.
      727   
      728     file-info:file-name = cfgFile.                                /* no cfgFile was found or it has disappeared while running     */
      729     if file-info:full-pathname = ? then
      730       do:
      731         cfgFile = "".
      732         return.
      733       end.
      734   
      735     if cfgDate <> file-info:file-mod-date or cfgTime <> file-info:file-mod-time or file-info:full-pathname = ? then
      736       do:
      737   
      738         assign
      739           cfgDate = file-info:file-mod-date
      740           cfgTime = file-info:file-mod-time
      741         .
      742   
      743         empty temp-table tt_config.
      744   
      745         if file-info:full-pathname = ? then
      746           do:
      747             message now "No config file:" cfgFile.
      748             return.
      749           end.
      750   
      751         if dbgMode >= 3 then
      752           message now "Parsing config file:" cfgFile.
      753   
      754         input stream  inStrm from value( file-info:full-pathname ).
      755         load_cfg: repeat:
      756   
      757           do on error undo, leave load_cfg:
      758   
      759             create tt_config.
      760             tt_config.cfgId = "".
      761   
      762             import stream inStrm
      763               tt_config.cfgId
      764               tt_config.logType
      765               tt_config.logTemplate
      766               tt_config.strtPad
      767             no-error.
      768   
      769           if tt_config.cfgId = "" or tt_config.cfgId begins "#" then
      770             do:
      771               delete tt_config.
      772               next load_cfg.
      773             end.
      774   
      775             if error-status:num-messages > 0 then
      776               do:
      777                 do i = 1 to error-status:num-messages:
      778                   message now error-status:get-message(i).
      779                 end.
      780                 delete tt_config.
      781                 next load_cfg.
      782               end.
      783   
      784           end.
      785   
      786           tt_config.logName = "".                                 /*  this field is not valid when read from a .cfg file          */
      787   
      788         end.
      789         input stream inStrm close.
      790   
      791         for each tt_config where tt_config.cfgId = "" or tt_config.cfgId begins "#":
      792           delete tt_config.
      793         end.
      794   
      795         message now "Config file," cfgFile "contents:".
      796         for each tt_config:
      797           display tt_config with width 132.
      798         end.
      799   
      800       end.
      801   
      802     return.
      803   
      804   end.
      805   
      806   
      807   /* main body
      808    *
      809    */
      810   
      811   define variable lastRefresh  as datetime-tz no-undo.                    /* when was the last refresh?                           */
      812   
      813   define variable XID          as character   no-undo.                    /* eXtended unique ID                                   */
      814   
      815   run lib/protoplib.p persistent.                                         /* load protop infrastructure library                   */
      816   run lib/protop-cfg.p persistent.                                        /* initialize protop environment                        */
      817   
      818   run getMonName ( input-output monName ).
      819   
      820   file-info:file-name = pt_tmpdir.                                        /* make certain that we have a temp directory!          */
      821   if file-info:full-pathname = ? then
      822     os-command silent value( "mkdir " + pt_tmpdir ).
      823   
      824   file-info:file-name = pt_logdir.                                        /* make certain that we have a log directory!           */
      825   if file-info:full-pathname = ? then
      826     os-command silent value( "mkdir " + pt_logdir ).
      827   
      828   run ssg/sausage02.p persistent.                                         /* sausage lib                                          */
      829   run ssg/sausage04.p persistent.                                         /* sausage lib                                          */
      830   
      831   /*** unlike most monitors "logmon" does not have a db connection...     /* XID is therefore blank!                              */
      832    ***
      833   run lib/vstlib.p persistent.                                            /* db related infrastructure                            */
      834   run dbGUID ( pt_shortname, output XID ).                                /* every db needs a unique id                           */
      835    ***
      836    ***/
      837   
      838   run custId( output custId ).
      839   
      840   if XID <> "" then XID = "." + XID.                                      /* just in case                                         */
      841   
      842   assign
      843     logFileName = substitute( "&1/&2&3.&4", pt_logdir, monName, XID, "log" )
      844     flgFileName = substitute( "&1/&2&3.&4", pt_tmpdir, monName, XID, "flg" )
      845     dbgFileName = substitute( "&1/&2&3.&4", pt_tmpdir, monName, XID, "dbg" )
      846   .
      847   
      848   *** Encrypted Source ***
      849   *** Encrypted Source ***
      850   *** Encrypted Source ***
      851   *** Encrypted Source ***
      852   *** Encrypted Source ***
      853   *** Encrypted Source ***
      854   *** Encrypted Source ***
      855   *** Encrypted Source ***
      856   *** Encrypted Source ***
      857   *** Encrypted Source ***
      858   *** Encrypted Source ***
      859   *** Encrypted Source ***
      860   *** Encrypted Source ***
      861   *** Encrypted Source ***
      862   *** Encrypted Source ***
      863   *** Encrypted Source ***
      864   *** Encrypted Source ***
      865   *** Encrypted Source ***
      866   *** Encrypted Source ***
      867   *** Encrypted Source ***
      868   *** Encrypted Source ***
      869   *** Encrypted Source ***
      870   *** Encrypted Source ***
      871                                                           /* alert.cfg & alert library                            */
      872   
      873   run lib/mailx.p persistent.
      874   
      875   run mkFlag ( flgFileName ).                                             /* create a flag file without a db connection           */
      876   
      877   output to value( logFileName ) unbuffered append.                       /* if a 2nd copy starts, try to make it obvious         */
      878   
      879   lastRefresh = now.
      880   message now substitute( "Starting &1...", monName ).
      881   
      882   /* the monitoring loop
      883    *
      884    */
      885   
      886   do while true:
      887   
      888     pause tick no-message.                                                /* check flag and debug level while waiting             */
      889   
      890     if lastkey > 0 and lastkey <> 32 then leave.                          /* useful if we are running interactively               */
      891   
      892     file-info:file-name = flgFileName.                                    /* are we being politely asked to stop?                 */
      893     if file-info:full-pathname = ? then                                   /* (if the flag disappears we are bing asked to stop)   */
      894       do:
      895         message now flgFileName "has disappeared.".
      896         message now substitute( "Gracefully shutting down &1.", monName ).
      897         leave.
      898       end.
      899   
      900     run chkDbgMode ( dbgFileName, input-output dbgMode ).                 /* has the requested debug level changed?               */
      901   
      902     if abs( interval( now, lastRefresh, "seconds" )) < monint then        /* if the monitoring interval hasn't been reached yet   */
      903       next.                                                               /* then loop                                            */
      904   
      905     lastRefresh = now.                                                    /* the last time the monitored data was refreshed       */
      906   
      907     run monitor.
      908   
      909   end.
      910   
      911   /* just in case...
      912    */
      913   
      914   file-info:file-name = flgFileName.
      915   if file-info:full-pathname <> ? then os-delete value( file-info:full-pathname ).
      916   
      917   output close.
      918   
      919   if dbgMode >= 5 then
      920     do:
      921       output to value( logFileName ) unbuffered append.
      922       message now "==Quit==".
      923       output close.
      924     end.
      925   
      926   quit.
