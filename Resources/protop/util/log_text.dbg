        1   /* log_text.p
        2    *
        3    * rule set for generic text logs
        4    *
        5    * i.e.
        6    *  001 17 begins   trax       alert                    # starting at position 17 if the line begins "trax"
        7    *  002  0 index    "audit "   alert                    # starting at position 0 if the line contains "audit "
        8    *  003  0 contains " 2*rhsmd" alert                    # starting at position 0 if the line matches "* 2*rhsmd*"
        9    *
       10    */
       11   
       12   
       13   /*******************************************************************************
       14    *******************************************************************************
       15    **                                                                           **
       16    **                                                                           **
       17    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       18    **  http://www.greenfieldtech.com                                            **
       19    **                                                                           **
       20    **  ProTop is free software; you can redistribute it and/or modify it        **
       21    **  under the terms of the GNU General Public License (GPL) as published     **
       22    **  by the Free Software Foundation; either version 2 of the License, or     **
       23    **  at your option) any later version.                                       **
       24    **                                                                           **
       25    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       26    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       27    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       28    **  for more details.                                                        **
       29    **                                                                           **
       30    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       31    **  of use and alternative licensing options for this software.              **
       32    **                                                                           **
       33    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       34    **                                                                           **
       35    **  See http://www.fsf.org for more information about the GPL.               **
       36    **                                                                           **
       37    **                                                                           **
       38    *******************************************************************************
       39    *******************************************************************************
       40    *
       41    * protop.i
       42    *
       43    * Header file for protop family of programs
       44    *
       45    *
       46    * Known Bugs & Issues:
       47    *
       48    *
       49    * To Do:
       50    *
       51    *
       52    * Author:
       53    *
       54    *      Tom Bascom, Greenfield Technologies
       55    *      http://www.greenfieldtech.com
       56    *      August 28, 2003
       57    *
       58    */
       59   
       60   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       61   &global-define  FASTLOCK        true
       62   &ELSE
       63   &global-define  FASTLOCK        false
       64   &ENDIF
       65   
       66   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       67   &global-define  OE11            "yes"
       68   &global-define  xDEBUGTT        false
       69   &ENDIF
       70   
       71   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       72   &global-define  NOSERIALIZE     serialize-hidden
       73   &ENDIF
       74   
       75   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       76   &global-define  BIGINT          int64
       77   &ELSE
       78   &global-define  BIGINT          decimal
       79   &ENDIF
       80   
       81   
       82   /* lib/v9.i
       83    *
       84    */
       85   
       86   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       87   &global-define  CPYLOB  "no"
       88   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       89   &global-define  LNGCR   character
       90   &global-define  DTZ     integer
       91   &global-define  BIGINT  decimal
       92   &ELSE
       93   &global-define  OE10    "yes"
       94   &global-define  NOW     now
       95   &global-define  LNGCR   longchar
       96   &global-define  DTZ     datetime-tz
       97   &global-define  BIGINT  int64
       98   &ENDIF
       99    
      100   
      101   /* use extended _connect fields: -client, -cache*
      102    */
      103   
      104   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      105   &global-define  CONNECTX        "yes"
      106   &ELSE
      107   &global-define  CONNECTX        "no"
      108   &ENDIF
      109   
      110   define stream inStrm.
      111   
      112   define new global shared variable dbgMode as integer no-undo initial 1.
      113   
      114   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      115    *
      116    * someday everyone will have OO and I will replace these with a gsv class
      117    * or something of that ilk
      118    *
      119    */
      120   
      121   define new global shared variable pt_shortname   as character no-undo.
      122   define new global shared variable pt_uniqName    as character no-undo.
      123   define new global shared variable pt_server      as character no-undo.
      124   define new global shared variable pt_resrcType   as character no-undo.
      125   
      126   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      127   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      128   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      129   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      130   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      131   
      132   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      133   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      134   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      135   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      136   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      137   define new global shared variable pt_ioFileName  as character no-undo.
      138   define new global shared variable pt_dfCmd       as character no-undo.
      139   
      140   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      141   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      142   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      143   
      144   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      145   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      146   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      147   
      148   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      149   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      150   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      151   
      152   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      153   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      154   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      155   
      156   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      157   
      158   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      159   
      160   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      161   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      162   
      163   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      164    * 
      165    */
      166   
      167   define new global shared variable stime as integer no-undo.                     /* start time                           */
      168   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      169   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      170   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      171   
      172   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      173   
      174                                                                                   /* corresponding to base checkpoint#    */
      175   /** Global Shared Temp Table Definitions
      176    **
      177    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      178    ** And a shared temp-table is logically the same as a db table so who really cares?
      179    **
      180    **/
      181   
      182   /* cache _File and _Index records so that we don't keep hitting the db to translate
      183    */
      184   
      185   define new global shared temp-table tt_tbl no-undo
      186     field xid      as integer                                             /* _File._File-Num              */
      187     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      188     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      189     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      190     field tblname  as character                                           /* _File._File-Name             */
      191     index xid-idx is unique primary xid.
      192   
      193   define new global shared temp-table tt_idx no-undo
      194     field xid      as integer                                             /* _Index._Idx-Num              */
      195     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      196     field idxname  as character                                           /* _Index._Idx-Name             */
      197     field idxnote  as character
      198     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      199     field tblnum   as integer                                             /* _File._File-Num              */
      200     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      201     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      202     field tblname  as character                                           /* _File._File-Name             */
      203     index xid-idx is unique primary xid.
      204   
      205   define new global shared temp-table tt_areaExtent no-undo
      206     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      207     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      208   
      209     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      210     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      211     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      212   
      213     index ae-idx is unique primary areaNum extNum.
      214   
      215   define new global shared temp-table tt_area no-undo
      216     field xid      as integer    format ">>>9"
      217     field SANum    as integer    format ">>>9"        label "#"
      218     field areaPool as character  format "x(2)"        label "BX"
      219   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      220     field SAName   as character  format "x(30)"       label "Area Name"
      221     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      222     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      223     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      224     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      225     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      226     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      227     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      228   
      229     field blkszkb as integer     format ">>9"         label "BSZ"
      230     field rpb     as integer     format ">>9"         label "RPB"
      231     field clstrsz as integer     format ">>9"         label "CSZ"
      232   
      233     field numTbls as integer     format ">>>>9"       label "#Tbls"
      234     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      235     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      236   
      237     field numExts as integer     format ">>>>9"       label "#Exts"
      238     field hasVar  as logical     format "Yes/No"      label "Var?"
      239   
      240     field xnote   as character   format "x"           label "*"
      241   
      242     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      243     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      244   
      245     index pctAlloc-idx is primary pctAlloc descending
      246     index pctLastX-idx pctLastX pctAlloc descending
      247     index allocGB-idx allocGB descending
      248     index totGB-idx totGB descending
      249     index xid-idx is unique xid
      250     index SANum-idx is unique SANum
      251     index SAName-idx is unique SAName
      252   .
      253   
      254   *** Encrypted Source ***
      255   *** Encrypted Source ***
      256   *** Encrypted Source ***
      257   *** Encrypted Source ***
      258   *** Encrypted Source ***
      259   *** Encrypted Source ***
      260   *** Encrypted Source ***
      261   *** Encrypted Source ***
      262   *** Encrypted Source ***
      263   *** Encrypted Source ***
      264   *** Encrypted Source ***
      265   *** Encrypted Source ***
      266   *** Encrypted Source ***
      267   *** Encrypted Source ***
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319   *** Encrypted Source ***
      320   *** Encrypted Source ***
      321   *** Encrypted Source ***
      322   *** Encrypted Source ***
      323   *** Encrypted Source ***
      324    
      325   
      326   /*******************************************************************************
      327    *******************************************************************************
      328    **                                                                           **
      329    **                                                                           **
      330    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      331    **  http://www.greenfieldtech.com                                            **
      332    **                                                                           **
      333    **  ProTop is free software; you can redistribute it and/or modify it        **
      334    **  under the terms of the GNU General Public License (GPL) as published     **
      335    **  by the Free Software Foundation; either version 2 of the License, or     **
      336    **  at your option) any later version.                                       **
      337    **                                                                           **
      338    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      339    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      340    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      341    **  for more details.                                                        **
      342    **                                                                           **
      343    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      344    **  of use and alternative licensing options for this software.              **
      345    **                                                                           **
      346    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      347    **                                                                           **
      348    **  See http://www.fsf.org for more information about the GPL.               **
      349    **                                                                           **
      350    **                                                                           **
      351    *******************************************************************************
      352    *******************************************************************************
      353    *
      354    * protoplib.i
      355    *
      356    * ProTop infrastructure library definitions
      357    *
      358    */
      359   
      360   function uDateTime returns integer () in super.
      361   function string2uDateTime returns integer( input p_text as character ) in super.
      362   function searchDir returns character ( input xDir as character ) in super.
      363   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      364   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      365   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      366   function myPID returns character () in super.
      367   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      368   
      369   /* end protoplib.i */
      370    
      371   
      372   /*******************************************************************************
      373    *******************************************************************************
      374    **                                                                           **
      375    **                                                                           **
      376    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      377    **  http://www.greenfieldtech.com                                            **
      378    **                                                                           **
      379    **  ProTop is free software; you can redistribute it and/or modify it        **
      380    **  under the terms of the GNU General Public License (GPL) as published     **
      381    **  by the Free Software Foundation; either version 2 of the License, or     **
      382    **  at your option) any later version.                                       **
      383    **                                                                           **
      384    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      385    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      386    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      387    **  for more details.                                                        **
      388    **                                                                           **
      389    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      390    **  of use and alternative licensing options for this software.              **
      391    **                                                                           **
      392    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      393    **                                                                           **
      394    **  See http://www.fsf.org for more information about the GPL.               **
      395    **                                                                           **
      396    **                                                                           **
      397    *******************************************************************************
      398    *******************************************************************************
      399    *
      400    * vstlib.i
      401    *
      402    * VST library definitions
      403    *
      404    */
      405   
      406   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      407   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      408   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      409   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      410   
      411   function connectFlags returns character ( input cnxId as integer ) in super.
      412   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      413   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      414   
      415   function isAIEnabled returns logical () in super.
      416   function isReplSource returns logical () in super.
      417   function isReplTarget returns logical () in super.
      418   function isBackupRunning returns logical () in super.
      419   function isWorkgroup returns logical () in super.
      420   
      421   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      422   
      423   /* end vstlib.i */
      424    
      425   
      426   function add2ds returns logical ( input h as handle ) in super.
      427   function getTempTableHandle returns handle ( input n as character ) in super.
      428   
      429   /* end protop.i */
      430    
      431   
      432   /* standard handlers
      433    *
      434    */
      435   
      436   subscribe to "text_rules"    anywhere run-procedure "chkRuleCfg".       /* load the rules related to this log type              */
      437   subscribe to "text_line"     anywhere run-procedure "parse_line".       /* parse the raw log line                               */
      438   
      439   /* the rule set
      440    *
      441    */
      442   
      443   define temp-table tt_ruleCfg
      444     field ruleId     as character                                         /* unique id                                            */
      445     field ruleOffset as character                                         /* skip N chars into line                               */
      446     field ruleOper   as character                                         /* matching operation                                   */
      447     field ruleText   as character format "x(30)"                          /* target text to compare                               */
      448     field ruleAction as character                                         /* publish this!                                        */
      449     field nagFreq    as character                                         /* how often should we nag?                             */
      450     index ruleId-idx is primary unique ruleId
      451   .
      452   
      453   define variable ruleCfgFile as character no-undo                        /* name of the config file holding the rules            */
      454     initial "etc/log_text.cfg"
      455   .
      456   
      457   define variable ruleCfgDate as date      no-undo.                       /* last date that the rules changed                     */
      458   define variable ruleCfgTime as integer   no-undo.                       /* last date that the rules changed                     */
      459   
      460   define variable alertTempl as character no-undo
      461     initial "[&1]~n[server: &2]~n[&3]"
      462   .
      463   
      464   session:add-super-procedure( this-procedure ).
      465   
      466   return.
      467   
      468   
      469   /* does a string end with another string?
      470    *
      471    */
      472   
      473   function ends returns logical ( input s as character, input t as character ):
      474     return ( r-index( s, t ) = (( length( s ) - length( t )) + 1 )).
      475   end.
      476   
      477   
      478   /* is it ok to act on this?  or have we nagged enough?
      479    *
      480    */
      481   
      482   define temp-table tt_nagTracker
      483     field ruleId     as character
      484     field lastNag    as datetime
      485     index ruleId-idx is primary unique ruleId
      486   .
      487   
      488   function chkNag returns logical ( input rid as character, input n as integer ):
      489   
      490     if n <= 0  then return yes.                                           /* always report this event                             */
      491   
      492     find tt_nagTracker where tt_nagTracker.ruleId = rid no-error.
      493     if not available tt_nagTracker then
      494       do:
      495         create tt_nagTracker.
      496         assign
      497           tt_nagTracker.ruleId  = rid
      498           tt_nagTracker.lastNag = now
      499         .
      500         return yes.
      501       end.
      502   
      503     if interval( now, tt_nagTracker.lastNag, "seconds" ) < n then
      504       return no.
      505      else
      506       do:
      507         tt_nagTracker.lastNag = now.
      508         return yes.
      509       end.
      510   
      511   end.
      512   
      513   
      514   /* check the rule configuration, (re)load if necessary
      515    *
      516    * this will work with any rule configuration file that follows the standard pattern:
      517    *   - first column is ruleId, character, unique
      518    *   - as many additional fields as needed
      519    *   - # is for comments
      520    *   - will be reloaded on any change
      521    */
      522   
      523   procedure chkRuleCfg:
      524   
      525     define variable i as integer no-undo.
      526   
      527     file-info:file-name = ruleCfgFile.
      528   
      529     if ruleCfgDate <> file-info:file-mod-date or ruleCfgTime <> file-info:file-mod-time or file-info:full-pathname = ? then
      530       do:
      531   
      532         assign
      533           ruleCfgDate = file-info:file-mod-date
      534           ruleCfgTime = file-info:file-mod-time
      535         .
      536   
      537         empty temp-table tt_ruleCfg.
      538   
      539         if file-info:full-pathname = ? then
      540           do:
      541             message now "No config file:" ruleCfgFile.
      542             return.
      543           end.
      544   
      545         if dbgMode >= 3 then
      546           message now "Parsing config file:" ruleCfgFile.
      547   
      548         input from value( file-info:full-pathname ).
      549         load_cfg: repeat:
      550   
      551           do on error undo, leave load_cfg:
      552   
      553             create tt_ruleCfg.
      554             tt_ruleCfg.ruleId = "".
      555   
      556             import tt_ruleCfg no-error.
      557   
      558             if error-status:num-messages > 0 then
      559               do:
      560                 do i = 1 to error-status:num-messages:
      561                   message now error-status:get-message(i).
      562                 end.
      563                 delete tt_ruleCfg.
      564                 next load_cfg.
      565               end.
      566   
      567           end.
      568   
      569           if tt_ruleCfg.ruleId = "" or tt_ruleCfg.ruleId begins "#" then
      570             delete tt_ruleCfg.
      571   
      572         end.
      573         input close.
      574   
      575         for each tt_ruleCfg where tt_ruleCfg.ruleId = "" or tt_ruleCfg.ruleId begins "#":
      576           delete tt_ruleCfg.
      577         end.
      578   
      579         for each tt_ruleCfg where tt_ruleCfg.ruleAction = "ignore" or tt_ruleCfg.ruleAction = "":
      580           delete tt_ruleCfg.
      581         end.
      582   
      583         if dbgMode >= 3 then
      584           do:
      585             message now "Config file," ruleCfgFile "contents:".
      586             for each tt_ruleCfg:
      587               display tt_ruleCfg with width 132.
      588             end.
      589           end.
      590   
      591       end.
      592   
      593     return.
      594   
      595   end.
      596   
      597   
      598   /* handle log messages - taking advantage of the known structure of those messages
      599    *
      600    */
      601   
      602   procedure parse_line:
      603   
      604     define input        parameter xLine   as character no-undo.
      605     define input        parameter lgType  as character no-undo.
      606     define input        parameter lgName  as character no-undo.
      607     define input-output parameter xStatus as character no-undo.
      608   
      609     define variable m as character no-undo.                               /* message being examined                               */
      610     define variable x as logical   no-undo.                               /* pass or fail?                                        */
      611   
      612     if dbgMode >= 9 then message now lgType lgName xLine.
      613   
      614     rule_loop: for each tt_ruleCfg:
      615   
      616       assign
      617         x = no
      618         m = substring( xLine, max( 1, integer( tt_ruleCfg.ruleOffset )))
      619       .
      620   
      621       case tt_ruleCfg.ruleOper:
      622   
      623         when "begins" then
      624           do:
      625             x = ( m begins tt_ruleCfg.ruleText ).
      626             if dbgMode >= 8 then message now lgType lgName "begins" tt_ruleCfg.ruleText x skip xLine skip m.
      627           end.
      628   
      629         when "ends" then
      630           do:
      631             x = ends( trim( m ), tt_ruleCfg.ruleText ).
      632             if dbgMode >= 8 then message now lgType lgName "ends" tt_ruleCfg.ruleText x skip xLine skip m.
      633           end.
      634   
      635         when "index" then
      636           do:
      637             x = ( index( m, tt_ruleCfg.ruleText ) > 0 ).
      638             if dbgMode >= 8 then message now lgType lgName "index" tt_ruleCfg.ruleText x skip xLine skip m.
      639           end.
      640   
      641         when "contains" then
      642           do:
      643             x = ( m matches ( "*" + tt_ruleCfg.ruleText + "*" )).
      644             if dbgMode >= 8 then message now lgType lgName "contains" tt_ruleCfg.ruleText x skip xLine skip m.
      645           end.
      646   
      647       end.
      648   
      649       if x = yes and chkNag( tt_ruleCfg.ruleId, integer( tt_ruleCfg.nagFreq )) = yes then
      650         do:
      651   
      652           run doAlert ( tt_ruleCfg.ruleAction, tt_ruleCfg.ruleId, lgName, input-output xStatus, xLine, tt_ruleCfg.ruleOper, tt_ruleCfg.ruleText ).
      653   
      654           /* leave rule_loop. */  /* first one wins? or process them all? */
      655   
      656         end.
      657   
      658     end.
      659   
      660     return.
      661   
      662   end.
      663   
      664   
      665   procedure doAlert:
      666   
      667     define input        parameter rAction as character no-undo.
      668     define input        parameter rid     as character no-undo.
      669     define input        parameter lgName  as character no-undo.
      670     define input-output parameter xStatus as character no-undo.
      671     define input        parameter xLine   as character no-undo.
      672     define input        parameter xOper   as character no-undo.
      673     define input        parameter xText   as character no-undo.
      674   
      675     define variable msgTxt as character no-undo.
      676   
      677     if dbgMode >= 4 then message now rAction + ":" lgName xOper xText xLine.
      678   
      679     msgTxt = substitute(  'log text &1 "&2"~n&3', xOper, xText, xLine ).
      680   
      681     msgTxt = msgTxt + "~n" + substitute( alertTempl, now, pt_server, lgName ).
      682   
      683     publish rAction ( rid, msgTxt ).
      684   
      685     return.
      686   
      687   end.
