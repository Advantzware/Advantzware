        1   /* ptsetvar.p
        2    *
        3    * prompt the user for various settings that do not require a db connection
        4    *
        5    */
        6   
        7   
        8   /*******************************************************************************
        9    *******************************************************************************
       10    **                                                                           **
       11    **                                                                           **
       12    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       13    **  http://www.greenfieldtech.com                                            **
       14    **                                                                           **
       15    **  ProTop is free software; you can redistribute it and/or modify it        **
       16    **  under the terms of the GNU General Public License (GPL) as published     **
       17    **  by the Free Software Foundation; either version 2 of the License, or     **
       18    **  at your option) any later version.                                       **
       19    **                                                                           **
       20    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       21    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       22    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       23    **  for more details.                                                        **
       24    **                                                                           **
       25    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       26    **  of use and alternative licensing options for this software.              **
       27    **                                                                           **
       28    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       29    **                                                                           **
       30    **  See http://www.fsf.org for more information about the GPL.               **
       31    **                                                                           **
       32    **                                                                           **
       33    *******************************************************************************
       34    *******************************************************************************
       35    *
       36    * protop.i
       37    *
       38    * Header file for protop family of programs
       39    *
       40    *
       41    * Known Bugs & Issues:
       42    *
       43    *
       44    * To Do:
       45    *
       46    *
       47    * Author:
       48    *
       49    *      Tom Bascom, Greenfield Technologies
       50    *      http://www.greenfieldtech.com
       51    *      August 28, 2003
       52    *
       53    */
       54   
       55   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       56   &global-define  FASTLOCK        true
       57   &ELSE
       58   &global-define  FASTLOCK        false
       59   &ENDIF
       60   
       61   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       62   &global-define  OE11            "yes"
       63   &global-define  xDEBUGTT        false
       64   &ENDIF
       65   
       66   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       67   &global-define  NOSERIALIZE     serialize-hidden
       68   &ENDIF
       69   
       70   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       71   &global-define  BIGINT          int64
       72   &ELSE
       73   &global-define  BIGINT          decimal
       74   &ENDIF
       75   
       76   
       77   /* lib/v9.i
       78    *
       79    */
       80   
       81   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       82   &global-define  CPYLOB  "no"
       83   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       84   &global-define  LNGCR   character
       85   &global-define  DTZ     integer
       86   &global-define  BIGINT  decimal
       87   &ELSE
       88   &global-define  OE10    "yes"
       89   &global-define  NOW     now
       90   &global-define  LNGCR   longchar
       91   &global-define  DTZ     datetime-tz
       92   &global-define  BIGINT  int64
       93   &ENDIF
       94    
       95   
       96   /* use extended _connect fields: -client, -cache*
       97    */
       98   
       99   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      100   &global-define  CONNECTX        "yes"
      101   &ELSE
      102   &global-define  CONNECTX        "no"
      103   &ENDIF
      104   
      105   define stream inStrm.
      106   
      107   define new global shared variable dbgMode as integer no-undo initial 1.
      108   
      109   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      110    *
      111    * someday everyone will have OO and I will replace these with a gsv class
      112    * or something of that ilk
      113    *
      114    */
      115   
      116   define new global shared variable pt_shortname   as character no-undo.
      117   define new global shared variable pt_uniqName    as character no-undo.
      118   define new global shared variable pt_server      as character no-undo.
      119   define new global shared variable pt_resrcType   as character no-undo.
      120   
      121   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      122   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      123   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      124   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      125   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      126   
      127   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      128   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      129   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      130   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      131   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      132   define new global shared variable pt_ioFileName  as character no-undo.
      133   define new global shared variable pt_dfCmd       as character no-undo.
      134   
      135   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      136   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      137   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      138   
      139   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      140   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      141   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      142   
      143   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      144   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      145   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      146   
      147   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      148   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      149   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      150   
      151   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      152   
      153   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      154   
      155   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      156   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      157   
      158   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      159    * 
      160    */
      161   
      162   define new global shared variable stime as integer no-undo.                     /* start time                           */
      163   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      164   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      165   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      166   
      167   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      168   
      169                                                                                   /* corresponding to base checkpoint#    */
      170   /** Global Shared Temp Table Definitions
      171    **
      172    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      173    ** And a shared temp-table is logically the same as a db table so who really cares?
      174    **
      175    **/
      176   
      177   /* cache _File and _Index records so that we don't keep hitting the db to translate
      178    */
      179   
      180   define new global shared temp-table tt_tbl no-undo
      181     field xid      as integer                                             /* _File._File-Num              */
      182     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      183     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      184     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      185     field tblname  as character                                           /* _File._File-Name             */
      186     index xid-idx is unique primary xid.
      187   
      188   define new global shared temp-table tt_idx no-undo
      189     field xid      as integer                                             /* _Index._Idx-Num              */
      190     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      191     field idxname  as character                                           /* _Index._Idx-Name             */
      192     field idxnote  as character
      193     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      194     field tblnum   as integer                                             /* _File._File-Num              */
      195     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      196     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      197     field tblname  as character                                           /* _File._File-Name             */
      198     index xid-idx is unique primary xid.
      199   
      200   define new global shared temp-table tt_areaExtent no-undo
      201     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      202     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      203   
      204     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      205     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      206     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      207   
      208     index ae-idx is unique primary areaNum extNum.
      209   
      210   define new global shared temp-table tt_area no-undo
      211     field xid      as integer    format ">>>9"
      212     field SANum    as integer    format ">>>9"        label "#"
      213     field areaPool as character  format "x(2)"        label "BX"
      214   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      215     field SAName   as character  format "x(30)"       label "Area Name"
      216     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      217     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      218     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      219     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      220     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      221     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      222     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      223   
      224     field blkszkb as integer     format ">>9"         label "BSZ"
      225     field rpb     as integer     format ">>9"         label "RPB"
      226     field clstrsz as integer     format ">>9"         label "CSZ"
      227   
      228     field numTbls as integer     format ">>>>9"       label "#Tbls"
      229     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      230     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      231   
      232     field numExts as integer     format ">>>>9"       label "#Exts"
      233     field hasVar  as logical     format "Yes/No"      label "Var?"
      234   
      235     field xnote   as character   format "x"           label "*"
      236   
      237     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      238     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      239   
      240     index pctAlloc-idx is primary pctAlloc descending
      241     index pctLastX-idx pctLastX pctAlloc descending
      242     index allocGB-idx allocGB descending
      243     index totGB-idx totGB descending
      244     index xid-idx is unique xid
      245     index SANum-idx is unique SANum
      246     index SAName-idx is unique SAName
      247   .
      248   
      249   *** Encrypted Source ***
      250   *** Encrypted Source ***
      251   *** Encrypted Source ***
      252   *** Encrypted Source ***
      253   *** Encrypted Source ***
      254   *** Encrypted Source ***
      255   *** Encrypted Source ***
      256   *** Encrypted Source ***
      257   *** Encrypted Source ***
      258   *** Encrypted Source ***
      259   *** Encrypted Source ***
      260   *** Encrypted Source ***
      261   *** Encrypted Source ***
      262   *** Encrypted Source ***
      263   *** Encrypted Source ***
      264   *** Encrypted Source ***
      265   *** Encrypted Source ***
      266   *** Encrypted Source ***
      267   *** Encrypted Source ***
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319    
      320   
      321   /*******************************************************************************
      322    *******************************************************************************
      323    **                                                                           **
      324    **                                                                           **
      325    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      326    **  http://www.greenfieldtech.com                                            **
      327    **                                                                           **
      328    **  ProTop is free software; you can redistribute it and/or modify it        **
      329    **  under the terms of the GNU General Public License (GPL) as published     **
      330    **  by the Free Software Foundation; either version 2 of the License, or     **
      331    **  at your option) any later version.                                       **
      332    **                                                                           **
      333    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      334    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      335    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      336    **  for more details.                                                        **
      337    **                                                                           **
      338    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      339    **  of use and alternative licensing options for this software.              **
      340    **                                                                           **
      341    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      342    **                                                                           **
      343    **  See http://www.fsf.org for more information about the GPL.               **
      344    **                                                                           **
      345    **                                                                           **
      346    *******************************************************************************
      347    *******************************************************************************
      348    *
      349    * protoplib.i
      350    *
      351    * ProTop infrastructure library definitions
      352    *
      353    */
      354   
      355   function uDateTime returns integer () in super.
      356   function string2uDateTime returns integer( input p_text as character ) in super.
      357   function searchDir returns character ( input xDir as character ) in super.
      358   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      359   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      360   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      361   function myPID returns character () in super.
      362   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      363   
      364   /* end protoplib.i */
      365    
      366   
      367   /*******************************************************************************
      368    *******************************************************************************
      369    **                                                                           **
      370    **                                                                           **
      371    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      372    **  http://www.greenfieldtech.com                                            **
      373    **                                                                           **
      374    **  ProTop is free software; you can redistribute it and/or modify it        **
      375    **  under the terms of the GNU General Public License (GPL) as published     **
      376    **  by the Free Software Foundation; either version 2 of the License, or     **
      377    **  at your option) any later version.                                       **
      378    **                                                                           **
      379    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      380    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      381    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      382    **  for more details.                                                        **
      383    **                                                                           **
      384    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      385    **  of use and alternative licensing options for this software.              **
      386    **                                                                           **
      387    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      388    **                                                                           **
      389    **  See http://www.fsf.org for more information about the GPL.               **
      390    **                                                                           **
      391    **                                                                           **
      392    *******************************************************************************
      393    *******************************************************************************
      394    *
      395    * vstlib.i
      396    *
      397    * VST library definitions
      398    *
      399    */
      400   
      401   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      402   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      403   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      404   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      405   
      406   function connectFlags returns character ( input cnxId as integer ) in super.
      407   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      408   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      409   
      410   function isAIEnabled returns logical () in super.
      411   function isReplSource returns logical () in super.
      412   function isReplTarget returns logical () in super.
      413   function isBackupRunning returns logical () in super.
      414   function isWorkgroup returns logical () in super.
      415   
      416   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      417   
      418   /* end vstlib.i */
      419    
      420   
      421   function add2ds returns logical ( input h as handle ) in super.
      422   function getTempTableHandle returns handle ( input n as character ) in super.
      423   
      424   /* end protop.i */
      425    
      426   
      427   session:add-super-procedure( this-procedure ).
      428   
      429   subscribe to "protop_getMonInt"      anywhere run-procedure "getMonInt".
      430   subscribe to "protop_getMailInfo"    anywhere run-procedure "getMailInfo".
      431   subscribe to "protop_getRawMode"     anywhere run-procedure "getRawMode".
      432   subscribe to "protop_getRowLimit"    anywhere run-procedure "getRowLimit".
      433   subscribe to "protop_getSendType"    anywhere run-procedure "getSendType".
      434   subscribe to "protop_getDbgMode"     anywhere run-procedure "getDbgMode".
      435   
      436   return.
      437   
      438   
      439   procedure getMonInt:
      440   
      441     define input-output parameter monInt as integer no-undo label "  monInt" format ">>>9".
      442   
      443     do on error undo, leave
      444       on endkey undo, leave:
      445   
      446       update
      447         skip(1)
      448         '  The time, in seconds, between auto-refreshes when in "auto" mode.' skip
      449         skip(1)
      450         monInt skip
      451         skip(1)
      452         '  Use the "S" command to toggle Auto and OnDemand sampling mode.' skip
      453         skip(1)
      454        with
      455         frame getVar
      456         title " Monitoring Interval "
      457         row 3
      458         centered
      459         width 80
      460         side-labels
      461         overlay
      462       .
      463   
      464     end.
      465   
      466     hide frame getVar.
      467   
      468     return.
      469   
      470   end.
      471   
      472   
      473   procedure getMailInfo:
      474   
      475     define input-output parameter mailTo      as character no-undo label "  Send To" format "x(80)".
      476     define input-output parameter replyTo     as character no-undo label " Reply To" format "x(80)".
      477     define input-output parameter mailSubject as character no-undo label "  Subject" format "x(80)".
      478     define input-output parameter mailBody    as character no-undo label "     Note" format "x(80)".
      479     define input-output parameter mailAttach  as character no-undo label "   Attach" format "x(80)".
      480   
      481     do on error undo, leave
      482       on endkey undo, leave:
      483   
      484       update
      485         skip(1)
      486         mailTo      skip(1)
      487         replyTo     skip(1)
      488         mailSubject skip(1)
      489         skip(1)
      490         mailBody    view-as editor size 80 by 10
      491         skip(1)
      492         "           (ProTtop screen output will be automatically appended to this note.)" skip
      493         skip(1)
      494         "           <F1> or ^X to Send,  <F4> or ^E to Abort" skip
      495         skip(1)
      496        with
      497         frame getVar
      498         title " ProTop e-Mail Message "
      499         row 3
      500         centered
      501         width 102
      502         side-labels
      503         overlay
      504       .
      505   
      506       run ptSendMail ( mailTo, replyTo, mailSubject, mailBody, mailAttach ).
      507   
      508     end.
      509   
      510     hide frame getVar.
      511   
      512     return.
      513   
      514   end.
      515   
      516   
      517   procedure getRawMode:
      518   
      519     define input-output parameter xRawMode  as integer no-undo.
      520     define input-output parameter xTimeMode as integer no-undo.
      521   
      522     define variable sampleData as character no-undo format "x(12)"
      523       view-as combo-box list-item-pairs
      524         "Raw",        "Raw",
      525         "Cumulative", "Cumulative",
      526         "Interval",   "Interval"
      527      .
      528   
      529     define variable summaryRate as character no-undo format "x(12)"
      530       view-as combo-box list-item-pairs
      531         "Summary",     "Summary",
      532         "Rate",        "Rate"
      533      .
      534   
      535     assign
      536       sampleData  = entry( xRawMode,  "Initial,Previous,Raw,Cumulative,Interval" )
      537       summaryRate = entry( xTimeMode, "Summary,Rate" )
      538     no-error.
      539   
      540     do on error undo, leave
      541       on endkey undo, leave:
      542   
      543       update
      544         skip(1)
      545         '  Normal behavior is for ProTop to automatically display the RATE at which'         skip
      546         '  metrics are changing during the sample INTERVAL.  (Where that makes sense.)'      skip
      547         '  Thus "Interval" and "Rate" are the defaults below.'                               skip
      548         skip(1)
      549         '  Sometimes it is useful to view the raw numbers.  In those cases it might be'      skip
      550         '  helpful to try some of the other modes.  You may also want to switch to'          skip
      551         '  "OnDemand" sampling (the "S" command).'                                           skip
      552         skip(1)
      553         '  The default sampling is to return the data gathered in the interval between'      skip
      554         '  samples.  Alternatives are data since ProTop started ("Cumulative") or since'     skip
      555         '  the db started ("Raw").'                                                          skip
      556         skip(1)
      557         '      Select type of sampling:' sampleData skip
      558         skip(1)
      559         '  The default divisor is the number of seconds in the sample interval.  When'       skip
      560         '  done this way the *rate* (per second) is displayed.  If the "summary" option'     skip
      561         '  is selected the numbers are whatever they are -- no division is performed.'       skip
      562         skip(1)
      563         '      Select type of division:' summaryRate skip
      564         skip(1)
      565        with
      566         frame getVar
      567         title " Sample Type "
      568         row 3
      569         centered
      570         width 100
      571         no-labels
      572         overlay
      573       .
      574   
      575   
      576     end.
      577   
      578     hide frame getVar.
      579   
      580     xRawMode = lookup( sampleData, "Initial,Previous,Raw,Cumulative,Interval" ).
      581     if xRawMode < 3 or xRawMode > 5 or xRawMode = ? then
      582       do:
      583         /* message "oops!" xRawMode sampleData. pause. */
      584         xRawMode = 5.
      585       end.
      586   
      587     xTimeMode = lookup( summaryRate, "Summary,Rate" ).
      588     if xTimeMode < 0 or xTimeMode > 1 or xTimeMode = ? then
      589       do:
      590         /* message "oops!" xRawMode sampleData. pause. */
      591         xTimeMode = 2.
      592       end.
      593   
      594     return.
      595   
      596   end.
      597   
      598   
      599   procedure getRowLimit:
      600   
      601     define input-output parameter rowLimit as integer no-undo label "    Row Limit" format "->>>>>9".
      602   
      603     do on error undo, leave
      604       on endkey undo, leave:
      605   
      606       update
      607         skip(1)
      608         '  The limit on the number of rows returned by large data sets (uio, table activity, etc.).' skip
      609         skip(1)
      610         rowLimit skip
      611         skip(1)
      612         '  This only limits the rows returned to the user-interface.  Data collectors still' skip
      613         '  have to process the same amount of data.  A potential downside to limiting rows'  skip
      614         '  is that the limit is enforced by the primary index -- so if you are sorting by'   skip
      615         '  non-default columns (the "z" command) you might not see everything you expect.'   skip
      616         skip(1)
      617        with
      618         frame getVar
      619         title " Row Limit "
      620         row 3
      621         centered
      622         width 100
      623         side-labels
      624         overlay
      625       .
      626   
      627     end.
      628   
      629     hide frame getVar.
      630   
      631     return.
      632   
      633   end.
      634   
      635   
      636   procedure getSendType:
      637   
      638     define input-output parameter sendType as character no-undo.
      639   
      640     define variable serializeAs as logical format "JSON/XML" label "    sendType".
      641   
      642     serializeAs = ( if sendType = "JSON" then yes else no ).
      643   
      644     do on error undo, leave
      645       on endkey undo, leave:
      646   
      647       update
      648         skip(1)
      649         '  Serialize data as either XML or JSON for transfer from data collectors to user-interface.' skip
      650         skip(1)
      651         serializeAs " J = JSON, X = XML " skip
      652         skip(1)
      653         '  JSON is much more compact and thus faster but support is newer and /might/ have some'      skip
      654         '  (unknown) glitches.  You must be on 10.2B or better to use JSON.'                          skip
      655         skip(1)
      656        with
      657         frame getVar
      658         title " Serialize Data As "
      659         row 3
      660         centered
      661         width 100
      662         side-labels
      663         overlay
      664       .
      665   
      666     end.
      667   
      668     hide frame getVar.
      669   
      670     sendType = ( if serializeAs then "JSON" else "XML" ).
      671   
      672     return.
      673   
      674   end.
      675   
      676   
      677   procedure getDbgMode:
      678   
      679     do on error undo, leave
      680       on endkey undo, leave:
      681   
      682       update
      683         skip(1)
      684         '  A debug level of 1 is the default, 3 is a moderate level of detail and includes  '  skip
      685         '  occasional PAUSEs.  5 can be very annoying and includes a lot of messages that   '  skip
      686         '  flash by quite rapidly.  Values greater than 5 are not likely to be very useful. '  skip
      687         skip(1)
      688         '  Debug Level = ' dbgMode format "9" skip
      689         skip(1)
      690        with
      691         frame getVar
      692         title " Debug Level "
      693         row 3
      694         centered
      695         width 100
      696         side-labels
      697         overlay
      698       .
      699   
      700     end.
      701   
      702     hide frame getVar.
      703   
      704     return.
      705   
      706   end.
      707   
