        1   /* install.p
        2    *
        3    * tailor a ProTop version 3 install
        4    *
        5    */
        6   
        7   define variable envDLC     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "    OpenEdge".
        8   define variable envPT3     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "    ProTop 3".
        9   define variable envLOG     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "   Log Files".
       10   define variable envTMP     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "  Temp Files".
       11   
       12   define variable custId     as character no-undo format "x(250)" view-as fill-in size 20 by 1 label " Customer Id".
       13   
       14   define variable PT3env     as character no-undo.                /* bin/protopenv -- not $PROTOP         */
       15   
       16   define variable dirSep     as character no-undo.
       17   define variable f          as character no-undo.
       18   define variable p          as character no-undo.
       19   
       20   define variable stubDir    as character no-undo.
       21   define variable stubName   as character no-undo.
       22   define variable baseName   as character no-undo.
       23   define variable scriptName as character no-undo.
       24   
       25   define variable scriptBody as character no-undo.
       26   
       27   define stream stubStream.
       28   define stream scriptStream.
       29   define stream inStrm.
       30   
       31   /* logMsg
       32    *
       33    * three ways to call it:
       34    *
       35    * logMsg( logLevel, messageText ).
       36    * publish "logMsg" ( logLevel, messageText ).
       37    * run doLogMsg ( logLevel, messageText ).
       38    *
       39    */
       40   
       41   define new global shared variable logLevel as integer no-undo initial 5.
       42   
       43   define stream logStream.
       44   output stream logStream to value( "pt3inst.log" ).
       45   
       46   subscribe to "logMsg" anywhere run-procedure "doLogMsg".
       47   
       48   function logMsg returns logical ( input msgLevel as integer, input msgText as character ):
       49   
       50     run doLogMsg( msgLevel, msgText ).
       51   
       52     return true.
       53   
       54   end.
       55   
       56   
       57   procedure doLogMsg:
       58   
       59     define input parameter msgLevel as integer   no-undo.
       60     define input parameter msgText  as character no-undo.
       61   
       62     if msgLevel <= logLevel then
       63       put stream logStream unformatted today " " string( time, "hh:mm:ss" ) " " msgText skip.
       64   
       65     return.
       66   
       67   end.
       68   
       69   
       70   dirSep = ( if opsys begins "win" then "~\" else "/" ).
       71   
       72   f = "lib/install.p".
       73   
       74   if envPT3 = "" then
       75     do:
       76   
       77       /* the windows wix installer cannot set the current directory to the install directory
       78        * so we have to figure it out based on the absolute path to lib/install.p (this program)
       79        *
       80        */
       81   
       82       file-info:file-name = search( f ).
       83       p = file-info:full-pathname.
       84       if p = ? then
       85         do:
       86           logMsg( 0, substitute( "search( &1 ) failed -- trying: &2", f, "/home/protop/lib/install9.p" )).
       87           message "search(" f ") failed -- trying /home/protop/lib/install9.p".
       88           file-info:file-name = "/home/protop/lib/install9.p".
       89           p = file-info:full-pathname.
       90         end.
       91   
       92       if p = ? then
       93         do:
       94           logMsg( 0, "Unknown install path, shamefully quitting." ).
       95           message "Unknown install path".
       96           quit.
       97         end.
       98   
       99       envPT3 = substring( p, 1, length( p ) - length( f ) - 1 ).
      100   
      101     end.
      102   
      103   message "ProTop 3 is being installed in:" envPT3.
      104   logMsg( 0, substitute( "ProTop 3 is being installed in: &1, dirSep = &2", envPT3, dirSep )).
      105   
      106   if session:parameter = "" then
      107     assign
      108       envDLC = os-getenv( "DLC" )
      109       envLOG = os-getenv( "LOGDIR" )
      110       envTMP = os-getenv( "TMPDIR" )
      111       custId = os-getenv( "CUSTID" )
      112     .
      113    else
      114     assign
      115       envDLC = entry( 1, session:parameter )
      116       envLOG = entry( 2, session:parameter )
      117       envTMP = entry( 3, session:parameter )
      118       custId = entry( 4, session:parameter )
      119     .
      120   
      121   if envDLC = ? then envDLC = "".
      122   
      123   logMsg( 0, ( if session:parameter = "" then "environment variables" else "session:parameter" )).
      124   logMsg( 0, substitute( "Values provided: [DLC=&1] [LOGDIR=&2] [TMPDIR=&3] [CUSTID=&4] [ENVPT3=&5]", envDLC, envLOG, envTMP, custId, envPT3 )).
      125   
      126   if opsys = "unix" then
      127     do:
      128   
      129    /* if envLOG = ? then envLOG = "/tmp".
      130     * if envTMP = ? then envTMP = "/tmp".
      131     */
      132   
      133       if envLOG = ? then envLOG = envPT3 + "/log".
      134       if envTMP = ? then envTMP = envPT3 + "/tmp".
      135   
      136     end.
      137    else
      138     do:
      139   
      140    /* if envLOG = ? then envLOG = "c:~\temp".
      141     * if envTMP = ? then envTMP = "c:~\temp".
      142     */
      143   
      144       if envLOG = ? then envLOG = envPT3 + "~\log".
      145       if envTMP = ? then envTMP = envPT3 + "~\tmp".
      146   
      147     end.
      148   
      149   if custID = ? then
      150     do:
      151       file-info:file-name = envPT3 + dirSep + "etc" + dirSep + "custid.cfg".
      152       if file-info:full-pathname <> ? then
      153         do:
      154           input stream inStrm from value( file-info:full-pathname ).
      155           import stream inStrm unformatted custId.
      156           input stream inStrm close.
      157         end.
      158     end.
      159   
      160   logMsg( 0, substitute( "Initial values: [DLC=&1] [LOGDIR=&2] [TMPDIR=&3] [CUSTID=&4] [ENVPT3=&5]", envDLC, envLOG, envTMP, custId, envPT3 )).
      161   
      162   do on error undo, leave
      163      on endkey undo, leave
      164      on stop undo, leave:
      165   
      166     do while session:batch = no:
      167   
      168       update
      169         skip(1)
      170         envDLC skip
      171         envPT3 skip
      172         envLOG skip
      173         envTMP skip
      174         skip(1)
      175         "    A custId is needed to enable data transfer to support the web  " skip
      176         "    browser user interface.  Your firewall must have port 80 open  " skip
      177         "    for outbound traffic on the db server for this to work.        " skip
      178         skip(1)
      179         "    Leave custId as ? if you do NOT want ProTop to communicate     " skip
      180         "    with our cloud based monitoring tools.                         " skip
      181         skip(1)
      182         custId " (optional)" skip
      183         skip(1)
      184         "    Contact tom@wss.com to obtain a custId.                        " skip
      185         skip(1)
      186        with
      187         frame updEnv
      188         title " ProTop 3 Configuration "
      189         centered
      190         side-labels
      191       .
      192   
      193       logMsg( 0, substitute( "User values: [DLC=&1] [LOGDIR=&2] [TMPDIR=&3] [CUSTID=&4] [ENVPT3=&5]", envDLC, envLOG, envTMP, custId, envPT3 )).
      194   
      195       if envDLC = "" or envPT3 = "" or envLOG = "" or envTMP = "" or envDLC = ? or envPT3 = ? or envLOG = ? or envTMP = ? then
      196         next.
      197        else
      198         leave.
      199   
      200     end.
      201   
      202     envDLC = right-trim( envDLC, dirSep ).
      203     envPT3 = right-trim( envPT3, dirSep ).
      204     envLOG = right-trim( envLOG, dirSep ).
      205     envTMP = right-trim( envTMP, dirSep ).
      206   
      207     logMsg( 0, substitute( "Working values: [DLC=&1] [LOGDIR=&3] [TMPDIR=&3] [CUSTID=&4] [ENVPT3=&5]", envDLC, envLOG, envTMP, custId, envPT3 )).
      208   
      209     if custId <> "" and custId <> ? then
      210       do:
      211         output to value( envPT3 + dirSep + "etc" + dirSep + "custid.cfg" ).
      212         put unformatted custId skip.
      213         output close.
      214       end.
      215   
      216     if opsys = "unix" then
      217       do:
      218         PT3env = envPT3 + "/bin/protopenv".
      219         stubDir = envPT3 + "/ustub".
      220       end.
      221      else
      222       do:
      223         PT3env = envPT3 + "~\bin~\protopenv.bat".
      224         stubDir = envPT3 + "~\wstub".
      225       end.
      226   
      227     logMsg( 0, substitute( "Working values: [DLC=&1] [LOGDIR=&2] [TMPDIR=&3] [CUSTID=&4] [ENVPT3=&5]", envDLC, envLOG, envTMP, custId, envPT3 )).
      228   
      229     os-create-dir value( envPT3 + "/bin" ) value( envLOG ) value( envTMP ).
      230     os-create-dir value( envPT3 + "/rpt" ).
      231   
      232     if os-error <> 0 then
      233       do:
      234         message
      235           "Error:" os-error "occurred when creating directories:" skip
      236           envPT3 + "/bin" envLOG envTMP skip
      237           skip(1)
      238           "Canceling installation" skip
      239           view-as alert-box
      240         .
      241         quit.
      242       end.
      243   
      244     logMsg( 0, substitute( "Created &1, &2, &3 and &4",  envPT3 + "/bin", envLog, envTMP, envPT3 + "/rpt" )).
      245   
      246     logMsg( 0, substitute( "Copying stub files from: &1", stubDir )).
      247   
      248     input stream inStrm from os-dir( stubDir ).
      249   
      250     repeat:
      251   
      252       import stream inStrm ^ stubName.
      253   
      254       if substring( stubName, length( stubName ), 1 ) = "." then next.    /* if it ends in "." it is either "." or ".." or        */
      255                                                                           /* crazily named and unworthy of our attention          */
      256   
      257       logMsg( 0, substitute( "Processing: &1", stubName )).
      258   
      259       if opsys = "unix" then
      260         do:
      261           scriptName = replace( stubName, "ustub", "bin" ).
      262         end.
      263        else
      264         do:
      265   
      266           if r-index( stubName, ".BAT" ) = ( length( stubName ) - 3 ) then
      267             scriptName = replace( stubName, "wstub", "bin" ).
      268            else if r-index( stubName, ".INI" ) = ( length( stubName ) - 3 ) then
      269             scriptName = replace( stubName, "wstub", "etc" ).
      270            else
      271             next.
      272   
      273         end.
      274   
      275       /*
      276       copy-lob from file stubName to scriptBody.
      277       scriptBody = replace( scriptBody, "#PT3ENV#", PT3env ).
      278       scriptBody = replace( scriptBody, "#ENVDLC#", envDLC ).
      279       scriptBody = replace( scriptBody, "#ENVPT3#", envPT3 ).
      280       scriptBody = replace( scriptBody, "#ENVLOG#", envLOG ).
      281       scriptBody = replace( scriptBody, "#ENVTMP#", envTMP ).
      282       copy-lob from scriptBody to file scriptName.
      283        */
      284   
      285       input stream stubStream from value( stubName ).
      286       output stream scriptStream to value( scriptName ).
      287       repeat:
      288         scriptBody = "".
      289         import stream stubStream unformatted scriptBody.
      290         scriptBody = replace( scriptBody, "#PT3ENV#", PT3env ).
      291         scriptBody = replace( scriptBody, "#ENVDLC#", envDLC ).
      292         scriptBody = replace( scriptBody, "#ENVPT3#", envPT3 ).
      293         scriptBody = replace( scriptBody, "#ENVLOG#", envLOG ).
      294         scriptBody = replace( scriptBody, "#ENVTMP#", envTMP ).
      295         put stream scriptStream unformatted scriptBody skip.
      296         if scriptBody = "" then put stream scriptStream unformatted skip(1).
      297       end.
      298       input stream stubStream close.
      299       output stream scriptStream close.
      300   
      301       logMsg( 0, substitute( "Finished: &1", scriptName )).
      302   
      303     end.
      304   
      305     input stream inStrm close.
      306   
      307     logMsg( 0, "Looking for estub" ).
      308   
      309     /* copy files from estub to etc if they do NOT already exist in etc
      310      */
      311   
      312     file-info:file-name = "estub".
      313     if file-info:full-pathname <> ? then
      314       do:
      315   
      316         input stream inStrm from os-dir( "estub" ).
      317   
      318         repeat:
      319   
      320           import stream inStrm ^ stubName.
      321   
      322           if substring( stubName, length( stubName ), 1 ) = "." then next. /* if it ends in "." it is either "." or ".." or       */
      323                                                                            /* crazily named and unworthy of our attention         */
      324   
      325           baseName = substring( stubName, r-index( stubName, "estub" ) + 6 ).
      326   
      327           file-info:file-name = "etc/" + baseName.
      328           if file-info:full-pathname <> ? then
      329             logMsg( 0, substitute( "&1 already exists in etc, skipping.", baseName )).
      330            else
      331             do:
      332               logMsg( 0, substitute( "Copying &1 to etc", baseName )).
      333               os-copy value( stubName ) value( "etc" ).
      334             end.
      335   
      336         end.
      337   
      338         input stream inStrm close.
      339   
      340       end.
      341   
      342   end.
      343   
      344   if opsys = "unix" then
      345     do:
      346       logMsg( 0, "Fixing permissions" ).
      347       os-command silent value( "chmod 755 " + envPT3 + "/bin/*" ).
      348     end.
      349   
      350   logMsg( 0, "Finished!" ).
      351   
      352   quit.
