        1   /* ttinfo.p
        2    *
        3    * show some useful information about this session's temp-tables
        4    *
        5    * triggered by the ^t command
        6    *
        7    * temp-table info requires OpenEdge 11 or higher and you must set "TTDEBUG=yes" in bin/localenv
        8    *
        9    * You must also uncomment the -tt* parameters in etc/protop.pf
       10    *
       11    *      ...
       12    *      # these define the temp-table stats collection for oe11 clients
       13    *      # older clients should ignore these parameters (but we comment them out anyway).
       14    *      
       15    *      -ttbaseindex 1
       16    *      -ttbasetable 1
       17    *      -ttindexrangesize 1000
       18    *      -tttablerangesize 1000
       19    *
       20    * of interest:
       21    *
       22    *      http://knowledgebase.progress.com/articles/Article/P95826
       23    *
       24    *      -tmpbsize 1 =  32 rows per block
       25    *      -tmpbsize 4 = 256 rows per block
       26    *      -tmpbsize 8 = 256 rows per block
       27    */
       28   
       29   
       30   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       31   
       32   &global-define  TTSTATS
       33   
       34   &ENDIF
       35   
       36   define stream outStrm.
       37   
       38   define variable tblFilter   as character no-undo format "x(50)" label "  Table Filter".         /* user defined filter          */
       39   define variable outFileName as character no-undo format "x(50)" label "   Output File".         /* user defined output file     */
       40   
       41   define variable x_id as integer no-undo.
       42   
       43   define temp-table tt_ttInfo no-undo
       44     field xid        as integer   label "xId"     format ">>>>9"
       45     field ttId       as integer   label "TT Id"   format ">>>>9"
       46     field idxId      as integer   label "Idx Id"  format ">>>>>"
       47     field ttName     as character label "TT Name" format "x(30)"
       48     field ttProcName as character label "Procedure Name" format "x(20)"
       49     field ttDeleted  as datetime  label "Was Deleted"
       50     field numRecs    as int64     label "Records" format ">>>>>>>"
       51     field numBytes   as int64     label "Bytes"   format ">>>>>>>"
       52     field ts_create  as int64     label "Create"  format ">>>>>>>"
       53     field ts_read    as int64     label "Read"    format ">>>>>>>"
       54     field ts_update  as int64     label "Update"  format ">>>>>>>"
       55     field ts_delete  as int64     label "Delete"  format ">>>>>>>"
       56     field ts_osread  as int64     label "OSRead"  format ">>>>>"
       57     index xId-idx  is primary unique xid
       58     index ttId-idx ttId
       59     index idxId-idx idxId
       60     index ttName-idx ttName
       61   .
       62   
       63   /* useful "public properties" */
       64   
       65   define variable numCurrTT       as integer   no-undo.
       66   define variable numPeakTT       as integer   no-undo.
       67   define variable numArchTT       as integer   no-undo.
       68   
       69   define variable numTTIdx        as integer   no-undo.
       70   define variable numTTTbl        as integer   no-undo.
       71   define variable totRecs         as integer   no-undo.
       72   define variable totBytes        as integer   no-undo.
       73   
       74   define variable ttSumCreate     as int64     no-undo.
       75   define variable ttSumRead       as int64     no-undo.
       76   define variable ttSumUpdate     as int64     no-undo.
       77   define variable ttSumDelete     as int64     no-undo.
       78   define variable ttSumLogRd      as int64     no-undo.
       79   define variable ttSumOSRd       as int64     no-undo.
       80   define variable ttSumOSWr       as int64     no-undo.
       81   define variable ttSumTRX        as int64     no-undo.
       82   define variable ttSumUndo       as int64     no-undo.
       83   
       84   define variable ttHR            as decimal   no-undo format ">>9.99%".
       85   
       86   define variable DBIName         as character no-undo.
       87   define variable DBIFullPath     as character no-undo.
       88   define variable DBIBlkSz        as integer   no-undo.
       89   define variable DBISize         as int64     no-undo.
       90   
       91   define variable DBITotBlks      as int64     no-undo.
       92   define variable DBIEmptyBlks    as int64     no-undo.
       93   define variable DBIFreeBlks     as int64     no-undo.
       94   define variable DBIRMFreeBlks   as int64     no-undo.
       95   
       96   /* "useful" might be an exaggeration... */
       97   
       98   define variable SpaceDbExd      as int64 no-undo.
       99   define variable SpaceTakeFree   as int64 no-undo.
      100   define variable SpaceRetFree    as int64 no-undo.
      101   define variable SpaceAllocNewRm as int64 no-undo.
      102   define variable SpaceFromRm     as int64 no-undo.
      103   define variable SpaceFromFree   as int64 no-undo.
      104   define variable SpaceBytesAlloc as int64 no-undo.
      105   define variable SpaceExamined   as int64 no-undo.
      106   define variable SpaceRemoved    as int64 no-undo.
      107   define variable SpaceFrontAdd   as int64 no-undo.
      108   define variable SpaceBackAdd    as int64 no-undo.
      109   define variable SpaceFront2Back as int64 no-undo.
      110   
      111   
      112   /* install self as a session super-procedure and wait for "protop_showTT"
      113    */
      114   
      115   session:add-super-procedure( this-procedure ).
      116   
      117   subscribe to "protop_showTT" anywhere run-procedure "showTT".
      118   
      119   return.
      120   
      121   
      122   /* count numRec and calculate numBytes
      123    */
      124   
      125   procedure ttAnalys:
      126   
      127     define input parameter x as integer no-undo.
      128   
      129   &IF DEFINED( TTSTATS ) &THEN
      130   
      131     define variable q  as handle    no-undo.
      132     define variable b  as handle    no-undo.
      133     define variable h  as handle    no-undo.
      134   
      135     define variable p  as character no-undo.
      136   
      137     define variable r  as integer   no-undo.
      138     define variable s  as integer   no-undo.
      139   
      140     find tt_ttInfo where tt_ttInfo.xid = x no-error.
      141     if not available( tt_ttInfo ) then
      142       do:
      143         message "no such tt_ttInfo:" x.
      144         return.
      145       end.
      146   
      147     Progress.Database.TempTableInfo:GetTableInfoById( tt_ttInfo.ttId, output h, output p ).
      148     b = h:default-buffer-handle.
      149   
      150     if h:has-Records = no then return.
      151   
      152     create query q.
      153     q:forward-only = no.
      154   
      155     q:set-buffers( b ).
      156     q:query-prepare( "preselect each " + b:name ).
      157     q:query-open.
      158   
      159     q:get-first().
      160     do while b:available:
      161   
      162       assign
      163         r = r + 1
      164         s = s + b:record-length
      165       .
      166   
      167       q:get-next().
      168   
      169     end.
      170   
      171     q:query-close.
      172     delete object q.
      173   
      174     /* we need to re-find this because we may have just counted it and thus moved the default buffer!
      175      */
      176   
      177     find tt_ttInfo where tt_ttInfo.xid = x no-error.
      178     if available( tt_ttInfo ) then
      179       assign
      180         tt_ttInfo.numRecs    = r
      181         tt_ttInfo.numBytes   = s
      182       .
      183   
      184   &ENDIF
      185   
      186     return.
      187   
      188   end.
      189   
      190   
      191   procedure getTTTblList:
      192   &IF DEFINED( TTSTATS ) &THEN
      193   
      194     define variable h  as handle    no-undo.
      195     define variable b  as handle    no-undo.
      196   
      197     define variable t  as integer   no-undo.      /* tt tbl id            */
      198     define variable p  as character no-undo.      /* program name         */
      199   
      200     define variable tblName as character no-undo format "x(30)".
      201   
      202     find last tt_ttInfo no-error.
      203     if available( tt_ttInfo ) then x_id = tt_ttInfo.xid.
      204   
      205     numTTTbl = 0.
      206   
      207     /* TTPeak is the highest TT Id used by the session (so far)
      208      */
      209   
      210     do t = 1 to Progress.Database.TempTableInfo:TempTablePeak:
      211   
      212       assign
      213         p = ?             /* procedure name associated with the tt        */
      214         h = ?             /* tt handle                                    */
      215         b = ?             /* defautl buffer handle for the tt             */
      216       .
      217   
      218       Progress.Database.TempTableInfo:GetTableInfoById( t, output h, output p ).
      219   
      220       if valid-handle( h ) then
      221         do:
      222   
      223           assign
      224             b = h:default-buffer-handle
      225             tblName = b:name
      226           .
      227   
      228           find tt_ttInfo where tt_ttInfo.ttId = t no-error.
      229           if not available tt_ttInfo then
      230             do:
      231               create tt_ttInfo.
      232               assign
      233                 numTTTbl             = numTTTbl + 1
      234                 x_id                 = x_id + 1
      235                 tt_ttInfo.xId        = x_id
      236                 tt_ttInfo.ttId       = t
      237                 tt_ttInfo.ttName     = tblName
      238                 tt_ttInfo.ttProcName = p
      239               .
      240             end.
      241   
      242         end.
      243   
      244   /*    if tblName begins "_IndexStatHist" then leave.    */ /* if TT archiving is enabled this will be the last table name */
      245   
      246   /*    if numTTTbl >= Progress.Database.TempTableInfo:TempTableCount then leave. */
      247   
      248     end.
      249   
      250   &ENDIF
      251   
      252     return.
      253   
      254   end.
      255   
      256   
      257   procedure getTTTblCRUD:
      258   &IF DEFINED( TTSTATS ) &THEN
      259   
      260     define variable q  as handle    no-undo.
      261     define variable b  as handle    no-undo.
      262     define variable h  as handle    no-undo.
      263   
      264     define variable t  as character no-undo.
      265     define variable p  as character no-undo.
      266   
      267     define variable n  as integer   no-undo.
      268   
      269     create query q.
      270     q:forward-only = no.
      271   
      272     /* temp-table stats "VST"
      273      */
      274   
      275     h = Progress.Database.TempTableInfo:GetVSTHandle( Progress.Database.VSTTableId:TableStatId ).
      276     b = h:default-buffer-handle.
      277   
      278     /* b:write-xmlschema( "FILE", "tablestat.xsd", true, ?, ? ). */       /* dump the definition... */
      279   
      280     q:set-buffers( b ).
      281     q:query-prepare( "preselect each " + b:name ).
      282     q:query-open.
      283   
      284     q:get-first().
      285     do while b:available:
      286   
      287       if Progress.Database.TempTableInfo:GetTableInfoById( b::_tableStat-Id, output t, output p ) then
      288         n = n + 1.
      289        else
      290         do:
      291           q:get-next().
      292           next.
      293         end.
      294   
      295       find tt_ttInfo where tt_ttInfo.ttId = b::_tableStat-Id no-error. 
      296   
      297       if not available( tt_ttInfo ) then          /* a new TT has been discovered!        */
      298         do:
      299           create tt_ttInfo.
      300           assign
      301             x_id                 = x_id + 1
      302             tt_ttInfo.xId        = x_id
      303             tt_ttInfo.ttId       = b::_tableStat-Id
      304             tt_ttInfo.ttName     = t
      305             tt_ttInfo.ttProcName = p
      306           .
      307         end.
      308         
      309         assign
      310           tt_ttInfo.ts_create = int64( b::_TableStat-Create )
      311           tt_ttInfo.ts_read   = int64( b::_TableStat-Read   )
      312           tt_ttInfo.ts_update = int64( b::_TableStat-Update )
      313           tt_ttInfo.ts_delete = int64( b::_TableStat-Delete )
      314           tt_ttInfo.ts_osread = int64( b::_TableStat-OSRead )
      315         .
      316   
      317       run ttAnalys( tt_ttInfo.xId ).
      318   
      319       /* if t begins "_IndexStatHist" then leave. */ /* if TT archiving is enabled this will be the last table name */
      320   
      321       /* if n >= Progress.Database.TempTableInfo:TempTableCount then leave. */
      322   
      323       q:get-next().
      324   
      325     end.
      326   
      327     q:query-close.
      328   
      329     delete object q.
      330   
      331     numCurrTT = Progress.Database.TempTableInfo:TempTableCount.
      332     numPeakTT = Progress.Database.TempTableInfo:TempTablePeak.
      333   
      334   &ENDIF
      335   
      336     return.
      337   
      338   end.
      339   
      340   
      341   procedure getArchivedTTList:
      342   &IF DEFINED( TTSTATS ) &THEN
      343   
      344     define variable q  as handle    no-undo.
      345     define variable b  as handle    no-undo.
      346     define variable h  as handle    no-undo.
      347   
      348     numArchTT = 0.
      349   
      350     if Progress.Database.TempTableInfo:ArchiveTableStatistics = no or
      351        Progress.Database.TempTableInfo:ArchiveIndexStatistics = no then return.
      352   
      353     create query q.
      354     q:forward-only = no.
      355   
      356     find last tt_ttInfo no-error.
      357     if available( tt_ttInfo ) then x_id = tt_ttInfo.xid.
      358   
      359     /* archived temp-tables
      360      */
      361   
      362     h = Progress.Database.TempTableInfo:GetTableStatHistoryHandle().
      363     b = h:default-buffer-handle.
      364   
      365     q:set-buffers( b ).
      366     q:query-prepare( "preselect each " + b:name ).
      367     q:query-open.
      368   
      369     q:get-first().
      370     do while b:available:
      371   
      372       assign
      373         x_id = x_id + 1
      374         numArchTT = numArchTT + 1
      375       .
      376   
      377       if b:name <> "_tablestathist" then  /* why wouldn't it?     */
      378         do:
      379           message b:name "<> _tableStatHist!".
      380         end.
      381        else
      382         do:
      383   
      384           create tt_ttInfo.
      385           assign
      386             xid  = x_id
      387             ttid = ?
      388             tt_ttInfo.ttName     = b::_Table-name
      389             tt_ttInfo.ttProcName = b::_Prog-name
      390             tt_ttInfo.ttDeleted  = datetime( b::_Delete-Timestamp )
      391             tt_ttInfo.ts_create  = int64( b::_TableStat-Create )
      392             tt_ttInfo.ts_read    = int64( b::_TableStat-Read )
      393             tt_ttInfo.ts_update  = int64( b::_TableStat-Update )
      394             tt_ttInfo.ts_delete  = int64( b::_TableStat-Delete )
      395             tt_ttInfo.ts_osread  = int64( b::_TableStat-OSRead )
      396           .
      397   
      398         end.
      399   
      400       q:get-next().
      401   
      402     end.
      403   
      404     q:query-close.
      405   
      406     delete object q.
      407   
      408   &ENDIF
      409   
      410     return.
      411   
      412   end.
      413   
      414   
      415   procedure getTTIdxList:
      416   &IF DEFINED( TTSTATS ) &THEN
      417   
      418     define variable h  as handle    no-undo.
      419     define variable b  as handle    no-undo.
      420   
      421     define variable j  as integer   no-undo.      /* tt id number         */
      422     define variable k  as integer   no-undo.      /* tt idx number        */
      423     define variable r  as integer   no-undo.      /* number of records    */
      424     define variable s  as integer   no-undo.      /* record size          */
      425     define variable p  as character no-undo.      /* program name         */
      426   
      427     define variable xIdxName as character no-undo format "x(30)".
      428     define variable xTblName as character no-undo format "x(30)".
      429   
      430     find last tt_ttInfo no-error.
      431     if available( tt_ttInfo ) then x_id = tt_ttInfo.xid.
      432   
      433     numTTIdx = 0.
      434   
      435     /* TTPeak is the highest TT Id used by the session (so far) -- there is no IdxPeak so we guess that 10,000 ought to be enough for anyone :(
      436      */
      437   
      438     do k = 1 to 10000:
      439   
      440       assign
      441         xIdxName  = ?
      442         xTblname = ?
      443         p = ?
      444         h = ?
      445         b = ?
      446       .
      447   
      448       Progress.Database.TempTableInfo:GetIndexInfoById( k, output xIdxName, output h, output p ).
      449   
      450       if valid-handle( h ) then
      451         do:
      452   
      453           assign
      454             numTTIdx = numTTIdx + 1
      455             x_id     = x_id + 1
      456             b        = h:default-buffer-handle
      457             xTblName = b:name
      458           .
      459   
      460           if false then b:write-xmlschema( "FILE", "indexinfo.xsd", true, ?, ? ).         /* dump the definition... */
      461   
      462           if xTblName begins "_IndexStatHist" or xTblName begins "_TableStatHist" then leave.
      463   
      464           find first tt_ttInfo
      465             where tt_ttInfo.ttName = entry( 1, xIdxName, "." )
      466               and tt_ttInfo.ttProcName = p
      467             no-error
      468           .
      469           j = ?.
      470           if available tt_ttInfo then
      471             j = ttId.
      472            else
      473             do:
      474               message "no tt named:" entry( 1, xIdxName, "." ) xTblName j k xIdxName p.
      475               next.
      476             end.
      477   
      478           find first tt_ttInfo where tt_ttInfo.idxId = k no-error.
      479   
      480           if not available( tt_ttInfo ) then
      481             do:
      482               create tt_ttInfo.
      483               assign
      484                 tt_ttInfo.xId        = x_id
      485                 tt_ttInfo.ttId       = j
      486                 tt_ttInfo.idxId      = k
      487                 tt_ttInfo.ttName     = xIdxName
      488                 tt_ttInfo.ttProcName = p
      489               .
      490             end.
      491   
      492         end.
      493   
      494     end.
      495   
      496   &ENDIF
      497   
      498     return.
      499   
      500   end.
      501   
      502   
      503   procedure getTTIdxCRUD:
      504   &IF DEFINED( TTSTATS ) &THEN
      505   
      506     define variable q  as handle    no-undo.
      507     define variable b  as handle    no-undo.
      508     define variable h  as handle    no-undo.
      509   
      510     create query q.
      511     q:forward-only = no.
      512   
      513     /* loop through temp-table index stats "VST"
      514      */
      515   
      516     h = Progress.Database.TempTableInfo:GetVSTHandle( Progress.Database.VSTTableId:IndexStatId ).
      517     b = h:default-buffer-handle.
      518   
      519     if false then b:write-xmlschema( "FILE", "indexstat.xsd", true, ?, ? ).       /* dump the definition... */
      520   
      521     q:set-buffers( b ).
      522     q:query-prepare( "preselect each " + b:name ).
      523     q:query-open.
      524   
      525     q:get-first().
      526     do while b:available:
      527   
      528       find tt_ttInfo where idxId = b::_indexStat-Id no-error. 
      529       if available( tt_ttInfo ) then
      530         assign
      531           tt_ttInfo.ts_create = int64( b::_IndexStat-Create )
      532           tt_ttInfo.ts_read   = int64( b::_IndexStat-Read )
      533         .
      534   
      535       q:get-next().
      536   
      537     end.
      538   
      539     q:query-close.
      540   
      541     delete object q.
      542   
      543   &ENDIF
      544   
      545     return.
      546   
      547   end.
      548   
      549   
      550   procedure getTTInfo:
      551   &IF DEFINED( TTSTATS ) &THEN
      552   
      553     define variable q  as handle    no-undo.
      554     define variable b  as handle    no-undo.
      555     define variable h  as handle    no-undo.
      556     define variable s  as handle    no-undo.
      557     define variable f  as handle    no-undo.
      558   
      559     /* add up the total number of records and size thereof
      560      */
      561   
      562     assign
      563       totRecs  = 0
      564       totBytes = 0
      565     .
      566   
      567     for each tt_ttInfo:
      568       assign
      569         totRecs  = totRecs  + tt_ttInfo.numRecs
      570         totBytes = totBytes + tt_ttInfo.numBytes
      571       .
      572     end.
      573   
      574     create query q.
      575     q:forward-only = no.
      576   
      577     /* get the TT db hit ratio
      578      *     hr = 100.0 * (( lrx - osrx ) / lrx )
      579      */
      580   
      581     h = Progress.Database.TempTableInfo:GetVSTHandle( Progress.Database.VSTTableId:ActSummaryId ).
      582     s = h:default-buffer-handle.
      583   
      584     if false then s:write-xmlschema( "FILE", "actsummary.xsd", true, ?, ? ).      /* dump the definition... */
      585   
      586     q:set-buffers( s ).
      587     q:query-prepare( "preselect each " + s:name ).
      588     q:query-open.
      589   
      590     q:get-first().
      591     ttHR = 100 * int64( s::_Summary-DbAccesses - s::_Summary-DbReads ) / int64( s::_Summary-DbAccesses ).
      592   
      593     assign
      594       ttSumCreate = s::_Summary-RecCreat
      595       ttSumRead   = s::_Summary-RecReads
      596       ttSumUpdate = s::_Summary-RecUpd
      597       ttSumDelete = s::_Summary-RecDel
      598       ttSumLogRd  = s::_Summary-Dbaccesses
      599       ttSumOSRd   = s::_Summary-Dbreads
      600       ttSumOSWr   = s::_Summary-Dbwrites
      601       ttSumTRX    = s::_Summary-Commits
      602       ttSumUndo   = s::_Summary-Undos
      603     .
      604   
      605     q:query-close.
      606   
      607     /* use _filelist to discover the DBI file name
      608      */
      609   
      610     h = Progress.Database.TempTableInfo:GetVSTHandle( Progress.Database.VSTTableId:FileListId ).
      611     f = h:default-buffer-handle.
      612   
      613     if false then f:write-xmlschema( "FILE", "filelist.xsd", true, ?, ? ).        /* dump the definition... */
      614   
      615     q:set-buffers( f ).
      616     q:query-prepare( "preselect each " + f:name ).
      617     q:query-open.
      618   
      619     q:get-first().
      620   
      621     DBIName  = f::_FileList-Name.
      622     DBIBlkSz = f::_FileList-BlkSize.
      623   
      624     DBIFullPath = substitute( "&1&2", session:temp-directory, DBIName ).
      625     file-info:file-name = DBIFullPath.
      626     DBISize = file-info:file-size.
      627   
      628     if DBISize = ? then DBIFullPath = DBIFullPath + " <unlinked>".
      629   
      630     q:query-close.
      631   
      632   
      633   /***
      634   
      635     /* _actbuffer -- nothing very helpful but it might be useful for discussing the use of the LRU chain in temp-tables
      636      */
      637   
      638     h = Progress.Database.TempTableInfo:GetVSTHandle( Progress.Database.VSTTableId:ActBufferId ).
      639     b = h:default-buffer-handle.
      640   
      641     if false then b:write-xmlschema( "FILE", "actbuffer.xsd", true, ?, ? ).       /* dump the definition... */
      642   
      643     q:set-buffers( b ).
      644     q:query-prepare( "preselect each " + b:name ).
      645     q:query-open.
      646   
      647     q:get-first().
      648   
      649     do while b:available:
      650       /* message b::_Buffer-Id b::_Buffer-LRUEnabled b::_Buffer-LRUSkips. */ /* yes, there are 3 ids, LRUskips = 0 */
      651       q:get-next().
      652     end.
      653   
      654     q:query-close.
      655   
      656    ***/
      657   
      658     /* _ActSpace (mostly RM Chain stuff)
      659      */
      660   
      661     h = Progress.Database.TempTableInfo:GetVSTHandle( Progress.Database.VSTTableId:ActSpaceId ).
      662     b = h:default-buffer-handle.
      663   
      664     if false then b:write-xmlschema( "FILE", "actspace.xsd", true, ?, ? ).        /* dump the definition... */
      665   
      666     q:set-buffers( b ).
      667     q:query-prepare( "preselect each " + b:name ).
      668     q:query-open.
      669   
      670     q:get-first().
      671   
      672     do while b:available:
      673   
      674       assign
      675         SpaceDbExd      = b::_Space-DbExd
      676         SpaceTakeFree   = b::_Space-TakeFree
      677         SpaceRetFree    = b::_Space-RetFree
      678         SpaceAllocNewRm = b::_Space-AllocNewRm
      679         SpaceFromRm     = b::_Space-FromRm
      680         SpaceFromFree   = b::_Space-FromFree
      681         SpaceBytesAlloc = b::_Space-BytesAlloc
      682         SpaceExamined   = b::_Space-Examined
      683         SpaceRemoved    = b::_Space-Removed
      684         SpaceFrontAdd   = b::_Space-FrontAdd
      685         SpaceBackAdd    = b::_Space-BackAdd
      686         SpaceFront2Back = b::_Space-Front2Back
      687       .
      688   
      689       q:get-next().
      690   
      691     end.
      692   
      693     q:query-close.
      694   
      695   
      696     /* _DbStatus
      697      */
      698   
      699     h = Progress.Database.TempTableInfo:GetVSTHandle( Progress.Database.VSTTableId:DbStatusId ).
      700     b = h:default-buffer-handle.
      701   
      702     if false then b:write-xmlschema( "FILE", "dbstatus.xsd", true, ?, ? ).        /* dump the definition... */
      703   
      704     q:set-buffers( b ).
      705     q:query-prepare( "preselect each " + b:name ).
      706     q:query-open.
      707   
      708     q:get-first().
      709   
      710     do while b:available:
      711   
      712       assign
      713         DBITotBlks    = b::_DbStatus-TotalBlks
      714         DBIEmptyBlks  = b::_DbStatus-EmptyBlks
      715         DBIFreeBlks   = b::_DbStatus-FreeBlks
      716         DBIRMFreeBlks = b::_DbStatus-RMFreeBlks
      717       .
      718   
      719       /* message "_DbStatus-LastTran"  b::_DbStatus-LastTran.     */      /* # of commits + 64 ... */
      720   
      721       q:get-next().
      722   
      723     end.
      724   
      725     q:query-close.
      726   
      727   &ENDIF
      728   
      729     return.
      730   
      731   end.
      732   
      733   
      734   procedure showTT:
      735   
      736     define variable i as integer no-undo.
      737   
      738     pause before-hide.
      739   
      740     empty temp-table tt_ttInfo.
      741   
      742     run getTTTblList.
      743     run getTTTblCRUD.
      744   
      745     run getTTIdxList.
      746     run getTTIdxCRUD.
      747   
      748     run getArchivedTTList.
      749   
      750     run getTTInfo.
      751   
      752   &IF DEFINED( TTSTATS ) &THEN
      753   
      754     /* summary of tt metrics
      755      */
      756   
      757     message
      758       skip(1)
      759       DBIFullPath /* + fill( " ", 120 - length( DBIFullPath )) */
      760       skip(1)
      761       string( DBIBlkSz,      ">>>>>>>>>>9" ) "DBI Block Size      "     string( numCurrTT,     ">>>>>>>>>>9" ) "current temp-tables   " skip
      762       if DBISize = ? then    "          ?" else string( DBISize,       ">>>>>>>>>>9" )
      763   
      764                                              "DBI File Size       "     string( numArchTT,     ">>>>>>>>>>9" ) "archived              " skip
      765   
      766       string( DBITotBlks,    ">>>>>>>>>>9" ) "DBI Total Blocks    "     string( numPeakTT,     ">>>>>>>>>>9" ) "peak                  " skip
      767       string( DBIEmptyBlks,  ">>>>>>>>>>9" ) "DBI Empty Blocks    "     string( numTTIdx,      ">>>>>>>>>>9" ) "tt indexes            " skip
      768       string( DBIFreeBlks,   ">>>>>>>>>>9" ) "DBI Free Blocks     "     string( totRecs,       ">>>>>>>>>>9" ) "total current records " skip
      769       string( DBIRMFreeBlks, ">>>>>>>>>>9" ) "DBI RM Free Blocks  "     string( totBytes,      ">>>>>>>>>>9" ) "total current bytes   "
      770       skip(1)
      771       string( ttHR,          ">>>>>>9.99%" ) "tt hit ratio"
      772       skip(1)
      773       string( ttSumCreate,   ">>>>>>>>>>9" ) "tt rec create       " skip
      774       string( ttSumRead,     ">>>>>>>>>>9" ) "tt rec read         " skip
      775       string( ttSumUpdate,   ">>>>>>>>>>9" ) "tt rec update       " skip
      776       string( ttSumDelete,   ">>>>>>>>>>9" ) "tt rec delete       " skip
      777       string( ttSumLogRd,    ">>>>>>>>>>9" ) "tt rec log rd       " skip
      778       string( ttSumOSRd,     ">>>>>>>>>>9" ) "tt rec os rd        " skip
      779       string( ttSumOSWr,     ">>>>>>>>>>9" ) "tt rec os wr        " skip
      780       string( ttSumTRX,      ">>>>>>>>>>9" ) "tt TRX              " skip
      781       string( ttSumUndo,     ">>>>>>>>>>9" ) "tt Undos            " skip
      782       skip(1)
      783      view-as alert-box title " Temp-Table Info ".
      784   
      785     /* prompt user for a filter: "" results in all records being displayed
      786      */
      787   
      788     option_blk: do:
      789   
      790       do
      791         on endkey undo, leave
      792         on error  undo, leave
      793         on stop   undo, leave
      794         on quit   undo, leave:
      795   
      796         update
      797           skip(1)
      798           tblFilter   space(4) "leave blank to view all tables  " skip
      799           outFileName space(4) "leave blank to view on screen   "  skip
      800           skip(1)
      801          with
      802           frame ttInfo_options
      803           title " TT Info Display Options "
      804           overlay
      805           side-labels
      806           row 3
      807           column 10
      808         .
      809   
      810         hide frame ttInfo_options.
      811         leave option_blk.
      812   
      813       end.
      814   
      815       hide frame ttInfo_options.
      816       return.
      817   
      818     end.
      819   
      820   
      821     /* detailed TT metrics
      822      */
      823   
      824     if Progress.Database.TempTableInfo:ArchiveTableStatistics <> true then
      825       do:
      826         message
      827           skip(1)
      828           "  Temp-table CRUD statistics were not collected.  This is probably   " skip
      829           "  because the -tt* parameters in etc/protop.pf need to be set.       " skip
      830           skip(1)
      831          view-as alert-box title " Temp-Table Details Warning "
      832         .
      833       end.
      834   
      835     if outFileName = "" then
      836       output stream outStrm to terminal.
      837      else
      838       output stream outStrm to value( outFileName ).
      839   
      840     for each tt_ttInfo where ttName begins tblFilter
      841        break by ttId by ttProcName by idxId by xid:
      842   
      843       display stream outStrm
      844       /* xid */ 
      845       /* ttId */
      846       /* idxId */
      847          ttName
      848          ttProcName
      849          numBytes
      850          numRecs
      851          ts_create
      852          ts_read
      853          ts_update
      854          ts_delete
      855          ts_osread
      856          ttDeleted
      857         with
      858          frame show_ttDetails
      859          title " Temp-Table Details "
      860          overlay
      861          row 2
      862          /* column 1 */
      863          width 132
      864          centered
      865          down
      866          stream-io
      867        .
      868   
      869       if last-of( ttId ) then down 1 with frame show_ttDetails.
      870   
      871     end.
      872   
      873     output stream outStrm close.
      874     hide frame show_ttDetails.
      875   
      876   &ELSE
      877   
      878     message
      879       ' temp-table info requires OpenEdge 11 or higher and you must set "TTDEBUG=yes" in bin/localenv ~n~n  You must also uncomment the -tt* parameters in etc/protop.pf'
      880      view-as alert-box title " Session Temp-Table Info ".
      881   
      882   &ENDIF
      883   
      884     pause 0 before-hide.
      885   
      886     return.
      887   
      888   end.
      889   
      890   
      891   /* the end */
