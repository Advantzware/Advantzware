        1   /* lib/install.p
        2    *
        3    * tailor a ProTop version 3 install
        4    *
        5    */
        6   
        7   define new global shared variable dbgMode   as integer no-undo initial 3.
        8   define new global shared variable waitLimit as integer no-undo.
        9   
       10   define variable envDLC     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "    OpenEdge".
       11   define variable envPT3     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "    ProTop 3".
       12   define variable envLOG     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "   Log Files".
       13   define variable envTMP     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "  Temp Files".
       14   define variable envRPT     as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "     Reports".
       15   
       16   define variable envPROXY   as character no-undo.
       17   define variable envHOST    as character no-undo.
       18   define variable envUPD     as character no-undo.
       19   
       20   define variable srvName    as character no-undo.
       21   define variable pvers      as character no-undo.
       22   
       23   define variable custId     as character no-undo format "x(250)" view-as fill-in size 15 by 1 label " Customer ID".
       24   
       25   define new global shared
       26          variable pt_proxy   as character no-undo format "x(250)" view-as fill-in size 40 by 1 label "       Proxy".
       27   
       28   define variable PT3env     as character no-undo.                /* bin/protopenv -- not $PROTOP         */
       29   
       30   define variable ok         as logical   no-undo.
       31   define variable useSockets as logical   no-undo.
       32   define variable DS         as character no-undo.
       33   define variable f          as character no-undo.
       34   define variable p          as character no-undo.
       35   
       36   define variable bkupName   as character no-undo.
       37   define variable stubDir    as character no-undo.
       38   define variable stubName   as character no-undo.
       39   define variable baseName   as character no-undo.
       40   define variable saveName   as character no-undo.
       41   define variable scriptName as character no-undo.
       42   
       43   define stream instStream.
       44   define stream inStrm.
       45   
       46   
       47   /* lib/v9.i
       48    *
       49    */
       50   
       51   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       52   &global-define  CPYLOB  "no"
       53   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       54   &global-define  LNGCR   character
       55   &global-define  DTZ     integer
       56   &global-define  BIGINT  decimal
       57   &ELSE
       58   &global-define  OE10    "yes"
       59   &global-define  NOW     now
       60   &global-define  LNGCR   longchar
       61   &global-define  DTZ     datetime-tz
       62   &global-define  BIGINT  int64
       63   &ENDIF
       64    
       65   
       66   /* lib/osinfo.i
       67    *
       68    * minimalist example:
       69    *
       70    *      {lib/v9.i}
       71    *
       72    *      define stream inStrm.           /* be wary of possible duplicates */
       73    *
       74    *      {lib/osinfo.i}
       75    *
       76    *      run osInfo.
       77    *
       78    *      for each tt_osInfo:
       79    *        display tt_osInfo with side-labels 1 column.
       80    *      end.
       81    *
       82    */
       83   
       84   define temp-table tt_OSInfo no-undo
       85   
       86     field hostName  as character label "Host"      format "x(30)"
       87     field osName    as character label "OS"        format "x(100)"
       88     field osVersion as character label "osVersion" format "x(30)"
       89     field keVersion as character label "keVersion" format "x(30)"
       90     field osUpTime  as character label "Up Time"   format "x(30)"
       91   
       92     field maxFileSz  as character label "Max File Size"   format "x(16)"
       93     field maxOpenFl  as character label "Max Open Files"  format "x(16)"
       94     field maxProcMem as character label "Max Proc Memory" format "x(16)"
       95     field maxProcs   as character label "Max Processes"   format "x(16)"
       96   
       97     field maxStack   as character label "Max Stack"       format "x(16)"
       98     field maxDataSeg as character label "Max Data Seg"    format "x(16)"
       99   
      100     field SEMMNS     as character initial "n/a" format "x(16)"
      101     field SEMMNI     as character initial "n/a" format "x(16)"
      102     field SEMMSL     as character initial "n/a" format "x(16)"
      103     field SEMOPM     as character initial "n/a" format "x(16)"
      104     field SHMMAX     as character initial "n/a" format "x(16)"
      105     field SHMMNI     as character initial "n/a" format "x(16)"
      106     field SHMALL     as character initial "n/a" format "x(16)"
      107     field osPageSize as integer
      108   
      109     field modelCPU   as character format "x(30)"
      110     field clkCPU     as character format "x(16)"
      111     field numCPU     as character format "x(16)"
      112     field memTotal   as character format "x(16)"
      113   
      114     field memBufs    as decimal format ">>>>>>>>>>>>>>>>>>>>9"
      115     field memCached  as decimal format ">>>>>>>>>>>>>>>>>>>>9"
      116     field memShared  as decimal format ">>>>>>>>>>>>>>>>>>>>9"
      117     field memActive  as decimal format ">>>>>>>>>>>>>>>>>>>>9"
      118     field memInAct   as decimal format ">>>>>>>>>>>>>>>>>>>>9"
      119     field memFree    as decimal format ">>>>>>>>>>>>>>>>>>>>9"
      120   
      121     index hostName-idx is unique primary hostName
      122   .
      123   
      124   define variable linuxPatch as logical initial yes.
      125   
      126   procedure getAIX:
      127   
      128     define variable inLine as character no-undo extent 16.
      129     define variable xLine  as character no-undo.
      130   
      131     find tt_OSInfo no-error.
      132   
      133     return.
      134   
      135   end.
      136   
      137   procedure getSunOS:
      138   
      139     define variable inLine as character no-undo extent 16.
      140     define variable xLine  as character no-undo.
      141   
      142     find tt_OSInfo no-error.
      143   
      144     /* $ uname -X
      145      * System = SunOS
      146      * Node = traxlive
      147      * Release = 5.10
      148      * KernelID = Generic_142900-03
      149      * Machine = sun4u
      150      * BusType = <unknown>
      151      * Serial = <unknown>
      152      * Users = <unknown>
      153      * OEM# = 0
      154      * Origin# = 1
      155      * NumCPU = 48
      156      */
      157   
      158     input stream inStrm through value( "uname -X" ).
      159     repeat:
      160   
      161        xLine = "".
      162        import stream inStrm unformatted xLine.
      163   
      164        if       index( xLine, "NumCPU" )   > 0 then numCPU    = trim( entry( 2, xLine, "=" )).
      165         else if index( xLine, "Release" )  > 0 then osVersion = trim( entry( 2, xLine, "=" )).
      166         else if index( xLine, "KernelID" ) > 0 then keVersion = trim( entry( 2, xLine, "=" )).
      167   
      168     end.
      169     input stream inStrm close.
      170   
      171     /* $ nslookup traxlive
      172      * Server:         10.1.8.21
      173      * Address:        10.1.8.21#53
      174      * 
      175      * Name:   traxlive.intcomex.com
      176      * Address: 10.1.10.178
      177      */
      178   
      179     xLine = "".
      180     input stream inStrm through value( "nslookup " + hostName + " | grep Name" ).
      181     import stream inStrm unformatted xLine.
      182     if index( xLine, hostName ) > 0 then hostName = trim( entry( 2, xLine, ":" )).
      183     input stream inStrm close.
      184   
      185     /* $ /usr/sbin/prtconf | more
      186      * System Configuration:  Sun Microsystems  sun4u
      187      * Memory size: 131072 Megabytes
      188      * System Peripherals (Software Nodes):
      189      * 
      190      * SUNW,SPARC-Enterprise
      191      * ...
      192      */
      193   
      194     xLine = "".
      195     input stream inStrm through value( '/usr/sbin/prtconf | grep "Memory size:"' ).               /* reported in Megabytes...     */
      196     import stream inStrm unformatted xLine.
      197     memTotal = trim( entry( 3, xLine, " " )).
      198     input stream inStrm close.
      199   
      200     memTotal = trim( string( decimal( memTotal ) / 1024, ">>>>>>>>9.99" )) + " GB" no-error.
      201   
      202     /*                            Old             Old       New         New
      203      *  Resource control          tunable         default   Max value   default
      204      *  ----------------------    -------------   -------   ---------   ----------
      205      *  process.max-sem-ops       seminfo_semopm  10        INT_MAX     512
      206      *  process.max-sem-nsems     seminfo_semmsl  25        SHRT_MAX    512
      207      *  project.max-sem-ids       seminfo_semmni  10        2**24       128
      208      *
      209      *  project.max-shm-memory    shminfo_shmmax  0x800000  UINT64_MAX  1/4 physmem
      210      *  project.max-shm-ids       shminfo_shmmni  100       2**24       128
      211      *
      212      *  $ prctl -n process.max-sem-ops $$
      213      *  process: 21592: -bash
      214      *  NAME    PRIVILEGE       VALUE    FLAG   ACTION                       RECIPIENT
      215      *  process.max-sem-ops
      216      *          privileged        512       -   deny                                 -
      217      *          system          2.15G     max   deny                                 -
      218      *
      219      *  $ prctl -n process.max-sem-ops $PPID | grep privileged
      220      *  semopm         privileged        512       -   deny 
      221      *
      222      *  $ prctl -n process.max-sem-ops -P $PPID | grep privileged
      223      *  process.max-sem-ops privileged 512 - deny -
      224      *
      225      */
      226   
      227     inLine = "".
      228     input stream inStrm through value( 'prctl -n process.max-sem-ops -P $PPID | grep privileged' ).
      229     import stream inStrm inLine.
      230     if inLine[2] <> "failed" then SEMOPM = trim( inLine[3] ).
      231     input stream inStrm close.
      232   
      233     inLine = "".
      234     input stream inStrm through value( 'prctl -n process.max-sem-nsems -P $PPID | grep privileged' ).
      235     import stream inStrm inLine.
      236     if inLine[2] <> "failed" then SEMMSL = trim( inLine[3] ).
      237     input stream inStrm close.
      238   
      239     inLine = "".
      240     input stream inStrm through value( 'prctl -n process.max-sem-ids $PPID | grep privileged' ).
      241     import stream inStrm inLine.
      242     if inLine[2] <> "failed" then SEMMNI = trim( inLine[3] ).
      243     input stream inStrm close.
      244   
      245     inLine = "".
      246     input stream inStrm through value( 'prctl -n process.max-shm-memory $PPID | grep privileged' ).
      247     import stream inStrm inLine.
      248     if inLine[2] <> "failed" then SHMMAX = trim( inLine[3] ).
      249     input stream inStrm close.
      250   
      251     inLine = "".
      252     input stream inStrm through value( 'prctl -n process.maxx-shm-ids $PPID | grep privileged' ).
      253     import stream inStrm inLine.
      254     if inLine[2] <> "failed" then SHMMNI = trim( inLine[3] ).
      255     input stream inStrm close.
      256   
      257     osPageSize = 4096.
      258   
      259     /* $ psrinfo -v | grep "operates at" | head -1
      260      *  The sparcv9 processor operates at 2530 MHz,
      261      */
      262   
      263     inLine = "".
      264     input stream inStrm through value( 'psrinfo -v | grep "operates at" | head -1' ).
      265     import stream inStrm inLine.
      266     if inLine[4] = "operates" then
      267       assign
      268         modelCPU = inLine[2]
      269         clkCPU   = inLine[6] + " " + inline[7]
      270       .
      271     input stream inStrm close.
      272   
      273     return.
      274   
      275   end.
      276   
      277   procedure getHPUX:
      278   
      279     define variable inLine as character no-undo extent 16.
      280     define variable xLine  as character no-undo.
      281   
      282     find tt_OSInfo no-error.
      283   
      284   /* "machinfo"... */
      285   
      286   
      287   
      288   /* HP-UX just has to be different :(
      289    *
      290    * $ uname -a
      291    * 
      292    * HP-UX uslvsheila02 B.11.31 U ia64 1827409880 unlimited-user license
      293    * 
      294    * $ ulimit -a
      295    * time(seconds)        unlimited
      296    * file(blocks)         unlimited
      297    * data(kbytes)         3932160
      298    * stack(kbytes)        262140
      299    * memory(kbytes)       unlimited
      300    * coredump(blocks)     4194303
      301    * 
      302    */
      303   
      304   /* In HP/UX v 11, the command to display kernel parameters is kctune and we can grep to see the semaphore settings.
      305    *
      306    * $ /usr/sbin/kconfig -v
      307    * Configuration last_install
      308    * Title         Created by last OS install
      309    * Created       Tue Dec 14 12:29:49 2010 by root
      310    *               by saving the running configuration
      311    * Modified      Tue Dec 14 12:29:50 2010 by root
      312    * Kernel Path   /stand/last_install/vmunix
      313    * 
      314    * $ /usr/sbin/kctune -c last_install | grep sem
      315    *
      316    * sema                 1
      317    * semaem               16384
      318    * semmap               (SEMMNI+2)
      319    * semmni               200
      320    * semmns               800
      321    * semmnu               30
      322    * semume               10
      323    * semvmx               32767
      324    */
      325   
      326     return.
      327   
      328   end.
      329   
      330   procedure getWIN32:
      331   
      332     define variable inLine as character   no-undo extent 16.
      333     define variable xLine  as character   no-undo.
      334   
      335     define variable i      as integer     no-undo.
      336   
      337     define variable dtz    as datetime-tz no-undo.
      338   
      339     find tt_OSInfo no-error.
      340   
      341     xLine = "".
      342     input stream inStrm through value( 'wmic os get csname' ).
      343     import stream inStrm unformatted xLine.
      344     import stream inStrm unformatted hostName.
      345     input stream inStrm close.
      346   
      347     xLine = "".
      348     input stream inStrm through value( 'wmic os get caption' ).
      349     import stream inStrm unformatted xline.
      350     import stream inStrm unformatted osName.
      351     input stream inStrm close.
      352     osName = substring( osName, 11 ).
      353   
      354     xLine = "".
      355     input stream inStrm through value( 'wmic os get version' ).
      356     import stream inStrm unformatted xline.
      357     import stream inStrm unformatted osVersion.
      358     input stream inStrm close.
      359   
      360     xLine = "".
      361     input stream inStrm through value( 'wmic cpu get name' ).
      362     import stream inStrm unformatted xline.
      363     import stream inStrm unformatted modelCPU.
      364     input stream inStrm close.
      365     modelCPU = replace( modelCPU, "(R)", "" ).
      366     modelCPU = replace( modelCPU, "(TM)", "" ).
      367     i = index( modelCPU, "CPU" ).
      368     if i > 0 then modelCPU = substring( modelCPU, 1, i - 2 ).
      369     i = index( modelCPU, "processor" ).
      370     if i > 0 then modelCPU = substring( modelCPU, 1, i - 2 ).
      371   
      372     xLine = "".
      373     input stream inStrm through value( 'wmic cpu get maxclockspeed' ).
      374     import stream inStrm unformatted xline.
      375     import stream inStrm unformatted clkCPU.
      376     input stream inStrm close.
      377     clkCPU = trim( string( ( decimal( clkCPU ) / 1000.0 ), ">>>>>>9.99" )) + " Ghz".
      378   
      379     xLine = "".
      380     input stream inStrm through value( 'wmic cpu get numberoflogicalprocessors' ).
      381     import stream inStrm unformatted xline.
      382     import stream inStrm unformatted numCPU.
      383     input stream inStrm close.
      384   
      385     xLine = "".
      386     input stream inStrm through value( 'wmic computersystem get totalphysicalmemory' ).
      387     import stream inStrm unformatted xline.
      388     import stream inStrm unformatted memTotal.
      389     input stream inStrm close.
      390     memTotal = trim( string( ( decimal( memTotal ) / ( 1024 * 1024 * 1024 )), ">>>>>>>9.99" )) + " GB".
      391   
      392     xLine = "".
      393     input stream inStrm through value( 'wmic os get lastbootuptime' ).
      394     import stream inStrm unformatted xline.
      395     import stream inStrm unformatted osUpTime.
      396     input stream inStrm close.
      397   
      398   &IF DEFINED( OE10 ) &THEN
      399   
      400     dtz = datetime-tz(
      401       integer( substring( osUpTime,  5, 2 )),             /* month        */
      402       integer( substring( osUpTime,  7, 2 )),             /* day          */
      403       integer( substring( osUpTime,  1, 4 )),             /* year         */
      404       integer( substring( osUpTime,  9, 2 )),             /* hours        */
      405       integer( substring( osUpTime, 11, 2 )),             /* minutes      */
      406       integer( substring( osUpTime, 13, 2 )),             /* seconds      */
      407       integer( integer( substring( osUpTime, 16, 6 )) / 1000 ),   /* milliseconds */
      408       integer( substring( osUpTime, 22 ))                 /* TZ           */
      409     ).
      410   
      411     osUpTime =
      412       string( abs ( interval( dtz, now, "days" )), ">>>>>>" ) + " " +
      413       string( abs ( interval( dtz, now, "seconds" )), "hh:mm:ss" )
      414     .
      415   
      416     osUpTime = trim( osUpTime ).
      417   
      418   &ENDIF
      419   
      420     return.
      421   
      422   end.
      423   
      424   procedure getLinux:
      425   
      426     define variable inLine as character no-undo extent 16.
      427     define variable xLine  as character no-undo.
      428   
      429     find tt_OSInfo no-error.
      430   
      431     if search( "/etc/SuSE-release" ) <> ? then                 /* SuSE */
      432       /* sample:
      433       SUSE Linux Enterprise Server 10 (x86_64)
      434       VERSION = 10
      435       PATCHLEVEL = 2
      436       */
      437       do:
      438         input stream inStrm from value( "/etc/SuSE-release" ).
      439         import stream inStrm unformatted xLine.
      440         osName = xline. /* substring( xLine, 1, 30 ). */
      441         xLine = "".
      442         import stream inStrm unformatted xLine.
      443         osVersion = entry( 3, xLine, " " ) + ".".
      444         xLine = "".
      445         import stream inStrm unformatted xLine.
      446         osVersion = osVersion + entry( 3, xLine, " " ).
      447         input stream inStrm close.
      448       end.
      449      else if search( "/etc/centos-release" ) <> ? then          /* CentOS */
      450       /* sample:
      451       CentOS release 6.5 (Final)
      452       */
      453       do:
      454         input stream inStrm through value( 'cut -b 1-25 "/etc/centos-release"' ).
      455         import stream inStrm unformatted osName.
      456         input stream inStrm close.
      457         osVersion = entry( 3, osName, " " ).
      458       end.
      459      else if search( "/etc/redhat-release" ) <> ? then          /* RH (or a clone?) */
      460       /* sample:
      461       Red Hat Enterprise Linux Server release 6.3 (Santiago)
      462       */
      463       do:
      464         input stream inStrm from value( "/etc/redhat-release" ).
      465         import stream inStrm unformatted xLine.
      466         input stream inStrm close.
      467         osName = xLine. /* substring( xLine, 1, 25 ). */
      468         osVersion = entry( 2, substring( xLine, index( xLine, "release" ) ), " " ).
      469       end.
      470      else                                                       /* some other Linux */
      471       do:
      472         input stream inStrm through value( 'uname' ).
      473         import stream inStrm osName.
      474         input stream inStrm close.
      475       end.
      476   
      477     input stream inStrm from value( "/proc/sys/kernel/sem" ).
      478     import stream inStrm SEMMSL SEMMNS SEMOPM SEMMNI.
      479     input stream inStrm close.
      480   
      481     input stream inStrm from value( "/proc/sys/kernel/shmmax" ).
      482     import stream inStrm SHMMAX.
      483     input stream inStrm close.
      484   
      485     input stream inStrm through value( "getconf PAGESIZE" ).
      486     import stream inStrm osPageSize.   /* in bytes */
      487     input stream inStrm close.
      488   
      489     SHMMAX = string( decimal( SHMMAX ) / ( 1024 * 1024 * 1024 ), ">>>>>>>>>>>>>>>>>>>>9" ) + " GB".
      490   
      491     input stream inStrm from value( "/proc/sys/kernel/shmmni" ).
      492     import stream inStrm SHMMNI.
      493     input stream inStrm close.
      494   
      495     input stream inStrm from value( "/proc/sys/kernel/shmall" ).
      496     import stream inStrm SHMALL.
      497     input stream inStrm close.
      498   
      499     SHMALL = string(( decimal( SHMALL ) / ( 1024 * 1024 * 1024 )) * osPageSize, ">>>>>>>>>>>>>>>>>>>>9" ) + " GB".
      500   
      501     input stream inStrm from value( "/proc/cpuinfo" ).
      502     repeat:
      503       xLine = "".
      504       import stream inStrm unformatted xLine.
      505       if       xLine begins "model name" then modelCPU = entry( 2, xLine, ":" ).
      506        else if xLine begins "cpu MHz"    then clkCPU   = trim( string( decimal( trim( entry( 2, xLine, ":" ))) / 1024, ">>>>>9.99" )).
      507        else if xLine begins "core id"    then leave.
      508     end.
      509     input stream inStrm close.
      510   
      511     input stream inStrm through value( 'grep "processor" /proc/cpuinfo | wc -l' ).
      512     import stream inStrm numCPU.
      513     input stream inStrm close.
      514   
      515     clkCPU = clkCPU + " GHz".
      516   
      517     if modelCPU <> "" then
      518       do:
      519         assign
      520           modelCPU = entry( 1, modelCPU, "@" )
      521           modelCPU = replace( modelCPU, "(R)", "" )
      522           modelCPU = replace( modelCPU, "Intel", "" )
      523           modelCPU = replace( modelCPU, "CPU", "" )
      524         .
      525         do while index( modelCPU, "  " ) > 0:
      526           modelCPU = replace( modelCPU, "  ", " " ).
      527         end. 
      528       end.
      529   
      530     input stream inStrm from value( "/proc/meminfo" ).
      531     repeat:
      532       xLine = "".
      533       import stream inStrm unformatted xLine.
      534       if       xLine begins "MemTotal"   then memTotal  = trim( string( decimal( entry( 1, trim( entry( 2, xLine, ":" )), " " )) / ( 1024 * 1024 ), ">>>>>>>>>>>>9.99 GB" )).
      535     /*** this is more of a realtime dashboard -- nmon or top are much better for this
      536      ***
      537        else if xLine begins "MemFree"    then memFree   = decimal( entry( 1, trim( entry( 2, xLine, ":" )), " " )) / ( 1024 * 1024 ).
      538        else if xLine begins "Buffers"    then memBufs   = decimal( entry( 1, trim( entry( 2, xLine, ":" )), " " )) / ( 1024 * 1024 ).
      539        else if xLine begins "Cached"     then memCached = decimal( entry( 1, trim( entry( 2, xLine, ":" )), " " )) / ( 1024 * 1024 ).
      540        else if xLine begins "Shmem"      then memShared = decimal( entry( 1, trim( entry( 2, xLine, ":" )), " " )) / ( 1024 * 1024 ).
      541        else if xLine begins "Active:"    then memActive = decimal( entry( 1, trim( entry( 2, xLine, ":" )), " " )) / ( 1024 * 1024 ).
      542        else if xLine begins "Inactive:"  then memInAct  = decimal( entry( 1, trim( entry( 2, xLine, ":" )), " " )) / ( 1024 * 1024 ).
      543      ***
      544      ***/
      545        else if xLine begins "Slab" then leave.
      546     end.
      547     input stream inStrm close.
      548   
      549     input stream inStrm through value( "nslookup " + hostName + " | grep canonical" ).    /* Linux only?  */
      550     import stream inStrm xLine.
      551     if index( xLine, hostName ) > 0 then hostName = xLine.
      552     input stream inStrm close.
      553   
      554     return.
      555   
      556   end.
      557   
      558   procedure osInfo:
      559   
      560     define variable inLine as character no-undo extent 16.
      561     define variable xLine  as character no-undo.
      562   
      563     find tt_OSInfo no-error.
      564     if not available( tt_osinfo ) then create tt_osinfo.
      565   
      566     if opsys begins "WIN" then
      567       assign
      568         osName = "Please apply the Linux patch ;)"
      569         linuxPatch = yes
      570       .
      571      else
      572       do:
      573         input stream inStrm through value( "uname -a" ).
      574         import stream inStrm osName hostName keVersion.
      575         input stream inStrm close.
      576       end.
      577   
      578     if opsys <> "WIN32" then
      579       do:
      580   
      581         input stream inStrm through value( "ulimit -a" ).         /* this should be portable across all unix implementations...   */
      582                                                                   /* except, of course, for HP-UX :(                              */
      583         repeat:
      584   
      585           /* $ ulimit -a
      586            * time(seconds)        unlimited
      587            * file(blocks)         unlimited
      588            * data(kbytes)         3932160
      589            * stack(kbytes)        262140
      590            * memory(kbytes)       unlimited
      591            * coredump(blocks)     4194303
      592            */
      593   
      594           xLine = "".
      595           import stream inStrm unformatted xLine.
      596   
      597           if index( xLine, "-f)" ) > 0 or xLine begins "file(blocks)" then
      598             do:
      599               maxFileSz  = trim( entry( 2, xLine, ")" )).                                                                                 /* ulimit -f    */
      600               if maxFileSz <> "unlimited" then 
      601                 maxFileSz  = string( decimal( maxFileSz ) / ( 1024 * 1024 * 2 )) + " GB" no-error.                                        /* ulimit value is in "blocks"  */
      602             end.
      603            else if index( xLine, "-n)" ) > 0 then maxOpenFl  = trim( entry( 2, xLine, ")" )) no-error.                                    /* ulimit -n    */
      604            else if index( xLine, "-u)" ) > 0 then maxProcs   = trim( entry( 2, xLine, ")" )) no-error.                                    /* ulimit -u    */
      605            else if index( xLine, "-s)" ) > 0 or xLine begins "stack(kbytes)"  then maxStack   = trim( entry( 2, xLine, ")" )) no-error.   /* ulimit -s    */
      606            else if index( xLine, "-d)" ) > 0 or xLine begins "data(kbytes)"   then maxDataSeg = trim( entry( 2, xLine, ")" )) no-error.   /* ulimit -d    */
      607            else if index( xLine, "-m)" ) > 0 or xLine begins "memory(kbytes)" then maxProcMem = trim( entry( 2, xLine, ")" )) no-error.   /* ulimit -m    */
      608   
      609   /***
      610    *      if       inLine[1] = "file"  and inLine[2] = "size"   then maxFileSz  = inLine[5].      /* ulimit -f    */
      611    *       else if inLine[1] = "open"  and inLine[2] = "files"  then maxOpenFl  = inLine[4].      /* ulimit -n    */
      612    *       else if inLine[1] = "max"   and inLine[2] = "memory" then maxProcMem = inLine[6].      /* ulimit -m    */
      613    *       else if inLine[1] = "max"   and inLine[2] = "user"   then maxProcs   = inLine[5].      /* ulimit -u    */
      614    *       else if inLine[1] = "stack" and inLine[2] = "size"   then maxStack   = inLine[5].      /* ulimit -s    */
      615    *       else if inLine[1] = "data"  and inLine[2] = "seg"    then maxDataSeg = inLine[6].      /* ulimit -d    */
      616    *       /*
      617    *       else if inLine[1] = "max"   and inLine[2] = "user"   then maxProcs   = inLine[5].      /* ulimit -     */
      618    *       else if inLine[1] = "max"   and inLine[2] = "user"   then maxProcs   = inLine[5].      /* ulimit -     */
      619    *        */
      620    ***/
      621   
      622         end.
      623         input stream inStrm close.
      624   
      625       end.
      626   
      627     if       osName = "Linux" then run getLinux.
      628      else if osName = "AIX"   then run getAIX.
      629      else if osName = "SunOS" then run getSunOS.
      630      else if osName = "HPUX"  then run getHPUX.
      631      else if opsys  = "WIN32" then run getWIN32.
      632   
      633     return.
      634   
      635   end.
      636   
      637    
      638   
      639   if os-getenv( "USESOCKETS" ) = "no" then
      640     useSockets = no.
      641    else
      642     useSockets = yes.
      643   
      644   run ssg/sausage02.p persistent.
      645   run ssg/sausage06.p persistent.
      646   
      647   
      648   /* allow the debug mode to be set externally
      649    */
      650   
      651   define variable x as integer no-undo.
      652   
      653   x = integer( os-getenv( "DBGMODE" )).
      654   
      655   if x <> ? and x > 0 and x < 9 then dbgMode = x.
      656   
      657   
      658   /*****/
      659   
      660   
      661   /* logMsg
      662    *
      663    * three ways to call it:
      664    *
      665    * logMsg( msgLevel, messageText ).
      666    * publish "logMsg" ( msgLevel, messageText ).
      667    * run doLogMsg ( msgLevel, messageText ).
      668    *
      669    */
      670   
      671   define new global shared variable logLevel as integer no-undo initial 5.
      672   
      673   define stream logStream.
      674   
      675   subscribe to "logMsg" anywhere run-procedure "doLogMsg".
      676   
      677   function logMsg returns logical ( input msgLevel as integer, input msgText as character ):
      678   
      679     run doLogMsg( msgLevel, msgText ).
      680   
      681     return true.
      682   
      683   end.
      684   
      685   
      686   procedure doLogMsg:
      687   
      688     define input parameter msgLevel as integer   no-undo.
      689     define input parameter msgText  as character no-undo.
      690   
      691     if msgLevel <= logLevel then
      692       do:
      693         output stream logStream to value( "pt3inst.log" ) append.
      694         put stream logStream unformatted today " " string( time, "hh:mm:ss" ) " " msgText skip.
      695         output stream logStream close.
      696       end.
      697   
      698     return.
      699   
      700   end.
      701   
      702   
      703   define stream stubStream.
      704   define stream scriptStream.
      705   
      706   procedure tailor:
      707   
      708     define input parameter srcFile as character no-undo.
      709     define input parameter dstFile as character no-undo.
      710   
      711     define variable scriptBody as character no-undo.
      712   
      713     if session:batch = no and dbgMode > 3 then message "Tailoring:" srcFile "==>" dstFile.
      714   
      715     /* copy-lob would be nice but we are still supporting v9...
      716      */
      717   
      718     input stream stubStream from  value( srcFile ).
      719     output stream scriptStream to value( dstFile ).
      720   
      721     repeat:
      722   
      723       scriptBody = "".
      724       import stream stubStream unformatted scriptBody.
      725   
      726       scriptBody = replace( scriptBody, "#PT3ENV#", PT3env ).
      727       scriptBody = replace( scriptBody, "#ENVDLC#", envDLC ).
      728       scriptBody = replace( scriptBody, "#ENVPT3#", envPT3 ).
      729       scriptBody = replace( scriptBody, "#ENVLOG#", envLOG ).
      730       scriptBody = replace( scriptBody, "#ENVTMP#", envTMP ).
      731       scriptBody = replace( scriptBody, "#ENVRPT#", envRPT ).
      732       scriptBody = replace( scriptBody, "#PTHOST#", envHOST ).
      733       scriptBody = replace( scriptBody, "#PTUPD#",  envUPD ).
      734   
      735       if index( stubName, "protop.cfg" ) > 0 and pt_proxy <> "" then
      736         scriptBody = replace( scriptBody, "#PROXY#",  "proxy      " + pt_proxy ).
      737        else
      738         scriptBody = replace( scriptBody, "#PROXY#",  pt_proxy ).
      739   
      740       put stream scriptStream unformatted scriptBody skip.
      741       if scriptBody = "" then put stream scriptStream unformatted skip(1).
      742   
      743     end.
      744     input stream stubStream close.
      745     output stream scriptStream close.
      746   
      747     return.
      748   
      749   end.
      750   
      751   
      752   /* main body
      753    */
      754   
      755   pause 0 before-hide.
      756   
      757   if session:batch = no then run lib/chkscreen.p.
      758   
      759   DS = ( if opsys begins "win" then "~\" else "/" ).
      760   
      761   f = "lib/install.p".
      762   
      763   if envPT3 = "" then
      764     do:
      765   
      766       /* the windows wix installer cannot set the current directory to the install directory
      767        * so we have to figure it out based on the absolute path to lib/install.p (this program)
      768        *
      769        */
      770   
      771       file-info:file-name = search( f ).
      772       p = file-info:full-pathname.
      773       if p = ? then
      774         do:
      775           logMsg( 0, substitute( "search( &1 ) failed -- trying: &2", f, "/home/protop/lib/install.p" )).
      776           if session:batch = no then message "search(" f ") failed -- trying /home/protop/lib/install.p".
      777           file-info:file-name = "/home/protop/lib/install.p".
      778           p = file-info:full-pathname.
      779         end.
      780   
      781       if p = ? then
      782         do:
      783           logMsg( 0, "Unknown install path, shamefully quitting." ).
      784           if session:batch = no then message "Unknown install path, shamefully quitting.".
      785           quit.
      786         end.
      787   
      788       envPT3 = substring( p, 1, length( p ) - length( f ) - 1 ).
      789   
      790     end.
      791   
      792   if session:batch = no then 
      793     do:
      794       message "ProTop 3 is being installed in:" envPT3.
      795       message "Detailed log is: pt3inst.log".
      796     end.
      797   
      798   logMsg( 0, substitute( "ProTop 3 is being installed in: &1, DS = &2", envPT3, DS )).
      799   
      800   assign
      801     envDLC   = os-getenv( "DLC" )
      802     envLOG   = os-getenv( "LOGDIR" )
      803     envTMP   = os-getenv( "TMPDIR" )
      804     envRPT   = os-getenv( "RPTDIR" )
      805     custId   = os-getenv( "CUSTID" )
      806     envHOST  = os-getenv( "PTHOST" )
      807     envUPD   = os-getenv( "PTUPD" )
      808     envPROXY = os-getenv( "PROXY" )
      809   .
      810   
      811   if envDLC   = ? then envDLC   = "".
      812   if envPROXY = ? then envPROXY = "".
      813   
      814   pt_proxy = envPROXY.
      815   
      816   if envHOST  = ? or envHOST = "" then envHOST = "demo.wss.com".
      817   if envUPD   = ? or envUPD  = "" then envUPD  = "demo.wss.com".
      818   
      819   logMsg( 0, ( if session:parameter = "" then "environment variables" else "session:parameter" )).
      820   logMsg( 0, substitute( "Values provided: [DLC=&1] [LOGDIR=&2] [TMPDIR=&3] [RPTDIR=&4] [CUSTID=&5] [ENVPT3=&6] [PTHOST=&7] [PTUPD=&8] [PROXY=&9]", envDLC, envLOG, envTMP, envRPT, custId, envPT3, envHOST, envUPD, envPROXY )).
      821   
      822   /* set some sensible initial values
      823    */
      824   
      825   if envLOG = ? or envLOG = "" then envLOG = envPT3 + DS + "log".
      826   if envTMP = ? or envTMP = "" then envTMP = envPT3 + DS + "tmp".
      827   if envRPT = ? or envRPT = "" then envRPT = envPT3 + DS + "rpt".
      828   
      829   if custID = ? or custId = "" then
      830     do:
      831       file-info:file-name = envPT3 + DS + "etc" + DS + "custid.cfg".
      832       if file-info:full-pathname <> ? then
      833         do on error undo, leave
      834            on endkey undo, leave:
      835           input stream inStrm from value( file-info:full-pathname ).
      836           import stream inStrm unformatted custId.
      837           input stream inStrm close.
      838         end.
      839     end.
      840   
      841   if custId = ? then custId = "".
      842   
      843   logMsg( 0, substitute( "Initial values: [DLC=&1] [LOGDIR=&2] [TMPDIR=&3] [RPTDIR=&4] [CUSTID=&5] [ENVPT3=&6]", envDLC, envLOG, envTMP, envRPT, custId, envPT3 )).
      844   
      845   run osInfo.
      846   
      847   find first tt_osInfo no-error.
      848   if available tt_osInfo then
      849     logMsg( 0, substitute( "OSInfo: [host=&1] [os=&3] [osVersion=&3] [osKernel=&4] [cpu=&5] [clock=&6] [numcpu=&7] [RAM=&8]", tt_osInfo.hostName, tt_osInfo.osName, tt_osInfo.osVersion, tt_osInfo.keVersion, tt_osInfo.modelCPU, tt_osInfo.clkCPU, tt_osInfo.numCPU, tt_osInfo.memTotal )).
      850    else
      851     logMsg( 0, substitute( "OSInfo: <not available>" )).
      852   
      853   file-info:file-name = substitute( "&1&2version", envDLC, DS ).
      854   if file-info:full-pathname = ? then
      855     pvers = proversion.
      856    else
      857     do:
      858       input stream inStrm from value( file-info:full-pathname ).
      859       do on error undo, leave
      860          on endkey undo, leave:
      861         import stream inStrm ^ ^ pvers.
      862       end.
      863       input stream inStrm close.
      864     end.
      865   
      866   &IF "64" = "64" &THEN
      867   logMsg( 0, substitute( "proInfo: [proversion=&1] [bits=&2]", pvers, 64 )).
      868   &ELSE
      869   logMsg( 0, substitute( "proInfo: [proversion=&1] [bits=&2]", pvers, 32 )).
      870   &ENDIF
      871   
      872   
      873   /* prompt the user for information if necessary
      874    *
      875    */
      876   
      877   run lib/inschui.p (
      878     input-output custId,
      879     input-output envHOST,
      880     input-output envPT3,
      881     input-output envDLC,
      882     input-output envLOG,
      883     input-output envTMP,
      884     input-output envRPT
      885   ).
      886   
      887   
      888   /* the actual work of installing protop
      889    */
      890   
      891   envDLC = right-trim( envDLC, DS ).
      892   envPT3 = right-trim( envPT3, DS ).
      893   envLOG = right-trim( envLOG, DS ).
      894   envTMP = right-trim( envTMP, DS ).
      895   envRPT = right-trim( envRPT, DS ).
      896   
      897   if session:batch = no then message "Tailoring...".
      898   
      899   logMsg( 0, substitute( "Initial working values: [DLC=&1] [LOGDIR=&2] [TMPDIR=&3] [RPTDIR=&4] [CUSTID=&5] [ENVPT3=&6]", envDLC, envLOG, envTMP, envRPT, custId, envPT3 )).
      900   
      901   custId = trim( custId ).
      902   
      903   if custId = "" or custId = ? then
      904     do:
      905       output stream instStream to value( envPT3 + DS + "etc" + DS + "custid.cfg" ).
      906       output stream instStream close.
      907     end.
      908    else
      909     do:
      910       output stream instStream to value( envPT3 + DS + "etc" + DS + "custid.cfg" ).
      911       put stream instStream unformatted custId skip.
      912       output stream instStream close.
      913     end.
      914   
      915   if opsys = "unix" then
      916     do:
      917       PT3env = envPT3 + "/bin/protopenv".
      918       stubDir = envPT3 + "/ustub".
      919     end.
      920    else
      921     do:
      922       PT3env = envPT3 + "~\bin~\protopenv.bat".
      923       stubDir = envPT3 + "~\wstub".
      924     end.
      925   
      926   logMsg( 0, substitute( "Tailored working values: [pt3env=&1] [stubdir=&2]", pt3env, stubdir )).
      927   
      928   os-create-dir value( envPT3 + "/bin" ) value( envLOG ) value( envTMP ) value( envRPT ).
      929   
      930   /*
      931   if os-error <> 0 then
      932     do:
      933       message
      934         "Error:" os-error "occurred when creating required directories:" skip
      935         envPT3 + "/bin" envLOG envTMP envRPT skip
      936         skip(1)
      937         "Canceling installation" skip
      938         view-as alert-box
      939       .
      940       quit.
      941     end.
      942    */
      943   
      944   logMsg( 0, substitute( "Created &1, &2, &3 and &4",  envPT3 + "/bin", envLog, envTMP, envRPT )).
      945   
      946   bkupName = substitute( "etc.&1.&2.tar", string( month( today ), "99" ), string( day( today ), "99" )).
      947   file-info:file-name = bkupName.
      948   if file-info:full-pathname = ? then
      949     do:
      950       logMsg( 0, substitute( "Backing up etc to &1", bkupName )).
      951       os-command silent value( "tar cvf " + bkupName + " etc" ).
      952     end.
      953   
      954   logMsg( 0, substitute( "Copying stub files from: &1", stubDir )).
      955   
      956   input stream instStream from os-dir( stubDir ).
      957   
      958   binstub_loop: repeat:
      959   
      960     import stream instStream ^ stubName.
      961   
      962     if substring( stubName, length( stubName ), 1 ) = "." then            /* if it ends in "." it is either "." or ".." or        */
      963       next binstub_loop.                                                  /* crazily named and unworthy of our attention          */
      964   
      965     logMsg( 0, substitute( "Tailoring: &1", stubName )).
      966   
      967     if opsys = "unix" then
      968       do:
      969   
      970         scriptName = replace( stubName, "ustub", "bin" ).
      971         if stubName matches "*uemacs*" then
      972           do:
      973             os-copy value( stubName ) value( "bin/uemacs" ).
      974             next binstub_loop.
      975           end.
      976   
      977       end.
      978      else
      979       do:
      980   
      981         if r-index( stubName, ".INI" ) = ( length( stubName ) - 3 ) then
      982           scriptName = replace( stubName, "wstub", "etc" ).
      983          else
      984           scriptName = replace( stubName, "wstub", "bin" ).
      985   
      986       end.
      987   
      988     run tailor( stubName, scriptName ).
      989   
      990     logMsg( 0, substitute( " Finished: &1", scriptName )).
      991   
      992   end.            /* binstub_loop */
      993   
      994   input stream instStream close.
      995   
      996   logMsg( 0, "Looking for estub" ).
      997   
      998   /* copy files from estub to etc /* ~~~ if they do NOT already exist in etc ~~~ */
      999    */
     1000   
     1001   file-info:file-name = "estub".
     1002   if file-info:full-pathname = ? then
     1003     do:
     1004       logMsg( 0, "No estub directory was found" ).
     1005     end.
     1006    else
     1007     do:
     1008   
     1009       input stream instStream from os-dir( "estub" ).
     1010   
     1011       estub_loop: repeat:
     1012   
     1013         import stream instStream ^ stubName.
     1014   
     1015         if substring( stubName, length( stubName ), 1 ) = "." then        /* if it ends in "." it is either "." or ".." or        */
     1016           next estub_loop.                                                /* crazily named and unworthy of our attention          */
     1017   
     1018         baseName = substring( stubName, r-index( stubName, "estub" ) + 6 ).
     1019   
     1020         file-info:file-name = "etc/" + baseName.
     1021         if file-info:full-pathname <> ? then
     1022           do:
     1023   
     1024             if lookup( baseName, "custid.cfg,dblist.cfg" ) > 0 then next. /* skip these, do NOT copy or over-write */
     1025   
     1026             if lookup( baseName, "protop.pf" ) > 0 then
     1027               do:
     1028                 saveName = file-info:full-pathname + substitute( ".&1.&2", string( month( today ), "99" ), string( day( today ), "99" )).
     1029                 logMsg( 0, substitute( "&1 already exists in etc, saving a copy as &2", baseName, saveName )).
     1030                 file-info:file-name = saveName.
     1031                 if file-info:full-pathname = ? then
     1032                 os-copy value( "etc/" + baseName ) value( saveName ).
     1033               end.
     1034   
     1035             /* do NOT tailor (binary files)
     1036              */
     1037   
     1038             if lookup( baseName, "protop.ico" ) > 0 then
     1039               do:
     1040                 os-copy value( "estub/" + baseName ) value( "etc/" + baseName ).
     1041                 next estub_loop.
     1042               end.
     1043   
     1044           end.
     1045   
     1046         logMsg( 0, substitute( "Tailoring: &1", stubName )).
     1047         scriptName = replace( stubName, "estub", "etc" ).
     1048         run tailor( stubName, scriptName ).
     1049   
     1050       end.        /* estub_loop   */
     1051   
     1052       input stream instStream close.
     1053   
     1054     end.
     1055   
     1056   /* end. */
     1057   
     1058   
     1059   if opsys = "unix" then
     1060     do:
     1061       logMsg( 0, "Fixing permissions" ).
     1062       os-command silent value( "chmod 755 " + envPT3 + "/bin/*" ).
     1063     end.
     1064    else
     1065     do:
     1066       /* ... (PROVERSION BEGINS "10.2B" OR INTEGER(ENTRY (1, PROVERSION, ".")) GE 11) ... */
     1067       if integer( entry( 1, proversion, "." )) >= 11 then
     1068         do:
     1069           logMsg( 0, substitute( "Updating registry with ProTop install directory: &1", envPT3 )).
     1070           run lib/setpt3dir2.p ( envPT3 ).                        /* set registry key to locate ProTop install directory -- contributed by Mike @ Consultingwerk  */
     1071         end.
     1072     end.
     1073   
     1074   
     1075   file-info:file-name = envTMP + "/dbmonitor.flg".
     1076   
     1077   if file-info:full-pathname = ? then
     1078     do:
     1079   
     1080       if opsys = "unix" then
     1081         do:
     1082           logMsg( 0, "Starting dbmonitor" ).
     1083           os-command silent value( "bin/dbmonitor.sh" ). 
     1084         end.
     1085        else
     1086         do:
     1087   
     1088           logMsg( 0, "Installing dbmonitor" ).
     1089   
     1090           /* nssm_setup needs to run as admin -- right now I don't have a good way to do that
     1091            *
     1092            *      os-command value( "runas /user:administrator bin~\nssm_setup.bat" ).
     1093            *
     1094            * is close but it prompts for a password even if you are already admin
     1095            *
     1096            * so, for now, I'm going to assume most people are installing as admin
     1097            * and just go ahead and run it
     1098            */
     1099   
     1100           os-command silent value( "bin~\nssm_setup.bat" ).
     1101   
     1102         end.
     1103   
     1104     end.
     1105    else
     1106     do:
     1107   
     1108       logMsg( 0, "Restarting monitors" ).
     1109   
     1110       if opsys = "unix" then
     1111         os-command silent value( "rm -f "  + envTMP +  "/*.flg" ).
     1112        else
     1113         os-command silent value( "del /q " + envTMP + "~\*.flg 2>NUL" ).
     1114   
     1115     end.
     1116   
     1117   
     1118   logMsg( 0, "Finished!" ).
     1119   
     1120   if session:batch then
     1121     return.
     1122    else
     1123     quit.
