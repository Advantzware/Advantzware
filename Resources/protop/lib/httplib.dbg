        1   /* httplib.p
        2    *
        3    * something a bit less vile than the kbase code
        4    *
        5    * (unused)
        6    *
        7    * december 28, 2012 */
        8   
        9   define new global shared variable pt_tmpdir as character no-undo initial "/tmp".
       10   define new global shared variable pt_logdir as character no-undo initial "/tmp".
       11   
       12   define new global shared variable dbgMode as integer no-undo initial 1.
       13   
       14   define variable NL as character no-undo.
       15   
       16   NL = chr( 13 ) + chr( 10 ).                                     /* CR + LF                                      */
       17   
       18   /*** Install self as a session super-procedure
       19    ***
       20    ***/
       21   
       22   session:add-super-procedure( this-procedure ).
       23   
       24   return.
       25   
       26   define stream outfile.
       27   
       28   define variable vsocket as handle    no-undo.
       29   define variable wloop   as logical   no-undo.
       30   define variable xLOB    as longchar  no-undo.
       31   
       32   /* break a URL into host port & path components
       33    */
       34   
       35   procedure parseURL:
       36   
       37     define input  parameter url  as character no-undo.
       38     define output parameter host as character no-undo.
       39     define output parameter port as character no-undo.
       40     define output parameter path as character no-undo.
       41   
       42     assign
       43       port = "80"
       44       path = "/"
       45     .
       46   
       47     /* strip "http://" if it is provided
       48      */
       49   
       50     if url begins "http://" then url = substring( url, 8 ).
       51   
       52     host = url.
       53   
       54     if num-entries( url, "/" ) > 1 then
       55       assign
       56         host = entry( 1, url, "/" )
       57         path = substring( url, index( url, "/" ))
       58       .
       59   
       60     if num-entries( host, ":" ) = 2 then
       61       assign
       62         port = entry( 2, path, ":" )
       63         host = entry( 1, path, ":" )
       64       .
       65      else if num-entries( path, ":" ) = 2 then
       66       assign
       67         port = entry( 2, path, ":" )
       68         path = entry( 1, path, ":" )
       69       .
       70   
       71     return.
       72   
       73   end.
       74   
       75   procedure readHandler:
       76   
       77     define variable l   as integer   no-undo.
       78     define variable p   as integer   no-undo.
       79     define variable str as longchar  no-undo.
       80     define variable b   as memptr    no-undo.
       81   
       82     self:sensitive = no.                                                  /* no interruptions!    */
       83   
       84     l = vsocket:get-bytes-available().
       85   
       86     if self:connected() = false then
       87       do:
       88         if dbgMode >= 5 then message now "Not connected! length( xLOB ) = " length( xLOB ) "bytes-available:" vsocket:get-bytes-available() view-as alert-box.
       89         apply 'u9' to this-procedure.
       90         return.
       91       end.
       92   
       93     if l <= 0 then
       94       do:
       95         wloop = no.
       96         if dbgMode >= 9 then output stream outfile close.
       97         if dbgMode >= 5 then message "no more data..." view-as alert-box.
       98         apply 'u9' to this-procedure.
       99       end.
      100      else
      101       do:
      102         set-size( b ) = l + 1.
      103         vsocket:read( b, 1, l, 1 ).
      104         p = 1.
      105         do while ( l > 0 ):
      106           assign
      107             str  = get-string( b, p, min( l, 16384 ))
      108             xLOB = xLOB + str
      109             p    = p + 16384
      110             l    = l - 16384
      111           .
      112         end.
      113         if dbgMode >= 9 then copy-lob from xLOB to file pt_tmpdir + "/httpget.tmp" append no-convert.
      114         set-size( b ) = 0.
      115         if vsocket:get-bytes-available() < 1 then
      116           apply "u9" to this-procedure.
      117          else
      118           wloop = yes.
      119         self:sensitive = yes.
      120       end.
      121   
      122     return.
      123   
      124   end.
      125   
      126   procedure getURL:
      127   
      128     define input  parameter host   as character no-undo.
      129     define input  parameter port   as character no-undo.
      130     define input  parameter path   as character no-undo.
      131     define output parameter result as longchar  no-undo.
      132   
      133     define variable wstatus as logical   no-undo.
      134     define variable vstr    as character no-undo.
      135     define variable vbuffer as memptr    no-undo.
      136   
      137     assign    
      138       wloop = yes
      139       xLOB  = ""
      140     .
      141   
      142     create socket vsocket.
      143     vsocket:set-read-response-procedure( "readHandler", this-procedure ).
      144     wstatus = vsocket:connect( "-H " + host + " -S " + port ) no-error.
      145   
      146     if wstatus = yes then
      147       do:
      148         if dbgMode >= 5 then message "Connection to HTTP server:" host "port" port "established successfully." view-as alert-box.
      149       end.
      150      else
      151       do:
      152         if dbgMode > 0 then message "Connection to HTTP server:" host "port" port "is unavailable." view-as alert-box.
      153         delete object vsocket.
      154         return.
      155       end.
      156   
      157     if dbgMode >= 9 then output stream outfile to value( pt_tmpdir + "/httpget.tmp" ) append binary no-convert.
      158   
      159     vstr = "GET " + path + " HTTP/1.0" + NL + NL + NL.
      160     set-size( vbuffer ) = length( vstr ) + 1.
      161     set-byte-order( vbuffer ) = big-endian.
      162     put-string( vbuffer, 1 ) = vstr.
      163     vsocket:write( vbuffer, 1, length( vstr )).
      164     set-size( vbuffer ) = 0.
      165   
      166     wait-for "u9" of this-procedure.
      167   
      168     /* cleanup
      169      */
      170   
      171     vsocket:disconnect().
      172     delete object vsocket.
      173     if dbgMode >= 9 then output stream outfile close.
      174   
      175     /**
      176     copy-lob from file pt_tmpdir + "/httpget.tmp" to result.
      177      **/
      178   
      179     result = xLOB.
      180   
      181     return.
      182   
      183   end.
