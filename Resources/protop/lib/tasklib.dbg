        1   /* tasklib.p
        2    *
        3    *
        4    *      *     *     *   *    *        command to be executed
        5    *      -     -     -   -    -
        6    *      |     |     |   |    |
        7    *      |     |     |   |    +----- day of week (0 - 6) (Sunday=0)      4gl weekday() function is based at 1
        8    *      |     |     |   +------- month (1 - 12)
        9    *      |     |     +--------- day of month (1 - 31)
       10    *      |     +----------- hour (0 - 23)
       11    *      +------------- min (0 - 59)
       12    *
       13    * this scheduler is a single thread - be careful not to launch blocking processes
       14    * as they will prevent dbmonitor from doing its job! if necessary use "&" at the
       15    * end of commands to put them in the background
       16    *
       17    * since tasks are launched from within the context of dbmonitor.p all of the   
       18    * protopenv variables and path settings are available to the command line
       19    *      
       20    * for example:
       21    *
       22    * 5,20,35,50 * * * * ${PROTOP}/bin/syncio.sh >> ${LOGDIR}/tasksched.log 2>&1
       23    *
       24    */
       25   
       26   
       27   /*******************************************************************************
       28    *******************************************************************************
       29    **                                                                           **
       30    **                                                                           **
       31    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       32    **  http://www.greenfieldtech.com                                            **
       33    **                                                                           **
       34    **  ProTop is free software; you can redistribute it and/or modify it        **
       35    **  under the terms of the GNU General Public License (GPL) as published     **
       36    **  by the Free Software Foundation; either version 2 of the License, or     **
       37    **  at your option) any later version.                                       **
       38    **                                                                           **
       39    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       40    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       41    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       42    **  for more details.                                                        **
       43    **                                                                           **
       44    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       45    **  of use and alternative licensing options for this software.              **
       46    **                                                                           **
       47    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       48    **                                                                           **
       49    **  See http://www.fsf.org for more information about the GPL.               **
       50    **                                                                           **
       51    **                                                                           **
       52    *******************************************************************************
       53    *******************************************************************************
       54    *
       55    * protop.i
       56    *
       57    * Header file for protop family of programs
       58    *
       59    *
       60    * Known Bugs & Issues:
       61    *
       62    *
       63    * To Do:
       64    *
       65    *
       66    * Author:
       67    *
       68    *      Tom Bascom, Greenfield Technologies
       69    *      http://www.greenfieldtech.com
       70    *      August 28, 2003
       71    *
       72    */
       73   
       74   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       75   &global-define  FASTLOCK        true
       76   &ELSE
       77   &global-define  FASTLOCK        false
       78   &ENDIF
       79   
       80   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       81   &global-define  OE11            "yes"
       82   &global-define  xDEBUGTT        false
       83   &ENDIF
       84   
       85   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       86   &global-define  NOSERIALIZE     serialize-hidden
       87   &ENDIF
       88   
       89   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       90   &global-define  BIGINT          int64
       91   &ELSE
       92   &global-define  BIGINT          decimal
       93   &ENDIF
       94   
       95   
       96   /* lib/v9.i
       97    *
       98    */
       99   
      100   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
      101   &global-define  CPYLOB  "no"
      102   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
      103   &global-define  LNGCR   character
      104   &global-define  DTZ     integer
      105   &global-define  BIGINT  decimal
      106   &ELSE
      107   &global-define  OE10    "yes"
      108   &global-define  NOW     now
      109   &global-define  LNGCR   longchar
      110   &global-define  DTZ     datetime-tz
      111   &global-define  BIGINT  int64
      112   &ENDIF
      113    
      114   
      115   /* use extended _connect fields: -client, -cache*
      116    */
      117   
      118   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      119   &global-define  CONNECTX        "yes"
      120   &ELSE
      121   &global-define  CONNECTX        "no"
      122   &ENDIF
      123   
      124   define stream inStrm.
      125   
      126   define new global shared variable dbgMode as integer no-undo initial 1.
      127   
      128   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      129    *
      130    * someday everyone will have OO and I will replace these with a gsv class
      131    * or something of that ilk
      132    *
      133    */
      134   
      135   define new global shared variable pt_shortname   as character no-undo.
      136   define new global shared variable pt_uniqName    as character no-undo.
      137   define new global shared variable pt_server      as character no-undo.
      138   define new global shared variable pt_resrcType   as character no-undo.
      139   
      140   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      141   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      142   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      143   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      144   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      145   
      146   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      147   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      148   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      149   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      150   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      151   define new global shared variable pt_ioFileName  as character no-undo.
      152   define new global shared variable pt_dfCmd       as character no-undo.
      153   
      154   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      155   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      156   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      157   
      158   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      159   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      160   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      161   
      162   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      163   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      164   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      165   
      166   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      167   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      168   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      169   
      170   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      171   
      172   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      173   
      174   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      175   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      176   
      177   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      178    * 
      179    */
      180   
      181   define new global shared variable stime as integer no-undo.                     /* start time                           */
      182   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      183   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      184   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      185   
      186   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      187   
      188                                                                                   /* corresponding to base checkpoint#    */
      189   /** Global Shared Temp Table Definitions
      190    **
      191    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      192    ** And a shared temp-table is logically the same as a db table so who really cares?
      193    **
      194    **/
      195   
      196   /* cache _File and _Index records so that we don't keep hitting the db to translate
      197    */
      198   
      199   define new global shared temp-table tt_tbl no-undo
      200     field xid      as integer                                             /* _File._File-Num              */
      201     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      202     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      203     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      204     field tblname  as character                                           /* _File._File-Name             */
      205     index xid-idx is unique primary xid.
      206   
      207   define new global shared temp-table tt_idx no-undo
      208     field xid      as integer                                             /* _Index._Idx-Num              */
      209     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      210     field idxname  as character                                           /* _Index._Idx-Name             */
      211     field idxnote  as character
      212     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      213     field tblnum   as integer                                             /* _File._File-Num              */
      214     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      215     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      216     field tblname  as character                                           /* _File._File-Name             */
      217     index xid-idx is unique primary xid.
      218   
      219   define new global shared temp-table tt_areaExtent no-undo
      220     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      221     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      222   
      223     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      224     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      225     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      226   
      227     index ae-idx is unique primary areaNum extNum.
      228   
      229   define new global shared temp-table tt_area no-undo
      230     field xid      as integer    format ">>>9"
      231     field SANum    as integer    format ">>>9"        label "#"
      232     field areaPool as character  format "x(2)"        label "BX"
      233   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      234     field SAName   as character  format "x(30)"       label "Area Name"
      235     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      236     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      237     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      238     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      239     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      240     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      241     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      242   
      243     field blkszkb as integer     format ">>9"         label "BSZ"
      244     field rpb     as integer     format ">>9"         label "RPB"
      245     field clstrsz as integer     format ">>9"         label "CSZ"
      246   
      247     field numTbls as integer     format ">>>>9"       label "#Tbls"
      248     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      249     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      250   
      251     field numExts as integer     format ">>>>9"       label "#Exts"
      252     field hasVar  as logical     format "Yes/No"      label "Var?"
      253   
      254     field xnote   as character   format "x"           label "*"
      255   
      256     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      257     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      258   
      259     index pctAlloc-idx is primary pctAlloc descending
      260     index pctLastX-idx pctLastX pctAlloc descending
      261     index allocGB-idx allocGB descending
      262     index totGB-idx totGB descending
      263     index xid-idx is unique xid
      264     index SANum-idx is unique SANum
      265     index SAName-idx is unique SAName
      266   .
      267   
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319   *** Encrypted Source ***
      320   *** Encrypted Source ***
      321   *** Encrypted Source ***
      322   *** Encrypted Source ***
      323   *** Encrypted Source ***
      324   *** Encrypted Source ***
      325   *** Encrypted Source ***
      326   *** Encrypted Source ***
      327   *** Encrypted Source ***
      328   *** Encrypted Source ***
      329   *** Encrypted Source ***
      330   *** Encrypted Source ***
      331   *** Encrypted Source ***
      332   *** Encrypted Source ***
      333   *** Encrypted Source ***
      334   *** Encrypted Source ***
      335   *** Encrypted Source ***
      336   *** Encrypted Source ***
      337   *** Encrypted Source ***
      338    
      339   
      340   /*******************************************************************************
      341    *******************************************************************************
      342    **                                                                           **
      343    **                                                                           **
      344    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      345    **  http://www.greenfieldtech.com                                            **
      346    **                                                                           **
      347    **  ProTop is free software; you can redistribute it and/or modify it        **
      348    **  under the terms of the GNU General Public License (GPL) as published     **
      349    **  by the Free Software Foundation; either version 2 of the License, or     **
      350    **  at your option) any later version.                                       **
      351    **                                                                           **
      352    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      353    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      354    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      355    **  for more details.                                                        **
      356    **                                                                           **
      357    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      358    **  of use and alternative licensing options for this software.              **
      359    **                                                                           **
      360    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      361    **                                                                           **
      362    **  See http://www.fsf.org for more information about the GPL.               **
      363    **                                                                           **
      364    **                                                                           **
      365    *******************************************************************************
      366    *******************************************************************************
      367    *
      368    * protoplib.i
      369    *
      370    * ProTop infrastructure library definitions
      371    *
      372    */
      373   
      374   function uDateTime returns integer () in super.
      375   function string2uDateTime returns integer( input p_text as character ) in super.
      376   function searchDir returns character ( input xDir as character ) in super.
      377   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      378   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      379   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      380   function myPID returns character () in super.
      381   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      382   
      383   /* end protoplib.i */
      384    
      385   
      386   /*******************************************************************************
      387    *******************************************************************************
      388    **                                                                           **
      389    **                                                                           **
      390    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      391    **  http://www.greenfieldtech.com                                            **
      392    **                                                                           **
      393    **  ProTop is free software; you can redistribute it and/or modify it        **
      394    **  under the terms of the GNU General Public License (GPL) as published     **
      395    **  by the Free Software Foundation; either version 2 of the License, or     **
      396    **  at your option) any later version.                                       **
      397    **                                                                           **
      398    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      399    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      400    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      401    **  for more details.                                                        **
      402    **                                                                           **
      403    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      404    **  of use and alternative licensing options for this software.              **
      405    **                                                                           **
      406    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      407    **                                                                           **
      408    **  See http://www.fsf.org for more information about the GPL.               **
      409    **                                                                           **
      410    **                                                                           **
      411    *******************************************************************************
      412    *******************************************************************************
      413    *
      414    * vstlib.i
      415    *
      416    * VST library definitions
      417    *
      418    */
      419   
      420   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      421   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      422   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      423   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      424   
      425   function connectFlags returns character ( input cnxId as integer ) in super.
      426   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      427   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      428   
      429   function isAIEnabled returns logical () in super.
      430   function isReplSource returns logical () in super.
      431   function isReplTarget returns logical () in super.
      432   function isBackupRunning returns logical () in super.
      433   function isWorkgroup returns logical () in super.
      434   
      435   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      436   
      437   /* end vstlib.i */
      438    
      439   
      440   function add2ds returns logical ( input h as handle ) in super.
      441   function getTempTableHandle returns handle ( input n as character ) in super.
      442   
      443   /* end protop.i */
      444    
      445   
      446   define temp-table tt_schedule no-undo
      447     field tx_min as character
      448     field tx_hr  as character
      449     field tx_dom as character
      450     field tx_mth as character
      451     field tx_dow as character
      452     field tx_cmd as character
      453   .
      454   
      455   define stream inStrm.
      456   
      457   session:add-super-procedure( this-procedure ).
      458   
      459   return.
      460   
      461   
      462   /* check the config file for changes
      463    */
      464   
      465   define variable taskCfgDate as date      no-undo.
      466   define variable taskCfgTime as integer   no-undo.
      467   
      468   procedure checkTaskConfig:
      469   
      470     define variable cfgName as character no-undo.
      471   
      472     define variable xLine   as character no-undo.   
      473     define variable inLine  as character no-undo extent 8.
      474     define variable cmdLine as character no-undo.
      475   
      476     define variable ii as integer no-undo.
      477     define variable xx as integer no-undo.
      478   
      479     run findCfgName( "schedule", input-output cfgName ).
      480   
      481     file-info:file-name = cfgName.
      482     if file-info:full-pathname = ? then
      483       do:
      484         if dbgMode >= 5 then message now "no schedule was found".
      485         empty temp-table tt_schedule.
      486         return.
      487       end.
      488      else
      489       do:
      490         if dbgMode >= 4 then message now "checking ts:" file-info:full-pathname.
      491       end.
      492   
      493     if file-info:file-mod-date = taskCfgDate and file-info:file-mod-time = taskCfgTime then
      494       do:
      495         if dbgMode >= 5 then message now "schedule config ts:" file-info:file-mod-date "=" taskCfgDate file-info:file-mod-time "=" taskCfgTime.
      496         return.
      497       end.
      498   
      499     assign
      500       taskCfgDate = file-info:file-mod-date
      501       taskCfgTime = file-info:file-mod-time
      502     .
      503   
      504     if dbgMode >= 3 then message now "Loading" file-info:full-pathname.
      505   
      506     empty temp-table tt_schedule.
      507   
      508     input stream inStrm from value( file-info:full-pathname ).
      509   
      510     repeat on endkey undo, leave:
      511   
      512      assign
      513         xLine   = "" 
      514         inLine  = "" 
      515         cmdLine = "" 
      516       .
      517       
      518       import stream inStrm unformatted xLine. 
      519       
      520       xLine = replace( xLine, chr(9), chr(32)).
      521       xLine = trim( xLine ). 
      522       
      523       do ii = 1 to 8:
      524         
      525         xx = index( xLine, " " ).
      526         if xx <= 0 then xx = length( xLine ).
      527   
      528         inLine[ii] = substring( xLine, 1, xx ) no-error.
      529   
      530         if inLine[ii] begins "#" or inLine[ii] = "" then
      531           leave.
      532   
      533         xLine = trim( substring( xLine, xx + 1 )) no-error.
      534   
      535         if ii >= 5 then
      536           do:
      537             cmdLine = xLine.
      538             leave.
      539           end.
      540   
      541       end.
      542   
      543       if ii < 5 or inLine[1] = "" or cmdLine = "" then next.      /* not a valid schedule line    */
      544   
      545       create tt_schedule.
      546       assign
      547         tt_schedule.tx_min = inLine[1]
      548         tt_schedule.tx_hr  = inLine[2]
      549         tt_schedule.tx_dom = inLine[3]
      550         tt_schedule.tx_mth = inLine[4]
      551         tt_schedule.tx_dow = inLine[5]
      552         tt_schedule.tx_cmd = cmdLine
      553       .
      554   
      555     end.
      556   
      557     input stream inStrm close.
      558   
      559     if dbgMode >= 3 then
      560       do:
      561         ii = 0.
      562         for each tt_schedule:
      563           ii = ii + 1.
      564           message now tx_min tx_hr tx_dom tx_mth tx_dow tx_cmd.
      565         end.
      566         if ii = 0 then
      567           message now "no valid schedule lines were loaded.".
      568       end.
      569   
      570     return.
      571   
      572   end.
      573   
      574   
      575   function eligible returns logical ( currVal as integer, valList as character ):
      576   
      577     define variable n as integer no-undo.
      578     define variable i as integer no-undo.
      579   
      580     if valList = "*" then
      581       return yes.
      582   
      583     n = num-entries( valList ).
      584   
      585     do i = 1 to n:
      586       if integer( entry( i, valList )) = currVal then
      587         return yes.
      588     end.
      589   
      590     return no.
      591   
      592   end.
      593   
      594   /* check to see what tasks need to run now
      595    */
      596   
      597   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
      598   
      599   procedure scheduledTasks:
      600     return.
      601   end.
      602   
      603   &ELSE
      604   
      605   define variable lastDT as datetime no-undo.
      606   
      607   procedure scheduledTasks:
      608   
      609     define variable workDT as datetime no-undo.
      610   
      611     define variable workMin as integer no-undo.
      612     define variable workHr  as integer no-undo.
      613     define variable workDOM as integer no-undo.
      614     define variable workMth as integer no-undo.
      615     define variable workDow as integer no-undo.
      616   
      617     define variable nn      as integer no-undo.
      618     define variable xx      as integer no-undo.
      619   
      620     define variable xMin    as logical no-undo.
      621     define variable xHr     as logical no-undo.
      622     define variable xDOM    as logical no-undo.
      623     define variable xMth    as logical no-undo.
      624     define variable xDow    as logical no-undo.
      625   
      626     define variable cmd     as character no-undo.
      627   
      628     if dbgMode >= 5 then message now "checking scheduled tasks".
      629   
      630     run checkTaskConfig.
      631   
      632     /* advance the clock 1 minute at a time in order to make sure that we do not
      633      * miss anything due to other dbmonitor tasks taking a long time
      634      */
      635   
      636     if lastDT = ? then lastDT = now.
      637   
      638     if dbgMode >= 5 then message now "lastDT:" lastDT.
      639   
      640     workDT = add-interval( lastDT, 1, "minute" ).
      641   
      642     do while workDT < now:
      643   
      644       if dbgMode >= 5 then message now "working date:" workDT.
      645   
      646       lastDT = workDT.            /* this is the last time we actually might have done anything */
      647   
      648       assign
      649         workMin = integer( substring( string( workDT ), 15, 2 ))
      650         workHr  = integer( substring( string( workDt ), 12, 2 ))
      651         workDOM = day( workDT )
      652         workMth = month( workDT )
      653         workDOW = weekday( workDT ) - 1   /*  Progress weekday() starts at 1 rather than 0, schedule.cfg starts at 0 */
      654       .
      655   
      656       if dbgMode >= 5 then message now "work parameters:" workMin workHr workDOM workMth workDOW.
      657   
      658       /* is there anything that we should be doing?
      659        */
      660   
      661       for each tt_schedule:
      662   
      663         if dbgMode >= 5 then message now "tt_schedule:" tx_min tx_hr tx_dom tx_mth tx_dow tx_cmd.
      664   
      665         assign
      666           xDOW = no
      667           xMth = no
      668           xDOM = no
      669           xHr  = no
      670           xMin = no
      671         .
      672   
      673         /* is this an eligible moment of some sort?
      674          */
      675   
      676         assign
      677           xHr  = eligible( workhr,  tx_hr  )
      678           xMin = eligible( workMin, tx_min )
      679           xDOW = eligible( workDOW, tx_dow )
      680           xMth = eligible( workMth, tx_mth )
      681           xDOM = eligible( workDOM, tx_dom )
      682         .
      683   
      684         if dbgMode >= 4 then message now "eligible?" xMin xHr xDOM xMth xDOW tx_cmd.
      685   
      686         if xHr = yes and xMin = yes and xDOM = yes and xMth = yes and xDOW = yes then
      687           do:
      688   
      689             /**** there is something interesting for us to do! ****/
      690   
      691             if dbgMode >= 1 then message now "eligible task:" tx_min tx_hr tx_dom tx_mth tx_dow tx_cmd.
      692   
      693             cmd = tx_cmd.
      694             nn = index( cmd, "[NOALERT]" ). 
      695             if nn = 0 then
      696               publish "info" ( "runTask", substitute( "runTask: &1", cmd )).
      697              else
      698               cmd = substring( cmd, 1, nn - 1 ).
      699   
      700             if opsys = "unix" then
      701               os-command silent value( cmd ).
      702              else if opsys begins "win" then
      703               run spawn( cmd, "", output xx ).
      704   
      705           end.
      706   
      707       end.
      708   
      709       /* "tick"
      710        */
      711   
      712       workDT = add-interval( lastDT, 1, "minute" ).
      713   
      714     end.
      715   
      716     return.
      717   
      718   end.
      719   
      720   &ENDIF
