        1   /* ptsetvardb.p
        2    *
        3    * prompt the user for various settings that might require a db connection
        4    *
        5    */
        6   
        7   
        8   /*******************************************************************************
        9    *******************************************************************************
       10    **                                                                           **
       11    **                                                                           **
       12    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       13    **  http://www.greenfieldtech.com                                            **
       14    **                                                                           **
       15    **  ProTop is free software; you can redistribute it and/or modify it        **
       16    **  under the terms of the GNU General Public License (GPL) as published     **
       17    **  by the Free Software Foundation; either version 2 of the License, or     **
       18    **  at your option) any later version.                                       **
       19    **                                                                           **
       20    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       21    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       22    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       23    **  for more details.                                                        **
       24    **                                                                           **
       25    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       26    **  of use and alternative licensing options for this software.              **
       27    **                                                                           **
       28    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       29    **                                                                           **
       30    **  See http://www.fsf.org for more information about the GPL.               **
       31    **                                                                           **
       32    **                                                                           **
       33    *******************************************************************************
       34    *******************************************************************************
       35    *
       36    * protop.i
       37    *
       38    * Header file for protop family of programs
       39    *
       40    *
       41    * Known Bugs & Issues:
       42    *
       43    *
       44    * To Do:
       45    *
       46    *
       47    * Author:
       48    *
       49    *      Tom Bascom, Greenfield Technologies
       50    *      http://www.greenfieldtech.com
       51    *      August 28, 2003
       52    *
       53    */
       54   
       55   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       56   &global-define  FASTLOCK        true
       57   &ELSE
       58   &global-define  FASTLOCK        false
       59   &ENDIF
       60   
       61   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       62   &global-define  OE11            "yes"
       63   &global-define  xDEBUGTT        false
       64   &ENDIF
       65   
       66   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       67   &global-define  NOSERIALIZE     serialize-hidden
       68   &ENDIF
       69   
       70   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       71   &global-define  BIGINT          int64
       72   &ELSE
       73   &global-define  BIGINT          decimal
       74   &ENDIF
       75   
       76   
       77   /* lib/v9.i
       78    *
       79    */
       80   
       81   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       82   &global-define  CPYLOB  "no"
       83   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       84   &global-define  LNGCR   character
       85   &global-define  DTZ     integer
       86   &global-define  BIGINT  decimal
       87   &ELSE
       88   &global-define  OE10    "yes"
       89   &global-define  NOW     now
       90   &global-define  LNGCR   longchar
       91   &global-define  DTZ     datetime-tz
       92   &global-define  BIGINT  int64
       93   &ENDIF
       94    
       95   
       96   /* use extended _connect fields: -client, -cache*
       97    */
       98   
       99   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      100   &global-define  CONNECTX        "yes"
      101   &ELSE
      102   &global-define  CONNECTX        "no"
      103   &ENDIF
      104   
      105   define stream inStrm.
      106   
      107   define new global shared variable dbgMode as integer no-undo initial 1.
      108   
      109   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      110    *
      111    * someday everyone will have OO and I will replace these with a gsv class
      112    * or something of that ilk
      113    *
      114    */
      115   
      116   define new global shared variable pt_shortname   as character no-undo.
      117   define new global shared variable pt_uniqName    as character no-undo.
      118   define new global shared variable pt_server      as character no-undo.
      119   define new global shared variable pt_resrcType   as character no-undo.
      120   
      121   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      122   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      123   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      124   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      125   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      126   
      127   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      128   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      129   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      130   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      131   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      132   define new global shared variable pt_ioFileName  as character no-undo.
      133   define new global shared variable pt_dfCmd       as character no-undo.
      134   
      135   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      136   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      137   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      138   
      139   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      140   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      141   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      142   
      143   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      144   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      145   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      146   
      147   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      148   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      149   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      150   
      151   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      152   
      153   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      154   
      155   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      156   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      157   
      158   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      159    * 
      160    */
      161   
      162   define new global shared variable stime as integer no-undo.                     /* start time                           */
      163   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      164   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      165   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      166   
      167   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      168   
      169                                                                                   /* corresponding to base checkpoint#    */
      170   /** Global Shared Temp Table Definitions
      171    **
      172    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      173    ** And a shared temp-table is logically the same as a db table so who really cares?
      174    **
      175    **/
      176   
      177   /* cache _File and _Index records so that we don't keep hitting the db to translate
      178    */
      179   
      180   define new global shared temp-table tt_tbl no-undo
      181     field xid      as integer                                             /* _File._File-Num              */
      182     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      183     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      184     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      185     field tblname  as character                                           /* _File._File-Name             */
      186     index xid-idx is unique primary xid.
      187   
      188   define new global shared temp-table tt_idx no-undo
      189     field xid      as integer                                             /* _Index._Idx-Num              */
      190     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      191     field idxname  as character                                           /* _Index._Idx-Name             */
      192     field idxnote  as character
      193     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      194     field tblnum   as integer                                             /* _File._File-Num              */
      195     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      196     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      197     field tblname  as character                                           /* _File._File-Name             */
      198     index xid-idx is unique primary xid.
      199   
      200   define new global shared temp-table tt_areaExtent no-undo
      201     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      202     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      203   
      204     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      205     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      206     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      207   
      208     index ae-idx is unique primary areaNum extNum.
      209   
      210   define new global shared temp-table tt_area no-undo
      211     field xid      as integer    format ">>>9"
      212     field SANum    as integer    format ">>>9"        label "#"
      213     field areaPool as character  format "x(2)"        label "BX"
      214   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      215     field SAName   as character  format "x(30)"       label "Area Name"
      216     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      217     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      218     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      219     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      220     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      221     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      222     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      223   
      224     field blkszkb as integer     format ">>9"         label "BSZ"
      225     field rpb     as integer     format ">>9"         label "RPB"
      226     field clstrsz as integer     format ">>9"         label "CSZ"
      227   
      228     field numTbls as integer     format ">>>>9"       label "#Tbls"
      229     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      230     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      231   
      232     field numExts as integer     format ">>>>9"       label "#Exts"
      233     field hasVar  as logical     format "Yes/No"      label "Var?"
      234   
      235     field xnote   as character   format "x"           label "*"
      236   
      237     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      238     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      239   
      240     index pctAlloc-idx is primary pctAlloc descending
      241     index pctLastX-idx pctLastX pctAlloc descending
      242     index allocGB-idx allocGB descending
      243     index totGB-idx totGB descending
      244     index xid-idx is unique xid
      245     index SANum-idx is unique SANum
      246     index SAName-idx is unique SAName
      247   .
      248   
      249   *** Encrypted Source ***
      250   *** Encrypted Source ***
      251   *** Encrypted Source ***
      252   *** Encrypted Source ***
      253   *** Encrypted Source ***
      254   *** Encrypted Source ***
      255   *** Encrypted Source ***
      256   *** Encrypted Source ***
      257   *** Encrypted Source ***
      258   *** Encrypted Source ***
      259   *** Encrypted Source ***
      260   *** Encrypted Source ***
      261   *** Encrypted Source ***
      262   *** Encrypted Source ***
      263   *** Encrypted Source ***
      264   *** Encrypted Source ***
      265   *** Encrypted Source ***
      266   *** Encrypted Source ***
      267   *** Encrypted Source ***
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319    
      320   
      321   /*******************************************************************************
      322    *******************************************************************************
      323    **                                                                           **
      324    **                                                                           **
      325    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      326    **  http://www.greenfieldtech.com                                            **
      327    **                                                                           **
      328    **  ProTop is free software; you can redistribute it and/or modify it        **
      329    **  under the terms of the GNU General Public License (GPL) as published     **
      330    **  by the Free Software Foundation; either version 2 of the License, or     **
      331    **  at your option) any later version.                                       **
      332    **                                                                           **
      333    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      334    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      335    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      336    **  for more details.                                                        **
      337    **                                                                           **
      338    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      339    **  of use and alternative licensing options for this software.              **
      340    **                                                                           **
      341    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      342    **                                                                           **
      343    **  See http://www.fsf.org for more information about the GPL.               **
      344    **                                                                           **
      345    **                                                                           **
      346    *******************************************************************************
      347    *******************************************************************************
      348    *
      349    * protoplib.i
      350    *
      351    * ProTop infrastructure library definitions
      352    *
      353    */
      354   
      355   function uDateTime returns integer () in super.
      356   function string2uDateTime returns integer( input p_text as character ) in super.
      357   function searchDir returns character ( input xDir as character ) in super.
      358   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      359   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      360   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      361   function myPID returns character () in super.
      362   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      363   
      364   /* end protoplib.i */
      365    
      366   
      367   /*******************************************************************************
      368    *******************************************************************************
      369    **                                                                           **
      370    **                                                                           **
      371    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      372    **  http://www.greenfieldtech.com                                            **
      373    **                                                                           **
      374    **  ProTop is free software; you can redistribute it and/or modify it        **
      375    **  under the terms of the GNU General Public License (GPL) as published     **
      376    **  by the Free Software Foundation; either version 2 of the License, or     **
      377    **  at your option) any later version.                                       **
      378    **                                                                           **
      379    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      380    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      381    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      382    **  for more details.                                                        **
      383    **                                                                           **
      384    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      385    **  of use and alternative licensing options for this software.              **
      386    **                                                                           **
      387    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      388    **                                                                           **
      389    **  See http://www.fsf.org for more information about the GPL.               **
      390    **                                                                           **
      391    **                                                                           **
      392    *******************************************************************************
      393    *******************************************************************************
      394    *
      395    * vstlib.i
      396    *
      397    * VST library definitions
      398    *
      399    */
      400   
      401   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      402   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      403   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      404   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      405   
      406   function connectFlags returns character ( input cnxId as integer ) in super.
      407   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      408   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      409   
      410   function isAIEnabled returns logical () in super.
      411   function isReplSource returns logical () in super.
      412   function isReplTarget returns logical () in super.
      413   function isBackupRunning returns logical () in super.
      414   function isWorkgroup returns logical () in super.
      415   
      416   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      417   
      418   /* end vstlib.i */
      419    
      420   
      421   function add2ds returns logical ( input h as handle ) in super.
      422   function getTempTableHandle returns handle ( input n as character ) in super.
      423   
      424   /* end protop.i */
      425    
      426   
      427   define temp-table tt_CSC
      428     field uNum as integer
      429     index uNum-idx is unique primary uNum
      430   .
      431   
      432   session:add-super-procedure( this-procedure ).
      433   
      434   subscribe to "protop_clearCSC"       anywhere run-procedure "clearCSC".
      435   subscribe to "protop_getUserNum"     anywhere run-procedure "getUserNum".
      436   subscribe to "protop_getUserPID"     anywhere run-procedure "getUserPID".
      437   subscribe to "protop_getLockLimit"   anywhere run-procedure "getLockLimit".
      438   subscribe to "protop_getUserTblName" anywhere run-procedure "getUserTblName".
      439   subscribe to "protop_getUserIdxName" anywhere run-procedure "getUserIdxName".
      440   
      441   return.
      442   
      443   
      444   procedure clearCSC:
      445   
      446     define buffer updConnect for _Connect.
      447   
      448     define variable i  as integer no-undo.
      449     define variable ok as logical no-undo.
      450     define variable t  as character no-undo.
      451   
      452     for each tt_CSC:
      453       i = i + 1.
      454     end.
      455   
      456     if i = 0 or session:batch = yes then return.
      457   
      458     ok = yes.
      459   
      460     message color red
      461       skip(1)
      462       substitute( "    Clear the &1 session&2 that you enabled the Client Statement Cache for?    ", ( if i > 1 then trim( string( i, ">>>>>>" )) else "" ), ( if i > 1 then "s" else "" )) skip
      463       skip(1)
      464                   "    This isn't strictly required but in most cases it is best to proactively   " skip
      465                   "    clean these up rather than leave the sessions enabled.                     " skip
      466       skip(1)
      467       view-as alert-box question buttons yes-no
      468       title " Clear Client Statement Cache "
      469       update ok
      470     .
      471     if ok = no then return.
      472   
      473     for each tt_CSC:
      474   
      475         do for updConnect transaction:
      476           find updConnect exclusive-lock where _Connect-id = uNum + 1 no-error.
      477           if available( updConnect ) then
      478             do:
      479               buffer updConnect:handle:buffer-field( "_connect-cachingType" ):buffer-value = 0 no-error.
      480               delete tt_CSC.
      481             end.
      482         end.
      483       
      484     end.
      485   
      486     return.
      487   
      488   end.
      489   
      490   
      491   procedure getUserNum:
      492   
      493     define input-output parameter userNum as integer no-undo label "  usrNum" format ">>>>9".
      494     define input-output parameter userPID as integer no-undo.
      495   
      496     define buffer updConnect for _Connect.
      497   
      498     define variable cType as integer no-undo format "9".
      499   
      500     do on error undo, leave
      501       on endkey undo, leave:
      502   
      503       cType = ?.
      504   
      505       find _Connect no-lock where _Connect-id = userNum + 1 no-error.
      506       if available( _connect ) then
      507         cType = buffer _connect:handle:buffer-field( "_connect-cachingType" ):buffer-value no-error.
      508   
      509       update
      510         skip(1)
      511         '  Enter the DB Connection Number for the session of interest.  This is the "Usr#" column  ' skip
      512         '  found on many ProTop screens, in the DB .lg file, and in many Progress error messages.  ' skip
      513         skip(1)
      514         '  Usr#' userNum skip
      515         skip(1)
      516         '  Client statement cache type:' cType '     0 = Off'             skip
      517         '                                      1 = Single (Top of Stack)' skip
      518         '                                      2 = Full Call Stack'       skip
      519         skip(1)
      520         '      Most of the time you want "1".  You typically do not need the full stack            ' skip
      521         '      unless you are planning to look at the detailed User Info screen (the "U"           ' skip
      522         '      command).  The full stack option obviously takes more memory, uses more             ' skip
      523         '      space in the client/server networking communications and is more likely             ' skip
      524         '      to use the scratch disk (resulting in extraneous IO operations).                    ' skip
      525         skip(1)
      526        with
      527         frame getVar
      528         title " DB Connection Number "
      529         row 3
      530         centered
      531         width 92
      532         no-labels
      533         overlay
      534       .
      535   
      536       if userNum > 0 and userNum <> ? then
      537         do for updConnect transaction:
      538           find updConnect exclusive-lock where _Connect-id = userNum + 1 no-error.
      539           if available( updConnect ) then
      540             do:
      541               if cType = 1 or cType = 2 then
      542                 do:
      543                   find tt_CSC where uNum = _Connect-usr no-error.
      544                   if not available tt_CSC then
      545                     do:
      546                       create tt_CSC.
      547                       uNum = _Connect-usr.
      548                     end.
      549                   buffer updConnect:handle:buffer-field( "_connect-cachingType" ):buffer-value = cType no-error.
      550                 end.
      551                else if cType = 0 then
      552                 do:
      553                   find tt_CSC where uNum = _Connect-usr no-error.
      554                   if available tt_CSC then
      555                     delete tt_CSC.
      556                   buffer updConnect:handle:buffer-field( "_connect-cachingType" ):buffer-value = 0 no-error.
      557                 end.
      558             end.
      559         end.
      560   
      561     end.
      562   
      563     hide frame getVar.
      564   
      565     userPID = ?.
      566   
      567     return.
      568   
      569   end.
      570   
      571   
      572   procedure getUserPID:
      573   
      574     define input-output parameter userPID as integer no-undo label "  usrPID" format ">>>>>>>>>9".
      575     define input-output parameter userNum as integer no-undo.
      576   
      577     define buffer updConnect for _Connect.
      578   
      579     define variable cType as integer no-undo format "9".
      580   
      581     do on error undo, leave
      582       on endkey undo, leave:
      583   
      584       cType = ?.
      585   
      586       find _Connect no-lock where _Connect-PID = userPID no-error.
      587       if available( _connect ) then
      588         cType = buffer _connect:handle:buffer-field( "_connect-cachingType" ):buffer-value no-error.
      589   
      590       update
      591         skip(1)
      592         '  Enter the DB Connection PID for the session of interest. This is the "PID" column on many   ' skip
      593         '  ProTop screens, in the DB .lg file, some error messges or from OS commands such as "ps".    ' skip
      594         skip(1)
      595         '  usrPID:' userPID skip
      596         skip(1)
      597         '  Client statement cache type:' cType '    0 = Off, 1 = Single, 2 = Stack' skip
      598         '                                    (Most of the time you want "1")' skip
      599         skip(1)
      600        with
      601         frame getVar
      602         title " DB Connection Process ID "
      603         row 3
      604         centered
      605         width 96
      606         no-labels
      607         overlay
      608       .
      609   
      610       if userPID > 1 and userPID <> ? then
      611         do for updConnect transaction:
      612           find updConnect exclusive-lock where _Connect-PID = userPID no-error.
      613           if available( updConnect ) then
      614             do:
      615               if cType = 1 or cType = 2 then
      616                 do:
      617                   find tt_CSC where uNum = _Connect-usr no-error.
      618                   if not available tt_CSC then
      619                     do:
      620                       create tt_CSC.
      621                       uNum = _Connect-usr.
      622                     end.
      623                   buffer updConnect:handle:buffer-field( "_connect-cachingType" ):buffer-value = cType no-error.
      624                 end.
      625                else if cType = 0 then
      626                 do:
      627                   find tt_CSC where uNum = _Connect-usr no-error.
      628                   if available tt_CSC then
      629                     delete tt_CSC.
      630                   buffer updConnect:handle:buffer-field( "_connect-cachingType" ):buffer-value = 0 no-error.
      631                 end.
      632             end.
      633         end.
      634   
      635     end.
      636   
      637     hide frame getVar.
      638   
      639     userNum = ?.
      640   
      641     return.
      642   
      643   end.
      644   
      645   
      646   procedure getLockLimit:
      647   
      648     define input-output parameter lockLimit as integer no-undo format "->>>>9" label "  lockLimit".
      649   
      650     define variable ok as logical.
      651   
      652     do on error undo, leave
      653       on endkey undo, leave:
      654   
      655       update
      656         skip(1)
      657         '  Non-zero values are DANGEROUS!  This enables _Lock scanning for blocked sessions. '   skip
      658         skip(1)
      659         lockLimit skip
      660         skip(1)
      661         '  The lockLimit is the maximum number of _Lock entries to examine before giving up'     skip
      662         '  when attempting to determine who else might have a record lock.  This *might* be'     skip
      663         '  attempted for every user -- so the total number of attempts could be as high as'      skip
      664         '  -n * lockLimit.'                                                                      skip
      665         skip(1)
      666         '  This can be useful but it needs to be used with extreme caution.  Scanning the _Lock' skip
      667         '  table is very costly.  Especially on busy production systems with -L set to large'    skip
      668         '  values.  The use of this feature is strongly discouraged.'                            skip
      669         skip(1)
      670         '  If you are not *very* sure that you need this do NOT use it.'                         skip
      671         skip(1)
      672        with
      673         frame getVar
      674         title " Lock Limit "
      675         row 3
      676         centered
      677         width 100
      678         side-labels
      679         overlay
      680       .
      681   
      682     end.
      683   
      684     hide frame getVar.
      685   
      686     if lockLimit > 10 then
      687       do:
      688         message color red
      689           skip
      690           'You have been warned that this is a bad idea.' skip
      691           'Are you SURE that you want to ignore that advice?'
      692           skip(1)
      693           view-as alert-box question buttons yes-no
      694           title " This Is A Very Bad Idea "
      695           update ok
      696         .
      697         if ok = no then lockLimit = 0.
      698       end.
      699   
      700     return.
      701   
      702   end.
      703   
      704   
      705   procedure getUserTblName:
      706   
      707     define input-output parameter userTblName as character no-undo format "x(50)".
      708     define input-output parameter userTblNum  as integer   no-undo.
      709   
      710     do on error undo, leave
      711       on endkey undo, leave:
      712   
      713       update
      714         skip(1)
      715         '  Track top users of:' skip
      716         skip(1)
      717         userTblName
      718         skip(1)
      719         '  Enter a valid table name or "" or ? to clear user of table tracking.' skip
      720         skip(1)
      721        with
      722         frame getVar
      723         title " Table Name "
      724         row 3
      725         centered
      726         width 100
      727         side-labels
      728         overlay
      729       .
      730   
      731       if userTblName = "" or userTblName = ? then
      732         userTblNum = ?.
      733        else
      734         do:
      735           find tt_tbl where tt_tbl.tblName = userTblName no-error.
      736           if available tt_tbl then
      737             userTblNum = tt_tbl.xid.
      738            else
      739             do:
      740               message "Please enter a valid table name.".
      741               pause.
      742               undo, retry.
      743             end. 
      744         end.
      745   
      746     end.
      747   
      748     hide frame getVar.
      749   
      750     return.
      751   
      752   end.
      753   
      754   
      755   procedure getUserIdxName:
      756   
      757     define input-output parameter userIdxName as character no-undo format "x(50)".
      758     define input-output parameter userIdxNum  as integer   no-undo.
      759   
      760     do on error undo, leave
      761       on endkey undo, leave:
      762   
      763       update
      764         skip(1)
      765         '  Track top users of:' skip
      766         skip(1)
      767         userIdxName
      768         skip(1)
      769         '  Enter a valid index name or "" or ? to clear user of index tracking.' skip
      770         skip(1)
      771        with
      772         frame getVar
      773         title " Index Name "
      774         row 3
      775         centered
      776         width 100
      777         side-labels
      778         overlay
      779       .
      780   
      781       if userIdxName = "" or userIdxName = ? then
      782         userIdxNum = ?.
      783        else
      784         do:
      785           find tt_idx where tt_idx.tblName = entry( 1, userIdxName, "." ) and tt_idx.idxName = entry( 2, userIdxName, "." ) no-error.
      786           if available tt_idx then
      787             userIdxNum = tt_idx.xid.
      788            else
      789             do:
      790               message "Please enter a valid index name (table.index).".
      791               pause.
      792               undo, retry.
      793             end. 
      794         end.
      795   
      796     end.
      797   
      798     hide frame getVar.
      799   
      800     return.
      801   
      802   end.
      803   
