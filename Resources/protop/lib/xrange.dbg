        1   /* xrange.p
        2    *
        3    */
        4   
        5   
        6   /*******************************************************************************
        7    *******************************************************************************
        8    **                                                                           **
        9    **                                                                           **
       10    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       11    **  http://www.greenfieldtech.com                                            **
       12    **                                                                           **
       13    **  ProTop is free software; you can redistribute it and/or modify it        **
       14    **  under the terms of the GNU General Public License (GPL) as published     **
       15    **  by the Free Software Foundation; either version 2 of the License, or     **
       16    **  at your option) any later version.                                       **
       17    **                                                                           **
       18    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       19    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       20    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       21    **  for more details.                                                        **
       22    **                                                                           **
       23    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       24    **  of use and alternative licensing options for this software.              **
       25    **                                                                           **
       26    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       27    **                                                                           **
       28    **  See http://www.fsf.org for more information about the GPL.               **
       29    **                                                                           **
       30    **                                                                           **
       31    *******************************************************************************
       32    *******************************************************************************
       33    *
       34    * protop.i
       35    *
       36    * Header file for protop family of programs
       37    *
       38    *
       39    * Known Bugs & Issues:
       40    *
       41    *
       42    * To Do:
       43    *
       44    *
       45    * Author:
       46    *
       47    *      Tom Bascom, Greenfield Technologies
       48    *      http://www.greenfieldtech.com
       49    *      August 28, 2003
       50    *
       51    */
       52   
       53   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       54   &global-define  FASTLOCK        true
       55   &ELSE
       56   &global-define  FASTLOCK        false
       57   &ENDIF
       58   
       59   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       60   &global-define  OE11            "yes"
       61   &global-define  xDEBUGTT        false
       62   &ENDIF
       63   
       64   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       65   &global-define  NOSERIALIZE     serialize-hidden
       66   &ENDIF
       67   
       68   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
       69   &global-define  BIGINT          int64
       70   &ELSE
       71   &global-define  BIGINT          decimal
       72   &ENDIF
       73   
       74   
       75   /* lib/v9.i
       76    *
       77    */
       78   
       79   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
       80   &global-define  CPYLOB  "no"
       81   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
       82   &global-define  LNGCR   character
       83   &global-define  DTZ     integer
       84   &global-define  BIGINT  decimal
       85   &ELSE
       86   &global-define  OE10    "yes"
       87   &global-define  NOW     now
       88   &global-define  LNGCR   longchar
       89   &global-define  DTZ     datetime-tz
       90   &global-define  BIGINT  int64
       91   &ENDIF
       92    
       93   
       94   /* use extended _connect fields: -client, -cache*
       95    */
       96   
       97   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
       98   &global-define  CONNECTX        "yes"
       99   &ELSE
      100   &global-define  CONNECTX        "no"
      101   &ENDIF
      102   
      103   define stream inStrm.
      104   
      105   define new global shared variable dbgMode as integer no-undo initial 1.
      106   
      107   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      108    *
      109    * someday everyone will have OO and I will replace these with a gsv class
      110    * or something of that ilk
      111    *
      112    */
      113   
      114   define new global shared variable pt_shortname   as character no-undo.
      115   define new global shared variable pt_uniqName    as character no-undo.
      116   define new global shared variable pt_server      as character no-undo.
      117   define new global shared variable pt_resrcType   as character no-undo.
      118   
      119   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      120   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      121   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      122   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      123   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      124   
      125   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      126   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      127   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      128   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      129   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      130   define new global shared variable pt_ioFileName  as character no-undo.
      131   define new global shared variable pt_dfCmd       as character no-undo.
      132   
      133   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      134   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      135   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      136   
      137   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      138   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      139   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      140   
      141   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      142   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      143   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      144   
      145   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      146   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      147   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      148   
      149   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      150   
      151   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      152   
      153   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      154   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      155   
      156   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      157    * 
      158    */
      159   
      160   define new global shared variable stime as integer no-undo.                     /* start time                           */
      161   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      162   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      163   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      164   
      165   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      166   
      167                                                                                   /* corresponding to base checkpoint#    */
      168   /** Global Shared Temp Table Definitions
      169    **
      170    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      171    ** And a shared temp-table is logically the same as a db table so who really cares?
      172    **
      173    **/
      174   
      175   /* cache _File and _Index records so that we don't keep hitting the db to translate
      176    */
      177   
      178   define new global shared temp-table tt_tbl no-undo
      179     field xid      as integer                                             /* _File._File-Num              */
      180     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      181     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      182     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      183     field tblname  as character                                           /* _File._File-Name             */
      184     index xid-idx is unique primary xid.
      185   
      186   define new global shared temp-table tt_idx no-undo
      187     field xid      as integer                                             /* _Index._Idx-Num              */
      188     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      189     field idxname  as character                                           /* _Index._Idx-Name             */
      190     field idxnote  as character
      191     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      192     field tblnum   as integer                                             /* _File._File-Num              */
      193     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      194     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      195     field tblname  as character                                           /* _File._File-Name             */
      196     index xid-idx is unique primary xid.
      197   
      198   define new global shared temp-table tt_areaExtent no-undo
      199     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      200     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      201   
      202     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      203     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      204     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      205   
      206     index ae-idx is unique primary areaNum extNum.
      207   
      208   define new global shared temp-table tt_area no-undo
      209     field xid      as integer    format ">>>9"
      210     field SANum    as integer    format ">>>9"        label "#"
      211     field areaPool as character  format "x(2)"        label "BX"
      212   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      213     field SAName   as character  format "x(30)"       label "Area Name"
      214     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      215     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      216     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      217     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      218     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      219     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      220     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      221   
      222     field blkszkb as integer     format ">>9"         label "BSZ"
      223     field rpb     as integer     format ">>9"         label "RPB"
      224     field clstrsz as integer     format ">>9"         label "CSZ"
      225   
      226     field numTbls as integer     format ">>>>9"       label "#Tbls"
      227     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      228     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      229   
      230     field numExts as integer     format ">>>>9"       label "#Exts"
      231     field hasVar  as logical     format "Yes/No"      label "Var?"
      232   
      233     field xnote   as character   format "x"           label "*"
      234   
      235     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      236     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      237   
      238     index pctAlloc-idx is primary pctAlloc descending
      239     index pctLastX-idx pctLastX pctAlloc descending
      240     index allocGB-idx allocGB descending
      241     index totGB-idx totGB descending
      242     index xid-idx is unique xid
      243     index SANum-idx is unique SANum
      244     index SAName-idx is unique SAName
      245   .
      246   
      247   *** Encrypted Source ***
      248   *** Encrypted Source ***
      249   *** Encrypted Source ***
      250   *** Encrypted Source ***
      251   *** Encrypted Source ***
      252   *** Encrypted Source ***
      253   *** Encrypted Source ***
      254   *** Encrypted Source ***
      255   *** Encrypted Source ***
      256   *** Encrypted Source ***
      257   *** Encrypted Source ***
      258   *** Encrypted Source ***
      259   *** Encrypted Source ***
      260   *** Encrypted Source ***
      261   *** Encrypted Source ***
      262   *** Encrypted Source ***
      263   *** Encrypted Source ***
      264   *** Encrypted Source ***
      265   *** Encrypted Source ***
      266   *** Encrypted Source ***
      267   *** Encrypted Source ***
      268   *** Encrypted Source ***
      269   *** Encrypted Source ***
      270   *** Encrypted Source ***
      271   *** Encrypted Source ***
      272   *** Encrypted Source ***
      273   *** Encrypted Source ***
      274   *** Encrypted Source ***
      275   *** Encrypted Source ***
      276   *** Encrypted Source ***
      277   *** Encrypted Source ***
      278   *** Encrypted Source ***
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317    
      318   
      319   /*******************************************************************************
      320    *******************************************************************************
      321    **                                                                           **
      322    **                                                                           **
      323    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      324    **  http://www.greenfieldtech.com                                            **
      325    **                                                                           **
      326    **  ProTop is free software; you can redistribute it and/or modify it        **
      327    **  under the terms of the GNU General Public License (GPL) as published     **
      328    **  by the Free Software Foundation; either version 2 of the License, or     **
      329    **  at your option) any later version.                                       **
      330    **                                                                           **
      331    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      332    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      333    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      334    **  for more details.                                                        **
      335    **                                                                           **
      336    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      337    **  of use and alternative licensing options for this software.              **
      338    **                                                                           **
      339    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      340    **                                                                           **
      341    **  See http://www.fsf.org for more information about the GPL.               **
      342    **                                                                           **
      343    **                                                                           **
      344    *******************************************************************************
      345    *******************************************************************************
      346    *
      347    * protoplib.i
      348    *
      349    * ProTop infrastructure library definitions
      350    *
      351    */
      352   
      353   function uDateTime returns integer () in super.
      354   function string2uDateTime returns integer( input p_text as character ) in super.
      355   function searchDir returns character ( input xDir as character ) in super.
      356   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      357   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      358   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      359   function myPID returns character () in super.
      360   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      361   
      362   /* end protoplib.i */
      363    
      364   
      365   /*******************************************************************************
      366    *******************************************************************************
      367    **                                                                           **
      368    **                                                                           **
      369    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      370    **  http://www.greenfieldtech.com                                            **
      371    **                                                                           **
      372    **  ProTop is free software; you can redistribute it and/or modify it        **
      373    **  under the terms of the GNU General Public License (GPL) as published     **
      374    **  by the Free Software Foundation; either version 2 of the License, or     **
      375    **  at your option) any later version.                                       **
      376    **                                                                           **
      377    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      378    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      379    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      380    **  for more details.                                                        **
      381    **                                                                           **
      382    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      383    **  of use and alternative licensing options for this software.              **
      384    **                                                                           **
      385    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      386    **                                                                           **
      387    **  See http://www.fsf.org for more information about the GPL.               **
      388    **                                                                           **
      389    **                                                                           **
      390    *******************************************************************************
      391    *******************************************************************************
      392    *
      393    * vstlib.i
      394    *
      395    * VST library definitions
      396    *
      397    */
      398   
      399   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      400   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      401   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      402   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      403   
      404   function connectFlags returns character ( input cnxId as integer ) in super.
      405   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      406   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      407   
      408   function isAIEnabled returns logical () in super.
      409   function isReplSource returns logical () in super.
      410   function isReplTarget returns logical () in super.
      411   function isBackupRunning returns logical () in super.
      412   function isWorkgroup returns logical () in super.
      413   
      414   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      415   
      416   /* end vstlib.i */
      417    
      418   
      419   function add2ds returns logical ( input h as handle ) in super.
      420   function getTempTableHandle returns handle ( input n as character ) in super.
      421   
      422   /* end protop.i */
      423    
      424   
      425   define stream rangeStrm.
      426   
      427   procedure getRangeData:
      428   
      429     define input-output parameter numTbl    as integer no-undo.
      430     define input-output parameter numIdx    as integer no-undo.
      431     define input-output parameter numLOB    as integer no-undo.
      432   
      433     define input-output parameter tblBase   as integer no-undo.
      434     define input-output parameter idxBase   as integer no-undo. 
      435     define input-output parameter tblRange  as integer no-undo.
      436     define input-output parameter idxRange  as integer no-undo.
      437   
      438     define input-output parameter minTblNum as integer no-undo.
      439     define input-output parameter maxTblNum as integer no-undo.
      440     define input-output parameter minIdxNum as integer no-undo.
      441     define input-output parameter maxIdxNum as integer no-undo.
      442     define input-output parameter unMonTbl  as integer no-undo.
      443     define input-output parameter unMonIdx  as integer no-undo.
      444     define input-output parameter excessTbl as integer no-undo.
      445     define input-output parameter excessIdx as integer no-undo.
      446   
      447     define input-output parameter hst       as integer no-undo.           /* "highest stats table"                */
      448     define input-output parameter hsi       as integer no-undo.           /* "highest stats index"                */
      449     define input-output parameter lxt       as integer no-undo.           /* "lowest table > -16384"              */
      450     define input-output parameter lxi       as integer no-undo.           /* "lowest index"                       */
      451     define input-output parameter hxi       as integer no-undo.           /* "highest index"                      */
      452     define input-output parameter hxt       as integer no-undo.           /* "highest table < 32768"              */
      453     define input-output parameter lmt       as integer no-undo.           /* "lowest monitored table"             */
      454     define input-output parameter lmi       as integer no-undo.           /* "lowest monitored index"             */
      455     define input-output parameter hmt       as integer no-undo.           /* "highest monitored table"            */
      456     define input-output parameter hmi       as integer no-undo.           /* "highest monitored index"            */
      457   
      458   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 12.0
      459   &THEN
      460     assign
      461       tblBase = integer( getStartUpX( "", "(-basetable)", "" ))
      462       idxBase = integer( getStartUpX( "", "(-baseindex)", "" ))
      463     .
      464   &ELSE
      465     find dictdb._StatBase no-lock.        /* _statBase is removed in oe12         */
      466     assign
      467       tblBase = _StatBase._tableBase
      468       idxBase = _StatBase._indexBase
      469     .
      470   &ENDIF
      471   
      472     for each dictdb._TableStat no-lock:
      473       tblRange = tblRange + 1.
      474     end.
      475   
      476     for each dictdb._IndexStat no-lock:
      477       idxRange = idxRange + 1.
      478     end.
      479   
      480     /* table number ranges  
      481      * 0 to 32768         application data
      482      * > 32768            sql views
      483      * -1 to -79          metaschema, sql89
      484      * -80 to -125        sql catalog
      485      * -200 to ?          auditing, authorization & logging
      486      * -300 to -361       multi-tenancy, horizontal table partitioning
      487      * < -16385           vsts
      488      *
      489      */
      490   
      491     assign
      492       hst = tblRange + tblBase - 1
      493       hsi = idxRange + idxBase - 1
      494     .
      495   
      496     assign
      497       minTblNum = 99999           /*  what if there are no tables?  does this make sense?                 */
      498       maxTblNum = 0
      499       minIdxNum = 99999           /*  what if there are no indexes?  does this make sense?                */
      500       maxIdxNum = 0
      501     .
      502   
      503     numTbl = 0.
      504     for each tt_tbl where tt_tbl.xid >= 0 and tt_tbl.xid < 32768:
      505       if tblname begins "_" then next.
      506       assign
      507         numTbl = numTbl + 1
      508         minTblNum = min( minTblNum, tt_tbl.xid )
      509         maxTblNum = max( maxTblNum, tt_tbl.xid )
      510       .
      511       if tt_tbl.xid < tblBase then unMonTbl = unMonTbl + 1.
      512       if tt_tbl.xid > hst     then unMonTbl = unMonTbl + 1.
      513     end.
      514   
      515     find first tt_tbl where tt_tbl.xid > -16384 no-error.
      516     if available tt_tbl then lxt = tt_tbl.xid.
      517   
      518     find last tt_tbl where tt_tbl.xid < 32768 no-error.
      519     if available tt_tbl then hxt = tt_tbl.xid.
      520   
      521     find first tt_tbl where tt_tbl.xid >= tblBase no-error.
      522     if available tt_tbl then lmt = tt_tbl.xid.
      523   
      524     find last tt_tbl where tt_tbl.xid <= hst no-error.
      525     if available tt_tbl then hmt = tt_tbl.xid.
      526   
      527     /* index number ranges
      528      * 0 to 7             meta schema indexes
      529      * 8 to 993           application indexes
      530      * 994 to 1093        system indexes (with holes)
      531      * > 1093             application indexes
      532      * < 0                system indexes
      533      * < -16385           vst indexes
      534      */
      535   
      536     numIdx = 0.
      537     for each tt_idx:
      538       if idxname begins "_" then next.
      539       assign
      540         numIdx = numIdx + 1
      541         minIdxNum = min( minIdxNum, tt_idx.xid )
      542         maxIdxNum = max( maxIdxNum, tt_idx.xid )
      543       .
      544       if tt_idx.xid < idxBase then unMonIdx = unMonIdx + 1.
      545       if tt_idx.xid > hsi     then unMonIdx = unMonIdx + 1.
      546     end.
      547   
      548     find first tt_idx where tt_idx.xid >= idxBase no-error.
      549     if available tt_idx then lmi = tt_idx.xid.
      550   
      551     find last tt_idx where tt_idx.xid <= hsi no-error.
      552     if available tt_idx then hmi = tt_idx.xid.
      553   
      554     find first tt_idx where tt_idx.xid > -16385 no-error.
      555     if available tt_idx then lxi = tt_idx.xid.
      556   
      557     find last tt_idx no-error.
      558     if available tt_idx then hxi = tt_idx.xid.
      559   
      560   
      561     /* LOBs
      562      */
      563   
      564     numLOB = 0.
      565     for each dictdb._field no-lock:
      566       if _field._data-type matches "*LOB*" then
      567         do:
      568           find _file no-lock where recid( _file ) = _field._file-recid.
      569           if _tbl-type = "t" then numLOB = numLOB + 1.
      570         end.
      571     end.
      572   
      573     assign
      574       excessTbl = ((( tblRange + min( 0, tblBase )) - 1 ) - maxTblNum )
      575       excessIdx = ((( idxRange + min( 0, idxBase )) - 1 ) - maxIdxNum ) + 1
      576     .
      577   
      578     return.
      579   
      580   end.
      581   
      582   
      583   procedure showRangeData:
      584   
      585     define variable numTbl    as integer no-undo.
      586     define variable numIdx    as integer no-undo.
      587     define variable numLOB    as integer no-undo.
      588     define variable tblBase   as integer no-undo.
      589     define variable idxBase   as integer no-undo. 
      590     define variable tblRange  as integer no-undo.
      591     define variable idxRange  as integer no-undo.
      592     define variable minTblNum as integer no-undo.
      593     define variable maxTblNum as integer no-undo.
      594     define variable minIdxNum as integer no-undo.
      595     define variable maxIdxNum as integer no-undo.
      596     define variable unMonTbl  as integer no-undo.
      597     define variable unMonIdx  as integer no-undo.
      598     define variable excessTbl as integer no-undo.
      599     define variable excessIdx as integer no-undo.
      600     define variable hst       as integer no-undo.         /* "highest stats table"                */
      601     define variable hsi       as integer no-undo.         /* "highest stats index"                */
      602     define variable lxt       as integer no-undo.         /* "lowest table > -16384"              */
      603     define variable lxi       as integer no-undo.         /* "lowest index"                       */
      604     define variable hxi       as integer no-undo.         /* "highest index"                      */
      605     define variable hxt       as integer no-undo.         /* "highest table < 32768"              */
      606     define variable lmt       as integer no-undo.         /* "lowest monitored table"             */
      607     define variable lmi       as integer no-undo.         /* "lowest monitored index"             */
      608     define variable hmt       as integer no-undo.         /* "highest monitored table"            */
      609     define variable hmi       as integer no-undo.         /* "highest monitored index"            */
      610   
      611     define variable tclr as integer no-undo.
      612     define variable iclr as integer no-undo.
      613   
      614     define variable nastyGram as character no-undo format "x(96)".
      615     define variable suggestPF as character no-undo format "x(58)".
      616   
      617     run getRangeData(
      618       input-output numTbl,
      619       input-output numIdx,
      620       input-output numLOB,
      621       input-output tblBase,
      622       input-output idxBase,
      623       input-output tblRange,
      624       input-output idxRange,
      625       input-output minTblNum,
      626       input-output maxTblNum,
      627       input-output minIdxNum,
      628       input-output maxIdxNum,
      629       input-output unMonTbl,
      630       input-output unMonIdx,
      631       input-output excessTbl,
      632       input-output excessIdx,
      633       input-output hst,
      634       input-output hsi,
      635       input-output lxt,
      636       input-output lxi,
      637       input-output hxi,
      638       input-output hxt,
      639       input-output lmt,
      640       input-output lmi,
      641       input-output hmt,
      642       input-output hmi
      643     ).
      644   
      645     suggestPF = substitute( "&1/&2.range.pf", pt_tmpdir, pt_shortname ).
      646   
      647     output stream rangeStrm to value( suggestPF ).
      648   
      649     put stream rangeStrm unformatted "# suggested table and index statistics settings for " pdbname(1) skip.
      650     put stream rangeStrm unformatted "#" skip.
      651     put stream rangeStrm unformatted skip(1).
      652   
      653     put stream rangeStrm unformatted "# basic (excludes sysatem tables and some system indexes)" skip.
      654     put stream rangeStrm unformatted skip(1).
      655     put stream rangeStrm unformatted "# -tablebase "      minTblNum       skip.
      656     put stream rangeStrm unformatted "# -tablerangesize " maxTblNum + 50  skip.
      657     put stream rangeStrm unformatted "# -indexbase "      minIdxNum       skip.
      658     put stream rangeStrm unformatted "# -indexrangesize " maxIdxNum - minIdxNum + 50 skip.
      659     put stream rangeStrm unformatted skip(1).
      660   
      661     put stream rangeStrm unformatted "# complete (includes system tables)" skip.
      662     put stream rangeStrm unformatted skip(1).
      663     put stream rangeStrm unformatted "-tablebase "      lxt            skip.
      664     put stream rangeStrm unformatted "-tablerangesize " hxt - lxt + 50 skip.
      665     put stream rangeStrm unformatted "-indexbase "      lxi            skip.
      666     put stream rangeStrm unformatted "-indexrangesize " hxi - lxi + 50 skip.
      667     put stream rangeStrm unformatted skip(1).
      668   
      669     output stream rangeStrm close.
      670   
      671     if session:batch = no then
      672       do:
      673   
      674         if excessTbl < 0 or excessIdx < 0 then 
      675           nastyGram = "      The -*rangesize parameters are not set adequately to monitor all tables and indexes!!!".
      676   
      677         tclr = ( if excessTbl < 0 then 6 else 5 ).
      678         iclr = ( if excessIdx < 0 then 6 else 5 ).
      679   
      680         display
      681           skip(1)
      682           nastyGram /* dcolor 6 */ skip
      683           skip(1)
      684           "                          -basetable:" dcolor tclr tblBase    format "->>,>>9"             "                          -baseindex:" dcolor iclr idxBase    format "->>,>>9" "  " skip
      685           "                     -tablerangesize:" dcolor tclr tblRange   format "->>,>>9"             "                     -indexrangesize:" dcolor iclr idxRange   format "->>,>>9" skip
      686           skip(1)
      687           "                Highest Stats Table#:" hst        format "->>,>>9"             "                Highest Stats Index#:" hsi        format "->>,>>9" skip
      688           "             Lowest Monitored Table#:" lmt        format "->>,>>9"             "             Lowest Monitored Index#:" lmi        format "->>,>>9" skip
      689           "            Highest Monitored Table#:" hmt        format "->>,>>9"             "            Highest Monitored Index#:" hmi        format "->>,>>9" skip
      690           skip(1)
      691           "                                   Application Tables and Indexes " skip
      692           skip(1)
      693           "         Actual Number of App Tables:" numTbl     format "->>,>>9"             "        Actual Number of App Indexes:" numIdx     format "->>,>>9" skip
      694           "                  Minimum App Table#:" minTblNum  format "->>,>>9"             "                 Minimum App  Index#:" minIdxNum  format "->>,>>9" skip
      695           "                  Maximum App Table#:" maxTblNum  format "->>,>>9"             "                 Maximum App  Index#:" maxIdxNum  format "->>,>>9" skip
      696           "              Unmonitored App Tables:" unMonTbl   format "->>,>>9"             "             Unmonitored App Indexes:" unMonIdx   format "->>,>>9" skip
      697           skip(1)
      698           "                  Excess Table Range:" excessTbl  format "->>,>>9"             "                  Excess Index Range:" excessIdx  format "->>,>>9" skip
      699           skip(1)
      700           "              Minimal App -basetable:" dcolor 7 ( minTblNum + 0 ) format "->>,>>9"      "              Minimal App -baseindex:" dcolor 7 ( minIdxNum + 0 ) format "->>,>>9" skip
      701           "         Minimal App -tablerangesize:" dcolor 7 ( maxTblNum + 0 ) format "->>,>>9"      "         Minimal App -indexrangesize:" dcolor 7 ( maxIdxNum - minIdxNum + 1 ) format "->>,>>9" skip
      702           skip(1)
      703           "                Suggested -basetable:" ( minTblNum + 0 )  format "->>,>>9"     "                Suggested -baseindex:" ( minIdxNum + 0 ) format "->>,>>9" skip
      704           "           Suggested -tablerangesize:" ( maxTblNum + 50 ) format "->>,>>9"     "           Suggested -indexrangesize:" ( maxIdxNum - minIdxNum + 50 ) format "->>,>>9" skip
      705           skip(1)
      706           "                                   System Tables and Indexes " skip
      707           skip(1)
      708           "                       Lowest Table#:" lxt        format "->>,>>9"             "                       Lowest Index#:" lxi        format "->>,>>9" skip
      709           "                      Highest Table#:" hxt        format "->>,>>9"             "                      Highest Index#:" hxi        format "->>,>>9" skip
      710           skip(1)
      711           "       Suggested Complete -basetable:" dcolor 9 ( lxt + 0 ) format "->>,>>9"            "       Suggested Complete -baseindex:" dcolor 9 ( lxi + 0 ) format "->>,>>9" skip
      712           "  Suggested Complete -tablerangesize:" dcolor 9 ( hxt - lxt + 50 ) format "->>,>>9"     "  Suggested Complete -indexrangesize:" dcolor 9 ( hxi - lxi + 50 ) format "->>,>>9" skip
      713           skip(2)
      714           '  * "System" tables and indexes include the meta-schema but do not count psuedo tables such ' skip
      715           '    as VSTs and SQL views as these do not have any CRUD statistics associated with them.    ' skip
      716           skip(1)
      717           '  Suggested settings can be found in: ' suggestPF skip
      718           skip(1)
      719          with
      720           frame showXRangeInfo
      721           title " Table and Index Range Information "
      722           centered
      723           no-labels
      724           row 4
      725           overlay
      726           width 100
      727         .
      728   
      729         color display value( if opsys = "unix" then "RED" else "RED/WHITE" )
      730   
      731           nastyGram
      732   
      733           tblBase   when excessTbl < 0
      734           tblRange  when excessTbl < 0
      735           excessTbl when excessTbl < 0
      736   
      737           idxBase   when excessIdx < 0
      738           idxRange  when excessIdx < 0
      739           excessIdx when excessIdx < 0
      740   
      741          with
      742           frame showXRangeInfo
      743         .
      744   
      745         pause.
      746   
      747         hide frame showXRangeInfo.
      748   
      749       end.
      750   
      751     return.
      752   
      753   end.
      754   
      755   
      756   procedure checkRangeData:
      757   
      758     define variable numTbl    as integer no-undo.
      759     define variable numIdx    as integer no-undo.
      760     define variable numLOB    as integer no-undo.
      761     define variable tblBase   as integer no-undo.
      762     define variable idxBase   as integer no-undo. 
      763     define variable tblRange  as integer no-undo.
      764     define variable idxRange  as integer no-undo.
      765     define variable minTblNum as integer no-undo.
      766     define variable maxTblNum as integer no-undo.
      767     define variable minIdxNum as integer no-undo.
      768     define variable maxIdxNum as integer no-undo.
      769     define variable unMonTbl  as integer no-undo.
      770     define variable unMonIdx  as integer no-undo.
      771     define variable excessTbl as integer no-undo.
      772     define variable excessIdx as integer no-undo.
      773     define variable hst       as integer no-undo.         /* "highest stats table"                */
      774     define variable hsi       as integer no-undo.         /* "highest stats index"                */
      775     define variable lxt       as integer no-undo.         /* "lowest table > -16384"              */
      776     define variable lxi       as integer no-undo.         /* "lowest index"                       */
      777     define variable hxi       as integer no-undo.         /* "highest index"                      */
      778     define variable hxt       as integer no-undo.         /* "highest table < 32768"              */
      779     define variable lmt       as integer no-undo.         /* "lowest monitored table"             */
      780     define variable lmi       as integer no-undo.         /* "lowest monitored index"             */
      781     define variable hmt       as integer no-undo.         /* "highest monitored table"            */
      782     define variable hmi       as integer no-undo.         /* "highest monitored index"            */
      783   
      784     run getRangeData(
      785       input-output numTbl,
      786       input-output numIdx,
      787       input-output numLOB,
      788       input-output tblBase,
      789       input-output idxBase,
      790       input-output tblRange,
      791       input-output idxRange,
      792       input-output minTblNum,
      793       input-output maxTblNum,
      794       input-output minIdxNum,
      795       input-output maxIdxNum,
      796       input-output unMonTbl,
      797       input-output unMonIdx,
      798       input-output excessTbl,
      799       input-output excessIdx,
      800       input-output hst,
      801       input-output hsi,
      802       input-output lxt,
      803       input-output lxi,
      804       input-output hxi,
      805       input-output hxt,
      806       input-output lmt,
      807       input-output lmi,
      808       input-output hmt,
      809       input-output hmi
      810     ).
      811   
      812     if excessTbl < 0 or excessIdx < 0 then  
      813       run showRangeData.
      814   
      815     return.
      816   
      817   end.
      818   
      819   
      820   /*** main
      821    ***/
      822   
      823   session:add-super-procedure( this-procedure ).
      824   
      825   subscribe to "protop_checkRangeData" anywhere run-procedure "checkRangeData".
      826   subscribe to "protop_showRangeData"  anywhere run-procedure "showRangeData".
      827   
      828   return.
