        1   /* protop.p
        2    *
        3    * start interactive protop client
        4    *
        5    * mpro -p protop -param "friendlyName|startupDataCollectorList|connectString|options"
        6    *
        7    */
        8   
        9   do on stop   undo, retry                                                /* drop out on any untrapped fatal errors               */
       10      on error  undo, retry
       11      on endkey undo, retry:
       12   
       13     if retry then                                                         /* this should never fire                               */
       14       do:
       15         message "Unhandled fatal error:" error-status:get-number(1) error-status:get-message(1).
       16         pause.
       17         quit.
       18       end.
       19   
       20   /* the end of this block is at the end of protop.p... indenting the whole program just seems silly */
       21   
       22   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) > 11.0 &THEN
       23   
       24   if os-getenv( "TTDEBUG" ) = "yes" then
       25     do:
       26       Progress.Database.TempTableInfo:ArchiveTableStatistics = true no-error.
       27       Progress.Database.TempTableInfo:ArchiveIndexStatistics = true no-error.
       28     end.
       29   
       30   &ENDIF
       31   
       32   assign                                                                  /* a lazy american must have written this code...       */
       33     session:date-format    = "ymd"
       34     session:numeric-format = "american"
       35   .
       36   
       37   
       38   /*******************************************************************************
       39    *******************************************************************************
       40    **                                                                           **
       41    **                                                                           **
       42    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       43    **  http://www.greenfieldtech.com                                            **
       44    **                                                                           **
       45    **  ProTop is free software; you can redistribute it and/or modify it        **
       46    **  under the terms of the GNU General Public License (GPL) as published     **
       47    **  by the Free Software Foundation; either version 2 of the License, or     **
       48    **  at your option) any later version.                                       **
       49    **                                                                           **
       50    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       51    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       52    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       53    **  for more details.                                                        **
       54    **                                                                           **
       55    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       56    **  of use and alternative licensing options for this software.              **
       57    **                                                                           **
       58    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       59    **                                                                           **
       60    **  See http://www.fsf.org for more information about the GPL.               **
       61    **                                                                           **
       62    **                                                                           **
       63    *******************************************************************************
       64    *******************************************************************************
       65    *
       66    * protop.i
       67    *
       68    * Header file for protop family of programs
       69    *
       70    *
       71    * Known Bugs & Issues:
       72    *
       73    *
       74    * To Do:
       75    *
       76    *
       77    * Author:
       78    *
       79    *      Tom Bascom, Greenfield Technologies
       80    *      http://www.greenfieldtech.com
       81    *      August 28, 2003
       82    *
       83    */
       84   
       85   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       86   &global-define  FASTLOCK        true
       87   &ELSE
       88   &global-define  FASTLOCK        false
       89   &ENDIF
       90   
       91   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       92   &global-define  OE11            "yes"
       93   &global-define  xDEBUGTT        false
       94   &ENDIF
       95   
       96   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
       97   &global-define  NOSERIALIZE     serialize-hidden
       98   &ENDIF
       99   
      100   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
      101   &global-define  BIGINT          int64
      102   &ELSE
      103   &global-define  BIGINT          decimal
      104   &ENDIF
      105   
      106   
      107   /* lib/v9.i
      108    *
      109    */
      110   
      111   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
      112   &global-define  CPYLOB  "no"
      113   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
      114   &global-define  LNGCR   character
      115   &global-define  DTZ     integer
      116   &global-define  BIGINT  decimal
      117   &ELSE
      118   &global-define  OE10    "yes"
      119   &global-define  NOW     now
      120   &global-define  LNGCR   longchar
      121   &global-define  DTZ     datetime-tz
      122   &global-define  BIGINT  int64
      123   &ENDIF
      124    
      125   
      126   /* use extended _connect fields: -client, -cache*
      127    */
      128   
      129   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      130   &global-define  CONNECTX        "yes"
      131   &ELSE
      132   &global-define  CONNECTX        "no"
      133   &ENDIF
      134   
      135   define stream inStrm.
      136   
      137   define new global shared variable dbgMode as integer no-undo initial 1.
      138   
      139   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      140    *
      141    * someday everyone will have OO and I will replace these with a gsv class
      142    * or something of that ilk
      143    *
      144    */
      145   
      146   define new global shared variable pt_shortname   as character no-undo.
      147   define new global shared variable pt_uniqName    as character no-undo.
      148   define new global shared variable pt_server      as character no-undo.
      149   define new global shared variable pt_resrcType   as character no-undo.
      150   
      151   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      152   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      153   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      154   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      155   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      156   
      157   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      158   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      159   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      160   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      161   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      162   define new global shared variable pt_ioFileName  as character no-undo.
      163   define new global shared variable pt_dfCmd       as character no-undo.
      164   
      165   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      166   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      167   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      168   
      169   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      170   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      171   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      172   
      173   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      174   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      175   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      176   
      177   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      178   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      179   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      180   
      181   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      182   
      183   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      184   
      185   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      186   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      187   
      188   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      189    * 
      190    */
      191   
      192   define new global shared variable stime as integer no-undo.                     /* start time                           */
      193   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      194   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      195   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      196   
      197   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      198   
      199                                                                                   /* corresponding to base checkpoint#    */
      200   /** Global Shared Temp Table Definitions
      201    **
      202    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      203    ** And a shared temp-table is logically the same as a db table so who really cares?
      204    **
      205    **/
      206   
      207   /* cache _File and _Index records so that we don't keep hitting the db to translate
      208    */
      209   
      210   define new global shared temp-table tt_tbl no-undo
      211     field xid      as integer                                             /* _File._File-Num              */
      212     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      213     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      214     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      215     field tblname  as character                                           /* _File._File-Name             */
      216     index xid-idx is unique primary xid.
      217   
      218   define new global shared temp-table tt_idx no-undo
      219     field xid      as integer                                             /* _Index._Idx-Num              */
      220     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      221     field idxname  as character                                           /* _Index._Idx-Name             */
      222     field idxnote  as character
      223     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      224     field tblnum   as integer                                             /* _File._File-Num              */
      225     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      226     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      227     field tblname  as character                                           /* _File._File-Name             */
      228     index xid-idx is unique primary xid.
      229   
      230   define new global shared temp-table tt_areaExtent no-undo
      231     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      232     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      233   
      234     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      235     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      236     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      237   
      238     index ae-idx is unique primary areaNum extNum.
      239   
      240   define new global shared temp-table tt_area no-undo
      241     field xid      as integer    format ">>>9"
      242     field SANum    as integer    format ">>>9"        label "#"
      243     field areaPool as character  format "x(2)"        label "BX"
      244   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      245     field SAName   as character  format "x(30)"       label "Area Name"
      246     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      247     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      248     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      249     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      250     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      251     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      252     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      253   
      254     field blkszkb as integer     format ">>9"         label "BSZ"
      255     field rpb     as integer     format ">>9"         label "RPB"
      256     field clstrsz as integer     format ">>9"         label "CSZ"
      257   
      258     field numTbls as integer     format ">>>>9"       label "#Tbls"
      259     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      260     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      261   
      262     field numExts as integer     format ">>>>9"       label "#Exts"
      263     field hasVar  as logical     format "Yes/No"      label "Var?"
      264   
      265     field xnote   as character   format "x"           label "*"
      266   
      267     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      268     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      269   
      270     index pctAlloc-idx is primary pctAlloc descending
      271     index pctLastX-idx pctLastX pctAlloc descending
      272     index allocGB-idx allocGB descending
      273     index totGB-idx totGB descending
      274     index xid-idx is unique xid
      275     index SANum-idx is unique SANum
      276     index SAName-idx is unique SAName
      277   .
      278   
      279   *** Encrypted Source ***
      280   *** Encrypted Source ***
      281   *** Encrypted Source ***
      282   *** Encrypted Source ***
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319   *** Encrypted Source ***
      320   *** Encrypted Source ***
      321   *** Encrypted Source ***
      322   *** Encrypted Source ***
      323   *** Encrypted Source ***
      324   *** Encrypted Source ***
      325   *** Encrypted Source ***
      326   *** Encrypted Source ***
      327   *** Encrypted Source ***
      328   *** Encrypted Source ***
      329   *** Encrypted Source ***
      330   *** Encrypted Source ***
      331   *** Encrypted Source ***
      332   *** Encrypted Source ***
      333   *** Encrypted Source ***
      334   *** Encrypted Source ***
      335   *** Encrypted Source ***
      336   *** Encrypted Source ***
      337   *** Encrypted Source ***
      338   *** Encrypted Source ***
      339   *** Encrypted Source ***
      340   *** Encrypted Source ***
      341   *** Encrypted Source ***
      342   *** Encrypted Source ***
      343   *** Encrypted Source ***
      344   *** Encrypted Source ***
      345   *** Encrypted Source ***
      346   *** Encrypted Source ***
      347   *** Encrypted Source ***
      348   *** Encrypted Source ***
      349    
      350   
      351   /*******************************************************************************
      352    *******************************************************************************
      353    **                                                                           **
      354    **                                                                           **
      355    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      356    **  http://www.greenfieldtech.com                                            **
      357    **                                                                           **
      358    **  ProTop is free software; you can redistribute it and/or modify it        **
      359    **  under the terms of the GNU General Public License (GPL) as published     **
      360    **  by the Free Software Foundation; either version 2 of the License, or     **
      361    **  at your option) any later version.                                       **
      362    **                                                                           **
      363    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      364    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      365    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      366    **  for more details.                                                        **
      367    **                                                                           **
      368    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      369    **  of use and alternative licensing options for this software.              **
      370    **                                                                           **
      371    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      372    **                                                                           **
      373    **  See http://www.fsf.org for more information about the GPL.               **
      374    **                                                                           **
      375    **                                                                           **
      376    *******************************************************************************
      377    *******************************************************************************
      378    *
      379    * protoplib.i
      380    *
      381    * ProTop infrastructure library definitions
      382    *
      383    */
      384   
      385   function uDateTime returns integer () in super.
      386   function string2uDateTime returns integer( input p_text as character ) in super.
      387   function searchDir returns character ( input xDir as character ) in super.
      388   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      389   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      390   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      391   function myPID returns character () in super.
      392   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      393   
      394   /* end protoplib.i */
      395    
      396   
      397   /*******************************************************************************
      398    *******************************************************************************
      399    **                                                                           **
      400    **                                                                           **
      401    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      402    **  http://www.greenfieldtech.com                                            **
      403    **                                                                           **
      404    **  ProTop is free software; you can redistribute it and/or modify it        **
      405    **  under the terms of the GNU General Public License (GPL) as published     **
      406    **  by the Free Software Foundation; either version 2 of the License, or     **
      407    **  at your option) any later version.                                       **
      408    **                                                                           **
      409    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      410    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      411    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      412    **  for more details.                                                        **
      413    **                                                                           **
      414    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      415    **  of use and alternative licensing options for this software.              **
      416    **                                                                           **
      417    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      418    **                                                                           **
      419    **  See http://www.fsf.org for more information about the GPL.               **
      420    **                                                                           **
      421    **                                                                           **
      422    *******************************************************************************
      423    *******************************************************************************
      424    *
      425    * vstlib.i
      426    *
      427    * VST library definitions
      428    *
      429    */
      430   
      431   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      432   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      433   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      434   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      435   
      436   function connectFlags returns character ( input cnxId as integer ) in super.
      437   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      438   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      439   
      440   function isAIEnabled returns logical () in super.
      441   function isReplSource returns logical () in super.
      442   function isReplTarget returns logical () in super.
      443   function isBackupRunning returns logical () in super.
      444   function isWorkgroup returns logical () in super.
      445   
      446   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      447   
      448   /* end vstlib.i */
      449    
      450   
      451   function add2ds returns logical ( input h as handle ) in super.
      452   function getTempTableHandle returns handle ( input n as character ) in super.
      453   
      454   /* end protop.i */
      455    
      456   
      457   /* lib/dynscreen.i
      458    *
      459    */
      460   
      461   /*
      462   function dynViewerInit  returns logical ( f as handle, dcName as character, ttName as character, evtName as character, dispOrder as integer ) in super.
      463   function dynBrowserInit returns logical ( f as handle, dcName as character, ttName as character, evtName as character, dispOrder as integer ) in super.
      464    */
      465   
      466   function dynScreenUpdate returns logical ( data as longchar ) in super.
      467   function rowDisplay returns logical ( z as handle ) in super.
      468   
      469   function getBrowseColumnByName returns handle ( b as handle, n as character ) in super.
      470   
      471    
      472   
      473   define new global shared variable pt_first as logical no-undo.
      474   pt_first = yes.
      475   
      476   define temp-table tt_protop no-undo
      477     field order    as integer
      478     field scrType  as character
      479     field evtName  as character
      480     field scrTitle as character
      481     field dcName   as character
      482     field ttName   as character
      483     field minRows  as integer
      484     field maxRows  as integer
      485     index pt-idx is primary unique order
      486   .
      487   
      488   dbgMode = 1.
      489   
      490   define variable fast-start  as logical     no-undo initial yes.         /* if "no" then a pause will affect startup messages    */
      491   
      492   define new global shared variable monInt   as integer no-undo initial 10.       /* monitor sampling interval                            */
      493   /* define variable monint      as integer     no-undo initial 10. */            /* monitor refresh interval                             */
      494   
      495   define variable tick        as decimal     no-undo initial 0.5.         /* clock tick - 1/2 sec rounds up to 1 prior to OE11    */
      496   define variable monName     as character   no-undo initial "protop".
      497   define variable dbgFileName as character   no-undo.                     /* echo "3" > tmp/protop.s2k.debug                      */
      498   
      499   define variable dcList      as character   no-undo.                     /* list of active data collectors                       */
      500   define variable result      as longchar    no-undo.                     /* serialized XML or JSON from data collectors          */
      501   
      502   define variable ptCnxStr    as character   no-undo.                     /* how to connect to remote data collectors             */
      503   define variable ptParams    as character   no-undo.                     /* parameters for remote data collectors                */
      504   
      505   define variable ptStartup   as character   no-undo.                     /* which data collectors should we start with?          */
      506   
      507   define variable keepRunning as logical     no-undo initial yes.         /* if false then quit ProTop                            */
      508   define variable lastRefresh as datetime-tz no-undo.                     /* when was the last refresh?                           */
      509   define variable sampleMode  as character   no-undo initial "Auto".      /* are we sampling every X seconds?  or on-demand       */
      510   define variable connectMode as character   no-undo initial "Direct".    /* direct?  http?  stomp?                               */
      511   define variable fetchStart  as datetime-tz no-undo.                     /* when did we ask for data?                            */
      512   define variable fetchTime   as integer     no-undo.                     /* how long to fetch data?                              */
      513   
      514   define variable userNum     as integer     no-undo.                     /* Usr# for userInfo data collector                     */
      515   define variable userPID     as integer     no-undo.                     /* PID for userInfo data collector                      */
      516   
      517   define variable userTblName as character   no-undo.                     /*                                                      */
      518   define variable userTblNum  as integer     no-undo.                     /*                                                      */
      519   define variable userIdxName as character   no-undo.                     /*                                                      */
      520   define variable userIdxNum  as integer     no-undo.                     /*                                                      */
      521   
      522   define variable rawMode     as integer     no-undo initial 5.           /* interval (5), cumulative (4) or "raw" (3) metrics    */
      523   define variable timeMode    as integer     no-undo initial 2.           /* rate (2) or "summary" (1) metrics                    */
      524   define variable CSC         as logical     no-undo initial ?.           /* Client Statement Cache on/off                        */
      525   define variable logMode     as logical     no-undo.                     /* control the logging mode                             */
      526   
      527   define variable b as handle  no-undo.                                   /* a buffer handle                                      */
      528   define variable i as integer no-undo.                                   /* an integer                                           */
      529   
      530   define new global shared variable dsSize         as integer  no-undo.   /* the shame!                                           */
      531   define new global shared variable dsRows         as integer  no-undo.   /* the shame!                                           */
      532   define new global shared variable programmerMode as logical  no-undo.
      533   
      534   /* needed if the connection is to a remote db via http agents (connectMode = "http")
      535    */
      536   
      537   define variable url  as character no-undo.                      /* "localhost/cgi-bin/protop.cgi?type=pt3http&DB=s2k0&UID=tom"  */
      538   define variable host as character no-undo.
      539   define variable port as character no-undo.
      540   define variable path as character no-undo.
      541   
      542   /* variables for the screen header (row 1): built in procedure paintScreen() below
      543    */
      544   
      545   define variable headerFrame   as handle no-undo.
      546   define variable modeIndicator as handle no-undo.
      547   define variable protopVersion as handle no-undo.
      548   define variable clockString   as handle no-undo.
      549   
      550   /* row 2 of the header is built by dc/dbid.p
      551    */
      552   
      553   /* a fake variable and frame that will be positioned on row 3, which is always blank, so as to be invisible.  this
      554    * gives the READKEY statement a widget for focus which fixes the problems of being able to move browsers with the
      555    * arrow keys as well as the hiding of a seemingly random browse title.
      556    *
      557    * all of which then provides a foundation for perhaps moving psuedo-focus among the frames to permit scrolling
      558    * once I get some time to mess around with such things.
      559    *
      560    */
      561   
      562   define variable nothing   as character no-undo format "x".
      563   define variable something as character no-undo format "x(50)".          /* useful for debugging what was pressed...             */
      564   
      565   form
      566     nothing something
      567    with
      568     frame notHere
      569     no-box
      570     no-labels
      571     overlay
      572     row 3
      573     column 1
      574     color display normal prompt normal                    /* no underline for the field that we don't want anyone to see...       */
      575   .
      576   
      577   
      578   /* event handlers and internal procedures
      579    *
      580    */
      581   
      582   on any-printable of this-procedure do:
      583     message "eh?  that shouldn't have happened!".
      584     pause.
      585     publish "protop_command" ( chr( lastkey )).
      586     return. /* no-apply. */
      587   end.
      588   
      589   on window-close anywhere do:
      590     keepRunning = false.
      591     return.
      592   end.
      593   
      594   on any-printable of nothing in frame notHere do:
      595     something = something + chr( lastkey ).
      596     do while length( something ) > 8:
      597       something = substring( something, 2 ).
      598     end.
      599     display something with frame notHere.                                 /* help debug the vanishing keystroke problem...        */
      600     publish "protop_command" ( chr( lastkey )).
      601     return. /* no-apply. */
      602   end.
      603   
      604   
      605   procedure logMsg:
      606   
      607     define input parameter logLevel as integer   no-undo.
      608     define input parameter msgTxt   as character no-undo.
      609   
      610     if logLevel <= 3 then
      611       do:
      612         message substitute( "[&1]", logLevel ) msgTxt view-as alert-box.
      613         /* pause. */
      614       end.
      615   
      616     return.
      617   
      618   end.
      619   
      620   
      621   /* ProTop might not be running as a stand-alone program.
      622    *
      623    */
      624   
      625   procedure quitme:                                               /* If there is no parent procedure, we QUIT, otherwise drop     */
      626                                                                   /* drop out of the main event loop & RETURN                     */
      627     keepRunning = FALSE.
      628   
      629     /* reminder to signup for the web portal might go here */
      630   
      631     if "TTY" <> "tty" then                           /* prowin?                                                      */
      632       apply "window-close" to this-procedure.
      633      else
      634       if program-name( 4 ) = ? then QUIT.
      635   
      636     return.
      637   
      638   end.
      639   
      640   
      641   procedure setSampleMode:
      642   
      643     if sampleMode = "OnDemand" then                               /* this needs to be visible -- a header line is needed          */
      644       sampleMode = "Auto".
      645      else
      646       sampleMode = "OnDemand".
      647   
      648     return.
      649   
      650   end.
      651   
      652   
      653   procedure userInfo2:                                            /* userInfo returns extra data - when it is choosen also        */
      654                                                                   /* activate these                                               */
      655     publish "protop_usrtblact".
      656     publish "protop_usridxact".
      657     publish "protop_usrstack".
      658     publish "protop_usrother".
      659   
      660     return.
      661   
      662   end.
      663   
      664   
      665   /* keep track of the available data collectors
      666    */
      667   
      668   procedure register:
      669   
      670     define input parameter dcName as character no-undo.
      671   
      672     if dcName <> "" then
      673       dcList = dcList + ( if dcList = "" then "" else "," ) + dcName.
      674   
      675     return.
      676   
      677   end.
      678   
      679   
      680   procedure refresh:
      681   
      682     define variable reqString as character no-undo.
      683   
      684     /* only request the data collectors which are visible                        
      685      */
      686        
      687     publish "protop_getReqStr" ( input-output reqString ).
      688     
      689     /* /* --- currently only the userInformation data collector has an arglist --- */ a more sophisticated approach
      690      * might be needed now that that has changed
      691      */
      692   
      693     if lookup( "userInformation", reqString ) > 0 then
      694       do:
      695   
      696         if userNum <> ? then
      697           reqString = replace( reqString, "userInformation", substitute( "userInformation:USR=&1", userNum )).
      698          else if userPID <> ? then
      699           reqString = replace( reqString, "userInformation", substitute( "userInformation:PID=&1", userPID )).
      700   
      701       end.
      702   
      703     if lookup( "UsersOfTable", reqString ) > 0 then
      704       do:
      705   
      706         if userTblNum <> ? then
      707           reqString = replace( reqString, "usersOfTable", substitute( "usersOfTable:UTBLNUM=&1", userTblNum )).
      708   
      709       end.
      710   
      711     if lookup( "UsersOfIndex", reqString ) > 0 then
      712       do:
      713   
      714         if userIdxNum <> ? then
      715           reqString = replace( reqString, "usersOfIndex", substitute( "usersOfIndex:UIDXNUM=&1", userIdxNum )).
      716   
      717       end.
      718   
      719     run makeRequest ( reqString ).
      720   
      721     return.
      722   
      723   end.
      724   
      725   
      726   procedure makeRequest:
      727   
      728     define input parameter reqString as character no-undo.
      729   
      730     assign
      731       result     = ""
      732       fetchStart = now
      733     .
      734    
      735     if connectMode = "direct" then
      736       run doRequest( "|" + reqString, output result ).            /* we don't need userid for a direct connection                 */
      737   
      738     /*** @@@ if length( result ) > 0 then @@@ ***/ run paintScreen.
      739   
      740     return.
      741   
      742   end.
      743   
      744   
      745   define variable rt as character no-undo.
      746   
      747   procedure paintScreen:
      748   
      749     define variable s  as character no-undo.
      750   
      751     if true then /*** @@@ length( result ) > 0 then @@@ ***/
      752       do:
      753   
      754         fetchTime = abs( interval( now, fetchStart, "milliseconds" )).
      755   
      756         if index( result, "<?xml " ) = 1 then
      757           do:
      758             dynScreenUpdate( result ).
      759             rt = "XML".
      760           end.
      761          else if index( result, '~{"ProDataSet":' ) = 1 then
      762           do:
      763             dynScreenUpdate( result ).
      764             rt = "JSON".
      765           end.
      766          else
      767           do:
      768             dynScreenUpdate( result ).
      769             rt = "DS".
      770   /*** @@@ eliminate prodataset2json etc conversion & reconversion
      771    *        s = substring( result, 1, 256 ).
      772    *        rt = "Unsupported".
      773    *        message "Unsupported return type:" s view-as alert-box.
      774    ***/
      775           end.
      776       end.
      777   
      778     assign                                                        /* first line of header                                         */
      779       modeIndicator:screen-value =
      780         replace(
      781           trim( substitute( "&1 &2 &3 &4 &5 &6 &7 &8 &9",
      782             trim( pt_shortname /* + " " + connectMode */ ),
      783             sampleMode,
      784             entry( rawMode, "Initial,Previous,Raw,Cumulative,Interval" ),
      785             entry( timeMode, "Summary,Rate" ),
      786             rt,
      787             dsRows,       /*** @@@ ***/
      788             dsSize,
      789             trim( string( fetchTime / 1000, ">>>9.999" )),
      790             ( if logMode then "Log=On" else "" )
      791           )),
      792           "  ",
      793           " "
      794         )
      795       clockString:screen-value   = string( now )
      796       headerFrame:hidden         = no
      797       headerFrame:visible        = yes
      798     .
      799   
      800           801   *** Encrypted Source ***
      802   *** Encrypted Source ***
      803   *** Encrypted Source ***
      804   *** Encrypted Source ***
      805   *** Encrypted Source ***
      806   *** Encrypted Source ***
      807   *** Encrypted Source ***
      808   *** Encrypted Source ***
      809   *** Encrypted Source ***
      810   *** Encrypted Source ***
      811   *** Encrypted Source ***
      812   *** Encrypted Source ***
      813   *** Encrypted Source ***
      814   *** Encrypted Source ***
      815   *** Encrypted Source ***
      816   *** Encrypted Source ***
      817   *** Encrypted Source ***
      818   *** Encrypted Source ***
      819   *** Encrypted Source ***
      820   *** Encrypted Source ***
      821   *** Encrypted Source ***
      822    
      823   
      824     result = "".
      825   
      826     return.
      827   
      828   end.
      829   
      830   
      831   procedure dbanalys:
      832   
      833     define variable ok as logical no-undo.
      834   
      835     message
      836       skip(1)
      837       "  Running a dbanalys can be very IO intensive.  You might prefer to run  " skip
      838       "  this utility offline during a quiet period.                            " skip
      839       skip(1)
      840       "  To run it offline use a command similar to:                            " skip
      841       skip(1)
      842       substitute( "  proutil &1 -C dbanalys > dbanalys/&2.dba  ", ldbname(1), ( if pt_shortname <> "" then pt_shortname else ldbname(1) )) skip
      843       skip(1)
      844       "  Ideally you will routinely run a fresh dbanalys at least weekly.       " skip
      845       skip(1)
      846       view-as alert-box question buttons yes-no title " Are You Sure? "
      847       update ok
      848     .
      849   
      850     if ok = yes then run makeRequest ( "xcmd=dba" ).
      851   
      852     return.
      853   
      854   end.
      855   
      856   
      857   procedure statementCache:
      858   
      859     update
      860       skip(1)
      861       '  The client statement cache is a powerful feature that sometimes causes    ' dcolor 6 skip
      862       '  problems. If you are not comfortable with the potential issues, please    ' dcolor 6 skip
      863       '  do not enable it in Production.                                           ' dcolor 6 skip
      864       skip(1)
      865       '  Rather than globally enabling CSC, ProTop can enable or disable the       ' skip
      866       '  client statement cache for specific users by using the "#" command and    ' skip
      867       '  entering a usr#.                                                          ' skip
      868       skip(1)
      869       '  You can also use the menu at PROMON R&D, 1, 18 for fine-grained control   ' skip
      870       '  over individual sessions.                                                 ' skip
      871       skip(1)
      872       '  Global Client Statement Cache status:' CSC format "On/Off" '   On, Off, ? = no change  ' skip
      873       skip(1)
      874      with
      875       frame getCSC
      876       title " Global Client Statement Cache "
      877       row 3
      878       centered
      879       /* width 80 */
      880       no-labels
      881       overlay
      882     .
      883   
      884     hide frame getCSC no-pause.
      885   
      886     if csc = yes then
      887       do:
      888         run makeRequest ( substitute( "xcmd=csc_&1", string( CSC, "on/off" ))).
      889       end.
      890      else if csc = no then
      891       do:
      892         run makeRequest ( substitute( "xcmd=csc_&1", string( CSC, "on/off" ))).
      893       end.
      894   
      895     return.
      896   
      897   end.
      898   
      899   
      900   procedure setRawMode:
      901     run makeRequest ( substitute( "xcmd=raw_&1",  entry( rawMode,  "Initial,Previous,Raw,Cumulative,Interval" ))).
      902     run makeRequest ( substitute( "xcmd=time_&1", entry( timeMode, "Summary,Rate" ))).
      903     return.
      904   end.
      905   
      906   
      907   procedure setRowLimit:
      908     run makeRequest ( substitute( "xcmd=rowLimit+&1", rowLimit )).
      909     return.
      910   end.
      911   
      912   
      913   procedure setSendType:
      914   
      915     define input parameter sendType as character no-undo.
      916   
      917     if lookup( sendType, "XML,JSON" ) > 0 then
      918       run makeRequest ( substitute( "xcmd=sendType+&1", sendType )).
      919   
      920     return.
      921   
      922   end.
      923   
      924   
      925   procedure protopPause:
      926     pause.
      927     return.
      928   end.
      929   
      930   
      931   /* when a programmers is checking a bit of code in isolation it is
      932    * helpful to use this combination of settings
      933    */
      934   
      935   procedure programmerMode:
      936   
      937     if programmerMode = no then
      938       do:
      939         assign
      940           sampleMode = "OnDemand"
      941           rawMode    = 5
      942           timeMode   = 1
      943         .
      944         run makeRequest ( substitute( "xcmd=raw_&1",  "Interval" )).
      945         run makeRequest ( substitute( "xcmd=time_&1", "Summary" )).
      946         programmerMode = yes.
      947       end.
      948      else
      949       do:
      950         assign
      951           sampleMode = "Auto"
      952           rawMode    = 5
      953           timeMode   = 2
      954         .
      955         run makeRequest ( substitute( "xcmd=raw_&1",  "Interval" )).
      956         run makeRequest ( substitute( "xcmd=time_&1", "Rate" )).
      957         programmerMode = no.
      958       end.
      959   
      960     return.
      961   
      962   end.
      963   
      964   
      965   /* use the profiler to help debug internal ProTop performance issues
      966    */
      967   
      968   define variable zprofilerState as logical initial ?.
      969   
      970   procedure zprofiler:
      971   
      972     /*** message "Profiler state:" zprofilerState. ***/
      973   
      974     if zprofilerState = yes then                          /* the profiler is already running                              */
      975       do:
      976   
      977         run zprofiler_off.                                /* flip the state of the profiler to "off"                      */
      978         zprofilerState = no.
      979   
      980         run zprofiler_load.                               /* load profiler data into temp-tables to analyze               */
      981         run zprofiler_proc.                               /* process the data                                             */
      982         run zprofiler_topx( no ).                         /* report on the top 20 execution time lines -- to file         */
      983         run zprofiler_topx( yes ).                        /* report on the top 20 execution time lines -- to TTY          */
      984   
      985         message zprofilerState "run zprofiler_off".
      986   
      987         return.                                           /* do not continue after this -- return                         */
      988   
      989       end.
      990   
      991     if zprofilerState = ? then                            /* we need to launch the profiler                               */
      992       do:
      993         run lib/zprofiler.p persistent (                  /* launch the PP                                                */
      994           "protop3",                                      /* output file basename                                         */
      995           "ProTop3 Execution Profile"                     /* description                                                  */
      996         ).
      997       end.
      998   
      999     zprofilerState = no.                                  /* default to no                                                */
     1000   
     1001     message
     1002       color value( "red" )
     1003       skip(1)
     1004       "  The Profiler capability is used to track down performance issues   " skip
     1005       "  within the ProTop client.  It is very unusual for an end-user to   " skip
     1006       "  need to run this for that purpose.                                 " skip
     1007       skip(1)
     1008       "  Aside from debugging ProTop this code is also a useful example of  " skip
     1009       "  emebdding the profiler within an application.  The source can be   " skip
     1010       "  found in lib/zprof*.p                                              " skip
     1011       skip(1)
     1012       "  It is fine to run this code in order to get a feel for how useful  " skip
     1013       "  embedded profiling can be (IMHO it is *VERY* useful).              " skip
     1014       skip(1)
     1015       "  But be aware that profiling can very quickly create very large     " skip
     1016       "  temp files (gigabytes in minutes) so do not run this just for      " skip
     1017       "  giggles and do not leave it running unattended.                    " skip
     1018       skip(1)
     1019       view-as alert-box question buttons yes-no title " Are You Sure? "
     1020       update zprofilerState
     1021     .
     1022   
     1023     if zprofilerState = yes then
     1024       do:
     1025   
     1026         run zprofiler_on.
     1027   
     1028         message
     1029           color value( "red" )
     1030           skip(1)
     1031           '  The Profiler is now enabled.  Press "y"  ' skip    
     1032           '  when you are ready to view the results.  ' skip   
     1033           skip(1)
     1034           view-as alert-box title " Profiler Enabled "
     1035         .
     1036   
     1037       end.
     1038   
     1039     return.
     1040   
     1041   end.
     1042   
     1043   
     1044   /* the contents of the CASE statement could probably be managed dynamically
     1045    * by adding the keystroke mapping to the viewer/browser initialization
     1046    *
     1047    * that could also be used to build the help screen contents
     1048    *
     1049    */
     1050   
     1051   procedure command:
     1052   
     1053     define input parameter c as character no-undo case-sensitive.
     1054   
     1055     define variable k as character no-undo.
     1056   
     1057     case c:
     1058   
     1059       when "e" then publish "protop_show" ( "appActivity" ).              /* aka appmon                                   */
     1060       when "j" then publish "protop_show" ( "pasoe" ).
     1061   
     1062       when "c" then publish "protop_show" ( "configuration" ).
     1063       when "d" then publish "protop_show" ( "dashboard" ).
     1064       when "U" then publish "protop_show" ( "userinfo" ).
     1065       when "O" then publish "protop_show" ( "osinfo" ).
     1066   
     1067       when "l" then publish "protop_show" ( "latches" ).
     1068   
     1069       when "r" then publish "protop_show" ( "replagent" ).
     1070   
     1071       when "u" then publish "protop_show" ( "userio" ).
     1072       when "t" then publish "protop_show" ( "tblact" ).
     1073       when "i" then publish "protop_show" ( "idxact" ).
     1074       when "/" then publish "protop_show" ( "seqact" ).
     1075       when "a" then publish "protop_show" ( "areas" ).
     1076       when "b" then publish "protop_show" ( "blocked" ).
     1077       when "s" then publish "protop_show" ( "serveract" ).
     1078       when "x" then publish "protop_show" ( "activetrx" ).
     1079       when "f" then publish "protop_show" ( "fileio" ).
     1080       when "k" then publish "protop_show" ( "chkpt" ).
     1081       when "m" then publish "protop_show" ( "tenantinfo" ).
     1082       when "w" then publish "protop_show" ( "who" ).
     1083       when "Q" then publish "protop_show" ( "sql" ).
     1084   
     1085       when "B" then publish "protop_show" ( "bigb" ).
     1086   
     1087   /*  when "T" then publish "protop_show" ( "txe" ).  */                  /* obsolete - now part of latches & resources   */
     1088       when "T" then publish "protop_showRangeData".
     1089   
     1090       when "L" then publish "protop_show" ( "BrokerConfig" ).
     1091       when "M" then run protopMail.
     1092   
     1093       when "2" then publish "protop_show" ( "b2" ).                       /* also control-b                               */
     1094   
     1095       when "3" then run util/serverrpt.p.                                 /* move to control-s ? probably a bad idea      */
     1096   
     1097       when "6" then publish "protop_getUserTblName" ( input-output userTblName, input-output userTblNum ).
     1098       when "7" then publish "protop_getUserIdxName" ( input-output userIdxName, input-output userIdxNum ).
     1099   
     1100       when "8" then publish "protop_show" ( "usersoftbl" ).
     1101       when "9" then publish "protop_show" ( "usersofidx" ).
     1102   
     1103       when "@" then publish "protop_show" ( "apsvstat" ).
     1104       when "&" then publish "protop_properties".
     1105   
     1106       when "C" then publish "protop_clearCSC".
     1107   
     1108       when "D" then publish "protop_show" ( "df" ).
     1109       when "N" then publish "protop_show" ( "netstat" ).
     1110   
     1111       when "I" then publish "protop_getMonInt"  ( input-output monInt ).
     1112       when "#" then publish "protop_getUserNum" ( input-output userNum, input-output userPID ).
     1113       when "P" then publish "protop_getUserPID" ( input-output userPID, input-output userNum ).
     1114   
     1115       when "R" then
     1116         do:
     1117           publish "protop_getRawMode" ( input-output rawMode, input-output timeMode ).
     1118           publish "protop_setRawMode".
     1119         end.
     1120   
     1121       when "S" then publish "protop_setSampleMode".
     1122   
     1123   /*
     1124    *  when "X" then
     1125    *    do:
     1126    *      define variable sendType as character no-undo.
     1127    *      publish "protop_getSendType" ( input-output sendType ).
     1128    *      publish "protop_setSendType" ( sendType ).
     1129    *    end.
     1130    */
     1131   
     1132       when "y" then run zprofiler.
     1133       when "Y" then run lib/showustats.p.
     1134   
     1135       when "z" then run protopSort.
     1136   
     1137       when "Z" then
     1138         do:
     1139           publish "protop_getRowLimit" ( input-output rowLimit ).
     1140           publish "protop_setRowLimit".
     1141         end.
     1142   
     1143       when "^" then
     1144         do:
     1145           publish "protop_getLockLimit" ( input-output pt_lktbllim ).
     1146         end.
     1147   
     1148       when "*" then publish "protop_statementCache".
     1149       when "A" then publish "protop_dbanalys".
     1150   
     1151       when "p" then run protopPause.
     1152   
     1153       when " " then
     1154         do:
     1155           /* if sampleMode = "Auto" then publish "protop_refresh". */
     1156         end.
     1157   
     1158       when "h" or when "H" or when "?" then
     1159         do:
     1160           publish "protop_help".
     1161           k = keylabel( lastkey ).
     1162           if k <> "h" and k <> "?" then run command( k ).
     1163         end.
     1164   
     1165       when "q" then publish "protop_quit".
     1166   
     1167            1168   *** Encrypted Source ***
     1169   *** Encrypted Source ***
     1170   *** Encrypted Source ***
     1171   *** Encrypted Source ***
     1172   *** Encrypted Source ***
     1173   *** Encrypted Source ***
     1174   *** Encrypted Source ***
     1175   *** Encrypted Source ***
     1176   *** Encrypted Source ***
     1177   *** Encrypted Source ***
     1178   *** Encrypted Source ***
     1179   *** Encrypted Source ***
     1180   *** Encrypted Source ***
     1181   *** Encrypted Source ***
     1182   *** Encrypted Source ***
     1183   *** Encrypted Source ***
     1184   *** Encrypted Source ***
     1185   *** Encrypted Source ***
     1186   *** Encrypted Source ***
     1187    
     1188   
     1189     end.
     1190   
     1191     return.
     1192   
     1193   end.
     1194   
     1195   
     1196   on ctrl-a of nothing in frame notHere do:
     1197     something = something + "^a".
     1198     publish "protop_show" ( "aiinfo" ).
     1199     return.
     1200   end.
     1201   
     1202   on ctrl-b of nothing in frame notHere do:
     1203     something = something + "^b".
     1204     publish "protop_show" ( "b2" ).
     1205     return.
     1206   end.
     1207   
     1208   on ctrl-d of nothing in frame notHere do:
     1209     something = something + "^d".
     1210     publish "dump_load".
     1211     return.
     1212   end.
     1213   
     1214   on ctrl-l of nothing in frame notHere do:
     1215     something = something + "^l".
     1216     run lib/clife.p.
     1217     return.
     1218   end.
     1219   
     1220   on ctrl-p of nothing in frame notHere do:
     1221     something = something + "^p".
     1222     run programmerMode.
     1223     return.
     1224   end.
     1225   
     1226   on ctrl-r of nothing in frame notHere do:
     1227     something = something + "^r".
     1228     publish "dba_report".
     1229     return. /* no-apply. */
     1230   end.
     1231   
     1232   on ctrl-t of nothing in frame notHere do:
     1233     something = something + "^t".
     1234     if os-getenv( "TTDEBUG" ) = "yes" then
     1235       publish "protop_showTT".
     1236      else
     1237       do:
     1238         message
     1239           skip(1)
     1240           '  Temp table statistics require OpenEdge 11 or higher  ' skip
     1241           '  and must be enabled by setting:                      ' skip
     1242           skip(1)
     1243           '        export TTDEBUG=yes                             ' skip
     1244           skip(1)
     1245           '  in $PROTOP/bin/localenv                              ' skip
     1246           skip(1)
     1247           '  You must also uncomment the -tt* parameters in       ' skip
     1248           '  etc/protop.pf:                                       ' skip
     1249           skip(1)
     1250           '      -ttbaseindex 1                                   ' skip
     1251           '      -ttbasetable 1                                   ' skip
     1252           '      -ttindexrangesize 1000                           ' skip
     1253           '      -tttablerangesize 1000                           ' skip
     1254           skip(1)
     1255          view-as alert-box
     1256         .
     1257       end.
     1258     return.
     1259   end.
     1260   
     1261   on ctrl-u of nothing in frame notHere do:
     1262     something = something + "^u".
     1263     run util/genupdsql.p.
     1264     return.
     1265   end.
     1266   
     1267   on DELETE-WORD OF nothing in frame notHere do:
     1268     something = something + "esc-d".
     1269     publish "getDbgMode".
     1270     return.
     1271   end.
     1272   
     1273   *** Encrypted Source ***
     1274   *** Encrypted Source ***
     1275   *** Encrypted Source ***
     1276   *** Encrypted Source ***
     1277   *** Encrypted Source ***
     1278   *** Encrypted Source ***
     1279   *** Encrypted Source ***
     1280   *** Encrypted Source ***
     1281   *** Encrypted Source ***
     1282   *** Encrypted Source ***
     1283   *** Encrypted Source ***
     1284   *** Encrypted Source ***
     1285   *** Encrypted Source ***
     1286   *** Encrypted Source ***
     1287   *** Encrypted Source ***
     1288   *** Encrypted Source ***
     1289   *** Encrypted Source ***
     1290   *** Encrypted Source ***
     1291   *** Encrypted Source ***
     1292   *** Encrypted Source ***
     1293   *** Encrypted Source ***
     1294   *** Encrypted Source ***
     1295   *** Encrypted Source ***
     1296   *** Encrypted Source ***
     1297   *** Encrypted Source ***
     1298   *** Encrypted Source ***
     1299   *** Encrypted Source ***
     1300   *** Encrypted Source ***
     1301   *** Encrypted Source ***
     1302   *** Encrypted Source ***
     1303   *** Encrypted Source ***
     1304   *** Encrypted Source ***
     1305   *** Encrypted Source ***
     1306   *** Encrypted Source ***
     1307    
     1308   
     1309   
     1310   /* initialization
     1311    *
     1312    */
     1313   
     1314   if connected( "dictdb" ) then
     1315     ptStartup = "dashboard,tblact,idxact,userio".                         /* dynamic browses don't come to ChUI until 10.1C       */
     1316    else
     1317     ptStartup = "".
     1318   
     1319   if num-entries( session:parameter, "|" ) >= 1 then pt_shortname = entry( 1, session:parameter, "|" ).
     1320   if num-entries( session:parameter, "|" ) >= 2 then ptStartup    = entry( 2, session:parameter, "|" ).
     1321   
     1322   if num-entries( session:parameter, "|" ) >= 3 then ptParams     = entry( 3, session:parameter, "|" ).   /* currently unused     */
     1323   if num-entries( session:parameter, "|" ) >= 4 then ptCnxStr     = entry( 4, session:parameter, "|" ).   /* currently unused     */
     1324   
     1325   if "TTY" <> "tty" then                                     /* look reasonable if someone fires up prowin32         */
     1326     assign
     1327       current-window:hidden       = true
     1328       session:v6display           = true
     1329       current-window:height-chars = 60
     1330       current-window:width-chars  = 160
     1331       current-window:bgcolor      = 15
     1332       current-window:hidden       = false
     1333       current-window:visible      = true
     1334     .
     1335   
     1336   /* current-window:message-area = no.                                    /* no such luck :(                                      */
     1337    * current-window:status-area  = no.
     1338    */
     1339   
     1340   run lib/chkscreen.p.                                                    /* is the screen big enough?                            */
     1341   
     1342   connectMode = "Direct".
     1343   
     1344   subscribe to "logMsg"                anywhere run-procedure "logMsg".
     1345   subscribe to "protop_quit"           anywhere run-procedure "quitme".
     1346   subscribe to "protop_command"        anywhere run-procedure "command".
     1347   subscribe to "protop_refresh"        anywhere run-procedure "refresh".
     1348   subscribe to "protop_register"       anywhere run-procedure "register".
     1349   subscribe to "protop_setRawMode"     anywhere run-procedure "setRawMode".
     1350   subscribe to "protop_setRowLimit"    anywhere run-procedure "setRowLimit".
     1351   subscribe to "protop_setSendType"    anywhere run-procedure "setSendType".
     1352   subscribe to "protop_setSampleMode"  anywhere run-procedure "setSampleMode".
     1353   subscribe to "protop_userinfo2"      anywhere run-procedure "userInfo2".
     1354   subscribe to "protop_statementCache" anywhere run-procedure "statementCache".
     1355   subscribe to "protop_dbanalys"       anywhere run-procedure "dbanalys".
     1356   
     1357   run lib/ptheader.p ( input-output headerFrame, input-output modeIndicator, input-output protopVersion, input-output clockString ).
     1358   
     1359   if fast-start then pause 0 before-hide.                                 /* set fast-start = no to preserve startup messages     */
     1360   
     1361   message "Starting ProTop...".
     1362   
     1363   run lib/protoplib.p  persistent.                                        /* load protop infrastructure library                   */
     1364   
     1365   if connected( "dictdb" ) then                                           /* needs to be loaded prior to protop-cfg because       */
     1366     do:                                                                   /* isReplTarget() is potentially called by setptname    */
     1367       message "Loading vstlib...".
     1368       run lib/vstlib.p persistent.                                        /* load vst function library                            */
     1369     end.
     1370   
     1371   run lib/protop-cfg.p persistent.                                        /* initialize protop environment                        */
     1372   
     1373   file-info:file-name = pt_tmpdir.                                        /* make certain that we have a temp directory!          */
     1374   if file-info:full-pathname = ? then
     1375     os-command silent value( "mkdir " + pt_tmpdir ).
     1376   
     1377   file-info:file-name = pt_logdir.                                        /* make certain that we have a log directory!           */
     1378   if file-info:full-pathname = ? then
     1379     os-command silent value( "mkdir " + pt_logdir ).
     1380   
     1381   /* chkDbgMode() is in lib/protoplib.p
     1382    */
     1383   
     1384   dbgFileName = substitute( "&1/&2.&3.&4", pt_tmpdir, monName, ( if pt_shortname <> "" then pt_shortname else ldbname(1)), "dbg" ).
     1385   run chkDbgMode( dbgFileName, input-output dbgMode ).
     1386   
     1387   if connected( "dictdb" ) then
     1388     do:
     1389   
     1390       run lib/ptsetvardb.p persistent.                                    /* set variables that affect behavior and need a cnx    */
     1391   
     1392       message "Checking table and index ranges...".
     1393       run lib/xrange.p persistent.
     1394   
     1395       message "Initializing _userTable and _userIndex stats...".
     1396       run lib/usertablestats.p persistent.                                /* some additional useful debugging support             */
     1397   
     1398     end.
     1399   
     1400   /*** temporary !!! *** use only if "sports" is connected!!!
     1401    ***
     1402    *** this is just to generate some usertablestats for illustration purposes 
     1403    ***
     1404    ***
     1405   
     1406   define variable j as integer no-undo.
     1407   
     1408   do while true:
     1409   
     1410     case random( 1, 9 ):
     1411       when   1 then for each dictdb.Invoice       no-lock: end.
     1412       when   2 then for each dictdb.Customer      no-lock: end.
     1413       when   3 then for each dictdb.Item          no-lock: end.
     1414       when   4 then for each dictdb.Order         no-lock: end.
     1415       when   5 then for each dictdb.Order-Line    no-lock: end.
     1416       when   6 then for each dictdb.Salesrep      no-lock: end.
     1417       when   7 then for each dictdb.State         no-lock: end.
     1418       when   8 then for each dictdb.Local-Default no-lock: end.
     1419       when   9 then for each dictdb.Ref-Call      no-lock: end.
     1420     end.
     1421   
     1422     j = j + 1.
     1423     if j > 20 then leave.
     1424   
     1425   end.
     1426   
     1427    ***
     1428    ***
     1429    *** ^^^^^^^^^^^^^ ***/
     1430   
     1431   
     1432   if "TTY" = "tty" then
     1433     run lib/ptsplash.p.
     1434    else
     1435     .                                                                     /* we should do something with the fancy logo!          */
     1436   
     1437   if connected( "dictdb" ) then run lib/chkcs.p.
     1438   
     1439   if os-getenv( "TTDEBUG" ) = "yes" then
     1440     run lib/ttinfo.p persistent.                                          /* some useful debugging support                        */
     1441   
     1442   run ssg/sausage42.p persistent.
     1443   
     1444   *** Encrypted Source ***
     1445   *** Encrypted Source ***
     1446   *** Encrypted Source ***
     1447   *** Encrypted Source ***
     1448   *** Encrypted Source ***
     1449   *** Encrypted Source ***
     1450   *** Encrypted Source ***
     1451   *** Encrypted Source ***
     1452   *** Encrypted Source ***
     1453   *** Encrypted Source ***
     1454   *** Encrypted Source ***
     1455   *** Encrypted Source ***
     1456   *** Encrypted Source ***
     1457   *** Encrypted Source ***
     1458   *** Encrypted Source ***
     1459   *** Encrypted Source ***
     1460   *** Encrypted Source ***
     1461   *** Encrypted Source ***
     1462   *** Encrypted Source ***
     1463   *** Encrypted Source ***
     1464   *** Encrypted Source ***
     1465   *** Encrypted Source ***
     1466   *** Encrypted Source ***
     1467    
     1468   
     1469   run lib/mailx.p     persistent.                                         /* handle mail                                          */
     1470   run lib/ptsetvar.p  persistent.                                         /* set variables that affect protop.p behavior          */
     1471   run lib/pthelp.p    persistent.                                         /* the help screen                                      */
     1472   run lib/ptprops.p   persistent.                                         /* properties controlled by environment variables       */
     1473   
     1474   run ssg/sausage02.p persistent.
     1475   
     1476   publish "protop_checkRangeData".
     1477   
     1478   message "Configuring UI...".
     1479   
     1480   run lib/dynscreen.p persistent.                                         /* dynamic screen painting routines                     */
     1481   
     1482   message "Launching data collectors...".
     1483   
     1484   if connectMode = "direct" then
     1485     do:
     1486       run lib/ptsrv.p persistent.                                         /* launch data collectors in the srv directory          */
     1487       run initProTopServer( "direct", "", "" ).                           /* no arguments needed for direct connections           */
     1488     end.
     1489   
     1490   if dbgMode >= 3 then
     1491     message "Refresh data collectors...".
     1492   
     1493   run refresh.            /*** this is a cheat -- it causes the data collectors to be instantiated which has the side-effect      ***/
     1494                           /*** of regenerating the .xsd files that are needed to configure the viewers & browsers.  in this       ***/
     1495                           /*** way they xsd is always current and up to date for direct connections.                              ***/
     1496                           /*** for indirect connections the .xsd still has to be distributed to the client as part of a           ***/
     1497                           /*** release.                                                                                           ***/
     1498   
     1499   if dbgMode >= 3 then
     1500     message "Setting up data collector UI...".
     1501   
     1502   run getConfig( "tt_protop.xml", output result ).
     1503   
     1504   buffer tt_protop:read-xml( "longchar", result, ?, ?, ? ).
     1505   result = "".
     1506   
     1507   /* create the UI objects for each data collector
     1508    */
     1509   
     1510   for each tt_protop by tt_protop.order:
     1511     if dbgMode >= 3 then message "creating:" order evtName scrTitle dcName ttName.
     1512     run value( substitute( "lib/&1.p", scrType )) persistent ( tt_protop.order, evtName, scrTitle, dcName, ttName, minRows, maxRows ).
     1513     if dbgMode >= 3 then message "created:" evtName ttName.
     1514   end.
     1515   
     1516   /* ok, we're ready for business!
     1517    */
     1518   
     1519   if dbgMode >= 3 then
     1520     message "Initializing header...".
     1521   
     1522   publish "protop_dbid".                                                  /* line #2 of the header - dbId data collector          */
     1523   
     1524   if index( ptStartup, "dbid" ) <= 0 then ptStartup = "dbId," + ptStartup.
     1525   ptStartup = right-trim( ptStartup, "," ).
     1526   
     1527   do i = 1 to num-entries( ptStartup ):
     1528     publish "protop_show" ( entry( i, ptStartup )).                       /* startup with the specified data collectors           */
     1529   end.
     1530   
     1531   lastRefresh = now.
     1532   publish "protop_refresh".
     1533   
     1534   if dbgMode >= 3 then
     1535     message "Ready to start...".
     1536   
     1537   if fast-start = no or dbgMode >= 3 then                                 /* set fast-start = no to preserve startup messages     */
     1538     pause.                                                                /* slow start, pause to read startup messages           */
     1539   
     1540   hide message no-pause.
     1541   
     1542   
     1543   /* main block
     1544    *
     1545    */
     1546   
     1547   define variable keyPressed as logical no-undo.
     1548   
     1549   nothing = "".
     1550   enable nothing with frame notHere.
     1551   
     1552   main_block: do while keepRunning on error undo, retry:
     1553   
     1554     /* PAUSE can take fractions of a second starting with OE11, prior to that 0.5 rounds up to 1
     1555      */
     1556   
     1557     /* wait-for "window-close" of this-procedure pause 0.5. */
     1558   
     1559     /* priority #1 is keystrokes...
     1560      */
     1561   
     1562     keyPressed = no.
     1563   
     1564     /*** if keystrokes mysteriously vanish it is likely that some code somewhere
     1565      *** is doing INPUT FROM or INPUT THROUGH without a STREAM -- track down that
     1566      *** code and add a STREAM
     1567      ***
     1568      ***/
     1569   
     1570     readkey pause tick.                                   /* This works much better than a WAIT-FOR PAUSE N                       */
     1571   
     1572     do while lastkey > 0:                                 /* a key was pressed! execute the appropriate command                   */
     1573       keyPressed  = yes.
     1574       if keyfunction( lastkey ) = "end-error" then
     1575         leave main_block.
     1576       apply lastkey to nothing in frame notHere.
     1577       readkey pause tick.                                 /* keep reading keystrokes                                              */
     1578     end.
     1579   
     1580     if keyPressed then
     1581       do:
     1582         lastRefresh = now.
     1583         publish "protop_refresh".
     1584         next main_block.
     1585       end.
     1586   
     1587     /*
     1588      * if connectMode <> "direct" then                    /* obsolete and no longer supported...                                  */
     1589      *   do:
     1590      *     process events.                                /* maybe a non-readkey event (stomp or http response) has occured?      */
     1591      *     if length( result ) > 0 then
     1592      *       do:
     1593      *         lastRefresh = now.
     1594      *         run paintScreen.
     1595      *         next main_block.
     1596      *       end.
     1597      *   end.
     1598      */
     1599   
     1600     /* timeouts only matter if nothing else happens
     1601      */
     1602   
     1603     if lastkey <= 0 then                                  /* timeout...                                                           */
     1604       do:
     1605         if sampleMode = "Auto" and abs( interval( now, lastRefresh, "seconds" )) >= ( monint - ( if connectMode = "direct" then 0 else 1 )) then
     1606           do:
     1607   
     1608             if pdbname( 1 ) <> ? then
     1609               run checkDBX.                               /* check to see if a new DBAnalys is available                          */
     1610   
     1611             run chkDbgMode( dbgFileName, input-output dbgMode ).
     1612   
     1613             lastRefresh = now.
     1614             publish "protop_refresh".
     1615   
     1616             next main_block.
     1617   
     1618         end.
     1619       end.
     1620   
     1621   end.
     1622   
     1623   end.    /* on stop etc ... */
     1624   
     1625   publish "protop_clearCSC".                              /* if the user set any client statement cache options clear them        */
     1626   
     1627   if program-name( 4 ) = ? then                           /* was protop started via -p?  or called from something else?           */
     1628     quit.                                                 /* do not drop out to the "tram lines"                                  */
     1629    else
     1630     return.                                               /* someone called us so return there                                    */
     1631   
     1632   /* the end */
