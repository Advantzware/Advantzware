        1   /*******************************************************************************
        2    *******************************************************************************
        3    **                                                                           **
        4    **                                                                           **
        5    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
        6    **  http://www.greenfieldtech.com                                            **
        7    **                                                                           **
        8    **  ProTop is free software; you can redistribute it and/or modify it        **
        9    **  under the terms of the GNU General Public License (GPL) as published     **
       10    **  by the Free Software Foundation; either version 2 of the License, or     **
       11    **  at your option) any later version.                                       **
       12    **                                                                           **
       13    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       14    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       15    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       16    **  for more details.                                                        **
       17    **                                                                           **
       18    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       19    **  of use and alternative licensing options for this software.              **
       20    **                                                                           **
       21    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       22    **                                                                           **
       23    **  See http://www.fsf.org for more information about the GPL.               **
       24    **                                                                           **
       25    **                                                                           **
       26    *******************************************************************************
       27    *******************************************************************************
       28    *
       29    * blocked.p
       30    *
       31    *
       32    * Blocked clients.
       33    *
       34    *
       35    * To Do:
       36    *
       37    *      Handle other sorts of blocked clients
       38    *      Ought to break up "blkstr" into it's components
       39    *
       40    *
       41    * Author:
       42    *
       43    *      Tom Bascom, Greenfield Technologies
       44    *      http://www.greenfieldtech.com
       45    *      September 16, 2003
       46    *
       47    */
       48   
       49   
       50   /*******************************************************************************
       51    *******************************************************************************
       52    **                                                                           **
       53    **                                                                           **
       54    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       55    **  http://www.greenfieldtech.com                                            **
       56    **                                                                           **
       57    **  ProTop is free software; you can redistribute it and/or modify it        **
       58    **  under the terms of the GNU General Public License (GPL) as published     **
       59    **  by the Free Software Foundation; either version 2 of the License, or     **
       60    **  at your option) any later version.                                       **
       61    **                                                                           **
       62    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       63    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       64    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       65    **  for more details.                                                        **
       66    **                                                                           **
       67    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       68    **  of use and alternative licensing options for this software.              **
       69    **                                                                           **
       70    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       71    **                                                                           **
       72    **  See http://www.fsf.org for more information about the GPL.               **
       73    **                                                                           **
       74    **                                                                           **
       75    *******************************************************************************
       76    *******************************************************************************
       77    *
       78    * protop.i
       79    *
       80    * Header file for protop family of programs
       81    *
       82    *
       83    * Known Bugs & Issues:
       84    *
       85    *
       86    * To Do:
       87    *
       88    *
       89    * Author:
       90    *
       91    *      Tom Bascom, Greenfield Technologies
       92    *      http://www.greenfieldtech.com
       93    *      August 28, 2003
       94    *
       95    */
       96   
       97   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       98   &global-define  FASTLOCK        true
       99   &ELSE
      100   &global-define  FASTLOCK        false
      101   &ENDIF
      102   
      103   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
      104   &global-define  OE11            "yes"
      105   &global-define  xDEBUGTT        false
      106   &ENDIF
      107   
      108   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
      109   &global-define  NOSERIALIZE     serialize-hidden
      110   &ENDIF
      111   
      112   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
      113   &global-define  BIGINT          int64
      114   &ELSE
      115   &global-define  BIGINT          decimal
      116   &ENDIF
      117   
      118   
      119   /* lib/v9.i
      120    *
      121    */
      122   
      123   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
      124   &global-define  CPYLOB  "no"
      125   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
      126   &global-define  LNGCR   character
      127   &global-define  DTZ     integer
      128   &global-define  BIGINT  decimal
      129   &ELSE
      130   &global-define  OE10    "yes"
      131   &global-define  NOW     now
      132   &global-define  LNGCR   longchar
      133   &global-define  DTZ     datetime-tz
      134   &global-define  BIGINT  int64
      135   &ENDIF
      136    
      137   
      138   /* use extended _connect fields: -client, -cache*
      139    */
      140   
      141   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      142   &global-define  CONNECTX        "yes"
      143   &ELSE
      144   &global-define  CONNECTX        "no"
      145   &ENDIF
      146   
      147   define stream inStrm.
      148   
      149   define new global shared variable dbgMode as integer no-undo initial 1.
      150   
      151   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      152    *
      153    * someday everyone will have OO and I will replace these with a gsv class
      154    * or something of that ilk
      155    *
      156    */
      157   
      158   define new global shared variable pt_shortname   as character no-undo.
      159   define new global shared variable pt_uniqName    as character no-undo.
      160   define new global shared variable pt_server      as character no-undo.
      161   define new global shared variable pt_resrcType   as character no-undo.
      162   
      163   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      164   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      165   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      166   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      167   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      168   
      169   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      170   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      171   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      172   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      173   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      174   define new global shared variable pt_ioFileName  as character no-undo.
      175   define new global shared variable pt_dfCmd       as character no-undo.
      176   
      177   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      178   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      179   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      180   
      181   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      182   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      183   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      184   
      185   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      186   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      187   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      188   
      189   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      190   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      191   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      192   
      193   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      194   
      195   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      196   
      197   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      198   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      199   
      200   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      201    * 
      202    */
      203   
      204   define new global shared variable stime as integer no-undo.                     /* start time                           */
      205   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      206   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      207   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      208   
      209   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      210   
      211                                                                                   /* corresponding to base checkpoint#    */
      212   /** Global Shared Temp Table Definitions
      213    **
      214    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      215    ** And a shared temp-table is logically the same as a db table so who really cares?
      216    **
      217    **/
      218   
      219   /* cache _File and _Index records so that we don't keep hitting the db to translate
      220    */
      221   
      222   define new global shared temp-table tt_tbl no-undo
      223     field xid      as integer                                             /* _File._File-Num              */
      224     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      225     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      226     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      227     field tblname  as character                                           /* _File._File-Name             */
      228     index xid-idx is unique primary xid.
      229   
      230   define new global shared temp-table tt_idx no-undo
      231     field xid      as integer                                             /* _Index._Idx-Num              */
      232     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      233     field idxname  as character                                           /* _Index._Idx-Name             */
      234     field idxnote  as character
      235     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      236     field tblnum   as integer                                             /* _File._File-Num              */
      237     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      238     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      239     field tblname  as character                                           /* _File._File-Name             */
      240     index xid-idx is unique primary xid.
      241   
      242   define new global shared temp-table tt_areaExtent no-undo
      243     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      244     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      245   
      246     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      247     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      248     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      249   
      250     index ae-idx is unique primary areaNum extNum.
      251   
      252   define new global shared temp-table tt_area no-undo
      253     field xid      as integer    format ">>>9"
      254     field SANum    as integer    format ">>>9"        label "#"
      255     field areaPool as character  format "x(2)"        label "BX"
      256   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      257     field SAName   as character  format "x(30)"       label "Area Name"
      258     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      259     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      260     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      261     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      262     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      263     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      264     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      265   
      266     field blkszkb as integer     format ">>9"         label "BSZ"
      267     field rpb     as integer     format ">>9"         label "RPB"
      268     field clstrsz as integer     format ">>9"         label "CSZ"
      269   
      270     field numTbls as integer     format ">>>>9"       label "#Tbls"
      271     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      272     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      273   
      274     field numExts as integer     format ">>>>9"       label "#Exts"
      275     field hasVar  as logical     format "Yes/No"      label "Var?"
      276   
      277     field xnote   as character   format "x"           label "*"
      278   
      279     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      280     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      281   
      282     index pctAlloc-idx is primary pctAlloc descending
      283     index pctLastX-idx pctLastX pctAlloc descending
      284     index allocGB-idx allocGB descending
      285     index totGB-idx totGB descending
      286     index xid-idx is unique xid
      287     index SANum-idx is unique SANum
      288     index SAName-idx is unique SAName
      289   .
      290   
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319   *** Encrypted Source ***
      320   *** Encrypted Source ***
      321   *** Encrypted Source ***
      322   *** Encrypted Source ***
      323   *** Encrypted Source ***
      324   *** Encrypted Source ***
      325   *** Encrypted Source ***
      326   *** Encrypted Source ***
      327   *** Encrypted Source ***
      328   *** Encrypted Source ***
      329   *** Encrypted Source ***
      330   *** Encrypted Source ***
      331   *** Encrypted Source ***
      332   *** Encrypted Source ***
      333   *** Encrypted Source ***
      334   *** Encrypted Source ***
      335   *** Encrypted Source ***
      336   *** Encrypted Source ***
      337   *** Encrypted Source ***
      338   *** Encrypted Source ***
      339   *** Encrypted Source ***
      340   *** Encrypted Source ***
      341   *** Encrypted Source ***
      342   *** Encrypted Source ***
      343   *** Encrypted Source ***
      344   *** Encrypted Source ***
      345   *** Encrypted Source ***
      346   *** Encrypted Source ***
      347   *** Encrypted Source ***
      348   *** Encrypted Source ***
      349   *** Encrypted Source ***
      350   *** Encrypted Source ***
      351   *** Encrypted Source ***
      352   *** Encrypted Source ***
      353   *** Encrypted Source ***
      354   *** Encrypted Source ***
      355   *** Encrypted Source ***
      356   *** Encrypted Source ***
      357   *** Encrypted Source ***
      358   *** Encrypted Source ***
      359   *** Encrypted Source ***
      360   *** Encrypted Source ***
      361    
      362   
      363   /*******************************************************************************
      364    *******************************************************************************
      365    **                                                                           **
      366    **                                                                           **
      367    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      368    **  http://www.greenfieldtech.com                                            **
      369    **                                                                           **
      370    **  ProTop is free software; you can redistribute it and/or modify it        **
      371    **  under the terms of the GNU General Public License (GPL) as published     **
      372    **  by the Free Software Foundation; either version 2 of the License, or     **
      373    **  at your option) any later version.                                       **
      374    **                                                                           **
      375    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      376    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      377    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      378    **  for more details.                                                        **
      379    **                                                                           **
      380    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      381    **  of use and alternative licensing options for this software.              **
      382    **                                                                           **
      383    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      384    **                                                                           **
      385    **  See http://www.fsf.org for more information about the GPL.               **
      386    **                                                                           **
      387    **                                                                           **
      388    *******************************************************************************
      389    *******************************************************************************
      390    *
      391    * protoplib.i
      392    *
      393    * ProTop infrastructure library definitions
      394    *
      395    */
      396   
      397   function uDateTime returns integer () in super.
      398   function string2uDateTime returns integer( input p_text as character ) in super.
      399   function searchDir returns character ( input xDir as character ) in super.
      400   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      401   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      402   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      403   function myPID returns character () in super.
      404   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      405   
      406   /* end protoplib.i */
      407    
      408   
      409   /*******************************************************************************
      410    *******************************************************************************
      411    **                                                                           **
      412    **                                                                           **
      413    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      414    **  http://www.greenfieldtech.com                                            **
      415    **                                                                           **
      416    **  ProTop is free software; you can redistribute it and/or modify it        **
      417    **  under the terms of the GNU General Public License (GPL) as published     **
      418    **  by the Free Software Foundation; either version 2 of the License, or     **
      419    **  at your option) any later version.                                       **
      420    **                                                                           **
      421    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      422    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      423    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      424    **  for more details.                                                        **
      425    **                                                                           **
      426    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      427    **  of use and alternative licensing options for this software.              **
      428    **                                                                           **
      429    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      430    **                                                                           **
      431    **  See http://www.fsf.org for more information about the GPL.               **
      432    **                                                                           **
      433    **                                                                           **
      434    *******************************************************************************
      435    *******************************************************************************
      436    *
      437    * vstlib.i
      438    *
      439    * VST library definitions
      440    *
      441    */
      442   
      443   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      444   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      445   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      446   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      447   
      448   function connectFlags returns character ( input cnxId as integer ) in super.
      449   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      450   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      451   
      452   function isAIEnabled returns logical () in super.
      453   function isReplSource returns logical () in super.
      454   function isReplTarget returns logical () in super.
      455   function isBackupRunning returns logical () in super.
      456   function isWorkgroup returns logical () in super.
      457   
      458   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      459   
      460   /* end vstlib.i */
      461    
      462   
      463   function add2ds returns logical ( input h as handle ) in super.
      464   function getTempTableHandle returns handle ( input n as character ) in super.
      465   
      466   /* end protop.i */
      467    
      468   
      469   define output parameter dcDescription as character no-undo initial "Blocked".
      470   
      471   &IF DEFINED( OE11 ) &THEN
      472     &GLOBAL-DEFINE NWIDTH 74
      473   &ELSE
      474     &GLOBAL-DEFINE NWIDTH 87
      475   &ENDIF
      476   
      477   define temp-table tt_blocked no-undo
      478     field xid       as integer
      479     field xvalid    as logical
      480     field usrnum    as integer   format ">>>>9"     label "Usr"
      481   &IF DEFINED( OE11 ) &THEN
      482     field tId       as integer   format "->>>>9"    label "Tenant"
      483   &ENDIF
      484     field userName  as character format "x(15)"     label "Name"
      485     field userPID   as character format "x(8)"      label "PID"
      486     field userFlags as character format "x(5)"      label "Flags"
      487     field blkDura   as character format "x(8)"      label "Duration"
      488     field blkWait   as character format "x(8)"      label "Wait"
      489     field blkResrc  as character format "x(12)"     label "Resrc Id"
      490     field blkNote   as character format "x(74)" label /* "Note" */ "Table Blocker-Usr#:Device:PID Blocker-StatementCache WaitList"
      491     field blkBy     as integer   format ">>>>9"     label "BlkBy"      serialize-hidden
      492     field xtime     as integer   format ">>>>>>>>9" label "Blkd Since" serialize-hidden
      493     field ztime     as integer   format ">>>>>>>>9" label "Duration"   serialize-hidden
      494   
      495     index ztime-idx   ztime
      496     index xid-idx     is unique xid
      497     index usrnum-idx  is unique usrnum
      498     index blkDura-idx is primary blkDura descending
      499   
      500   &IF DEFINED( OE11 ) &THEN
      501     index tId-idx   tId
      502   &ENDIF
      503   
      504   .
      505   
      506   
      507   /* lib/dumpTT.i
      508    *
      509    * simplified to a single line -- include should be eliminated.
      510    *
      511    */
      512   
      513   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 &THEN
      514   /*** +++
      515   file-info:file-name = "./ptdefs".
      516   if file-info:full-pathname <> ? and index( file-info:file-type, "d" ) > 0 and index( file-info:file-type, "w" ) > 0 then
      517     do:
      518   
      519       file-info:file-name = "./ptdefs/{1}.xsd".
      520   
      521       if true /* file-info:full-pathname = ? or file-info:file-size = 0 */ then
      522         do:
      523   
      524           temp-table {1}:write-xmlschema(
      525             "file",
      526   /*        substitute( "ptdefs/&1.xsd", "{1}" ), */
      527   /*        "./ptdefs/{1}.xsd", */
      528             ( if opsys = "unix" then "./ptdefs/{1}.xsd" else ".~\ptdefs~\{1}.xsd" ),
      529             true
      530   
      531         &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2
      532         &THEN
      533             , ?, ?, ?
      534         &ENDIF
      535   
      536       ).
      537   
      538       end.
      539   
      540     end.
      541    +++ ***/
      542   &ENDIF
      543    
      544   
      545   define temp-table tt_blocker no-undo
      546     field xid      as integer
      547     field xvalid   as logical
      548     field stackNum as integer   format ">>>>>>>9"  label "Depth"
      549     field lineNum  as integer   format ">>>>>>>9"  label "Line#"
      550     field procName as character format "x(137)"    label "Procedure"
      551     index stackNum-idx is primary /* usrNum */ stackNum ascending
      552     index xid-idx     is unique xid
      553   .
      554   
      555   
      556   /* lib/dumpTT.i
      557    *
      558    * simplified to a single line -- include should be eliminated.
      559    *
      560    */
      561   
      562   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 &THEN
      563   /*** +++
      564   file-info:file-name = "./ptdefs".
      565   if file-info:full-pathname <> ? and index( file-info:file-type, "d" ) > 0 and index( file-info:file-type, "w" ) > 0 then
      566     do:
      567   
      568       file-info:file-name = "./ptdefs/{1}.xsd".
      569   
      570       if true /* file-info:full-pathname = ? or file-info:file-size = 0 */ then
      571         do:
      572   
      573           temp-table {1}:write-xmlschema(
      574             "file",
      575   /*        substitute( "ptdefs/&1.xsd", "{1}" ), */
      576   /*        "./ptdefs/{1}.xsd", */
      577             ( if opsys = "unix" then "./ptdefs/{1}.xsd" else ".~\ptdefs~\{1}.xsd" ),
      578             true
      579   
      580         &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2
      581         &THEN
      582             , ?, ?, ?
      583         &ENDIF
      584   
      585       ).
      586   
      587       end.
      588   
      589     end.
      590    +++ ***/
      591   &ENDIF
      592    
      593   
      594   define temp-table tt_blocker_Info no-undo
      595     field infoString as character
      596     index infoString-idx is primary unique infoString
      597   .
      598   
      599   
      600   /* lib/dumpTT.i
      601    *
      602    * simplified to a single line -- include should be eliminated.
      603    *
      604    */
      605   
      606   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 &THEN
      607   /*** +++
      608   file-info:file-name = "./ptdefs".
      609   if file-info:full-pathname <> ? and index( file-info:file-type, "d" ) > 0 and index( file-info:file-type, "w" ) > 0 then
      610     do:
      611   
      612       file-info:file-name = "./ptdefs/{1}.xsd".
      613   
      614       if true /* file-info:full-pathname = ? or file-info:file-size = 0 */ then
      615         do:
      616   
      617           temp-table {1}:write-xmlschema(
      618             "file",
      619   /*        substitute( "ptdefs/&1.xsd", "{1}" ), */
      620   /*        "./ptdefs/{1}.xsd", */
      621             ( if opsys = "unix" then "./ptdefs/{1}.xsd" else ".~\ptdefs~\{1}.xsd" ),
      622             true
      623   
      624         &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2
      625         &THEN
      626             , ?, ?, ?
      627         &ENDIF
      628   
      629       ).
      630   
      631       end.
      632   
      633     end.
      634    +++ ***/
      635   &ENDIF
      636    
      637   
      638   define temp-table tt_lock no-undo like _lock
      639     field qflag as logical
      640     index id-idx is unique primary _lock-id
      641     index recid-idx _lock-recid
      642     index usr-idx _lock-usr
      643     index tbl-idx _lock-table
      644   .
      645   
      646   define new global shared variable dbgMode  as integer no-undo initial 1.        /* 1 = errors, 5 = info, 9 = response to file   */
      647   define new global shared variable rowLimit as integer no-undo.
      648   
      649   
      650   function getUserInfo returns character ( usrNum as integer, x as integer ):
      651   
      652     define buffer xConnect for _Connect.
      653   
      654     define variable ci as character no-undo.
      655     define variable cl as integer   no-undo.
      656   
      657     define variable blkInfo    as character no-undo.
      658     define variable xCacheInfo as character no-undo.
      659   
      660     find xConnect no-lock where _Connect-id = usrNum + 1 no-error.
      661   
      662     if available xConnect then
      663       do:
      664         blkInfo = "::".
      665   
      666   &IF "yes" = "yes" &THEN
      667   
      668         ci =  buffer xconnect:handle:buffer-field( "_connect-cacheInfo" ):buffer-value( 1 ) no-error.
      669         cl =  buffer xconnect:handle:buffer-field( "_connect-cacheLineNumber" ):buffer-value( 1 ) no-error.
      670   
      671         blkInfo = substitute( "&1:&2:&3 &4 ", _Connect-usr, _Connect-device, _Connect-PID, cl ).
      672         if ci <> ? then
      673           do:
      674             xCacheInfo = ci.
      675             /* xCacheInfo = entry( num-entries( xCacheInfo, " " ), xCacheInfo, " " ). */
      676             if length( blkInfo + xCacheInfo ) >= x then
      677               xCacheInfo = ">" + substring( xCacheInfo, length( xCacheInfo ) - ( x - length( blkInfo )) + 1 ).
      678             blkInfo = blkInfo + xCacheInfo.
      679           end.
      680   
      681   &ELSE
      682   
      683         blkInfo = substitute( "&1:&2:&3", _Connect-usr, _Connect-device, _Connect-PID ).
      684   
      685   &ENDIF
      686   
      687       end.
      688   
      689     return blkInfo.
      690   
      691   end.
      692   
      693   function snapshotLock returns logical ():
      694   
      695     define variable i       as integer   no-undo.
      696     define variable j       as integer   no-undo.
      697     define variable k       as integer   no-undo.
      698     define variable estart  as integer   no-undo.
      699     define variable lkscan  as integer   no-undo.
      700     define variable foundIt as logical   no-undo.
      701     define variable xline   as character no-undo extent 16.
      702   
      703     empty temp-table tt_Lock.
      704     lkscan = 0.
      705   
      706     find dictdb._DbStatus no-lock.
      707   
      708     if true then
      709       do:
      710   
      711         estart = etime.
      712   
      713   /***
      714         for each dictdb._Lock
      715           while _Lock._Lock-usr <> ?
      716             and _Lock._Lock-recid <> ?
      717             and lkScan < _DbStatus._DbStatus-NumLocks
      718             and lkScan < pt_lktbllim                                      /* user defined limit                                   */
      719             and ( estart - etime ) < 5000:                                /* hard-code for now, but it should be user defined     */
      720    ***/
      721   
      722         /* 11.4+ have a much improved _Lock VST
      723          */
      724   
      725         for each dictdb._Lock where _Lock._Lock-usr <> ? and _Lock._Lock-recid <> ?:
      726   
      727           create tt_lock.
      728           buffer-copy _lock to tt_lock no-error.
      729           if index( _Lock._Lock-flags, "Q" ) > 0 then tt_lock.qflag = yes.
      730           lkscan = lkscan + 1.
      731   
      732           if ( etime - estart ) > 500 and j = 0 and session:batch = no then               /* if the snapshot is fast don't bother the user        */
      733             do:
      734               j = 1.
      735               message now "Making snapshot of _Lock...".
      736             end.
      737   
      738         end.
      739   
      740         if ( dbgMode > 3 or session:batch = no ) and ( /* lkScan >= pt_lktbllim or */ ( etime - estart ) >= 5000 ) then
      741           message now "_Lock scan is too slow, abandonded, scan:" lkScan "  etime:" ( etime - estart ).
      742   
      743       end.
      744      else if _DbStatus._DbStatus-NumLocks < 5000 and session:batch = no then
      745       do:
      746   
      747         if opsys begins "win" then
      748           input stream inStrm through value( "promon " + pdbname( 1 ) + " < etc/promon.dump_locks 2> /nul" ).
      749          else
      750           input stream inStrm through value( "promon " + pdbname( 1 ) + " < etc/promon.dump_locks 2> /dev/null" ).
      751   
      752         repeat:
      753   
      754           xline = "".
      755   
      756           import stream inStrm xline.
      757   
      758           if xline[1] = "" then
      759             next.
      760            else if foundIt = yes and xline[1] = "OpenEdge" and xline[2] = "Monitor" and xline[3] = "Session" and xline[4] = "End." then
      761             leave.
      762   
      763           if j = 1 then   /* oe10 */
      764             do:
      765   
      766               if xline[4] <> "REC" then next.
      767   
      768               i = i + 1.
      769   
      770               create tt_lock.
      771               assign
      772                 tt_lock._lock-id    = i
      773                 tt_lock._lock-usr   = integer( xline[1] )
      774                 tt_lock._lock-recid = int64(   xline[6] )
      775                 tt_lock._lock-table = integer( xline[5] )
      776               .
      777   
      778               do k = 7 to 16:
      779                 if index( xline[k], "Q" ) > 0 then tt_lock.qflag = yes.
      780                 if tt_lock.qflag then leave.
      781               end.
      782   
      783             end.
      784            else if j = 2 then     /* oe11 */
      785             do:
      786   
      787               if xline[5] <> "REC" then next.
      788   
      789               i = i + 1.
      790   
      791               create tt_lock.
      792               assign
      793                 tt_lock._lock-id    = i
      794                 tt_lock._lock-usr   = integer( xline[1] )
      795                 tt_lock._lock-recid = int64(   xline[7] )
      796                 tt_lock._lock-table = integer( entry( 1, xline[6], ":" ))
      797               .
      798   
      799               do k = 8 to 16:
      800                 if index( xline[k], "Q" ) > 0 then tt_lock.qflag = yes.
      801                 if tt_lock.qflag then leave.
      802               end.
      803   
      804             end.
      805   
      806           if       xline[1] = "Usr"     and xline[2] = "Name" then j = 1.
      807            else if xline[1] = "Usr:Ten" and xline[2] = "Name" then j = 2.
      808   
      809         end.
      810   
      811         input stream inStrm close.
      812   
      813       end.
      814   
      815     if false then
      816       do:
      817         output to value( "log/locks.txt" ).
      818         message now i "locks found in promon".
      819         for each tt_lock:
      820           display tt_lock.
      821         end.
      822         output close.
      823       end.
      824   
      825     return true.
      826   
      827   end.
      828   
      829   procedure mon-init:
      830   
      831     empty temp-table tt_blocked.
      832   
      833     return.
      834   
      835   end.
      836   
      837   /* update
      838    *
      839    */
      840   
      841   procedure mon-update:
      842   
      843     define input parameter argList as character no-undo.
      844   
      845     define variable u_name  as character no-undo.
      846     define variable u_flags as character no-undo.
      847     define variable u_pid   as character no-undo.
      848     define variable u_csc   as character no-undo.
      849     define variable bstr    as character no-undo.
      850   
      851     define variable xusr    as character no-undo.
      852     define variable uInfo   as character no-undo.
      853   
      854     define variable lkScan  as integer   no-undo.
      855     define variable i       as integer   no-undo.
      856     define variable j       as integer   no-undo.
      857     define variable t       as integer   no-undo.
      858   
      859     define variable ci as character no-undo.
      860     define variable cl as integer   no-undo.
      861   
      862     for each tt_blocked:
      863       tt_blocked.xvalid = no.
      864     end.
      865   
      866     empty temp-table tt_blocker.
      867   
      868     empty temp-table tt_Lock.
      869     lkscan = 0.
      870   
      871     /* get a list of tt_blocked sessions
      872      *
      873      */
      874   
      875     for each dictdb._Connect no-lock
      876       where _Connect-usr <> ?
      877         and _Connect-wait <> " -- ":                                      /* not perfect -- but works for record locks             */
      878   
      879       i = i + 1.
      880   
      881       if i = 1 then snapshotLock().                       /* there is at least one blocked user... grab a snapshot of _Lock       */
      882   
      883       find tt_blocked where tt_blocked.usrnum = _Connect-usr no-error.
      884   
      885       if not available tt_blocked then
      886         do:
      887           create tt_blocked.
      888           assign
      889             tt_blocked.userPID   = string( _connect-PID )                 /* UDF has to be before indexed fields in old releases  */
      890             tt_blocked.userFlags = connectFlags( _Connect-Id )
      891             tt_blocked.userName  = connectName( _Connect-Id, tt_blocked.userFlags )
      892             tt_blocked.xid      = _Connect-usr 
      893             tt_blocked.usrnum   = _Connect-usr 
      894             tt_blocked.xtime    = time
      895          .
      896         end.
      897   
      898       /* if wait1 has changed it is a new event! 
      899        */
      900   
      901       if tt_blocked.blkResrc <> string( _Connect-wait1 ) then
      902         tt_blocked.xtime = time.
      903   
      904       /*** bstr = get-blocked( _Connect-usr ). ***/               /* build a description of the reason    */
      905   
      906       assign
      907         tt_blocked.xvalid    = yes
      908         tt_blocked.ztime     = time - tt_blocked.xtime
      909   /*    tt_blocked.blkSince  = string( tt_blocked.xtime, "hh:mm:ss" ) */
      910         tt_blocked.blkDura   = string( tt_blocked.ztime, "hh:mm:ss" )
      911         tt_blocked.blkWait   = _Connect-Wait
      912         tt_blocked.blkResrc  = string( _Connect-wait1 )
      913         tt_blocked.blkBy     = ?
      914       .
      915   
      916       /* use the snapshot of _Lock that was made above -- _Lock is not 100% reliable and records may be missing etc.
      917        *
      918        * RECIDs are not unique -- so the FIND /could/ find more than one lock meeting the criteria and thus be unable to
      919        * determine what we are actually waiting for :( and who else might be holding it.
      920        *
      921        * "FIRST" would "fix" that in that the query would succeed but that would be misleading (at best) or just plain wrong.
      922        *
      923        * IF we find a unique record (available = true) then we can be reasonably confident that it is the one that the user
      924        * is waiting for so we show the table name and proceed to find out more about the holder of the record lock with getUserInfo() 
      925        *
      926        */
      927   
      928       find /* first */ tt_lock where tt_lock._lock-usr = _connect-usr and tt_lock._lock-recid = _connect-wait1 no-error.
      929       if available tt_lock then
      930         do:
      931   
      932           t = tt_lock._lock-table.
      933   
      934           find tt_tbl no-lock where tt_tbl.xid = t no-error.
      935   
      936           assign
      937             tt_blocked.blkWait = _Connect-Wait + " " + ( if tt_lock._lock-flags = ? then "" else replace( tt_lock._lock-flags, " ", "" ))
      938             tt_blocked.blkNote = ( if available tt_tbl then tt_tbl.tblName else substitute( "[&1]", t ))
      939           .
      940   
      941           for each tt_lock
      942              where tt_lock._lock-table = t
      943                and tt_lock.qflag       = no                       /* not a queued lock */
      944                and tt_lock._lock-recid = _connect-wait1
      945                and tt_lock._lock-usr  <> _connect-usr:
      946   
      947             uInfo = getUserInfo( tt_lock._lock-usr, 74 - length( tt_blocked.blkNote )).
      948             if not( uInfo begins  ":" ) then tt_blocked.blkBy = integer( entry( 1, uInfo, ":" )).
      949             tt_blocked.blkNote = tt_blocked.blkNote + " " + uInfo.
      950   
      951           end.    
      952   
      953           /* for the queued users we just want a list...
      954            */
      955   
      956           j = 0.
      957   
      958           for each tt_lock
      959              where tt_lock._lock-table = t
      960                and tt_lock.qflag       = yes
      961                and tt_lock._lock-recid = _connect-wait1
      962                and tt_lock._lock-usr  <> _connect-usr:
      963   
      964             xusr = string( tt_lock._lock-usr ).
      965   
      966             tt_blocked.blkNote = tt_blocked.blkNote + " " + xusr.
      967   
      968             j = j + 1.
      969             if j > 5 then leave.
      970   
      971           end.    
      972   
      973   
      974         end.
      975   
      976       if ( rowLimit > 0 ) and ( i >= rowLimit ) then leave.
      977   
      978     end.
      979   
      980     for each tt_blocked where tt_blocked.xvalid = no:
      981       delete tt_blocked.
      982     end.
      983   
      984     /* just capture the oldest duration /* blocker */ blocked user -- the *blocker* is shown in the "blocker-statementCache"
      985      */
      986   
      987     for each tt_blocked by ztime:
      988       leave.
      989     end.
      990   
      991   /***
      992   
      993     if available tt_blocked and tt_blocked.blkBy <> ? then
      994       do:
      995         find _connect no-lock where ( _connect-id = /* tt_blocked.blkBy */ tt_blocked.usrNum + 1 ) and _connect-usr <> ? no-error.
      996         empty temp-table tt_blocker_Info.
      997         create  tt_blocker_Info.
      998         tt_blocker_Info.infoString = substitute( "Oldest Blocked (usr: &1, &2) Stack Trace", _connect-usr, _connect-name ).
      999   
     1000   &IF {&CONNECTX} = "yes" &THEN
     1001   
     1002        getStack: do i = 1 to 32:
     1003   
     1004           assign
     1005             ci = ?
     1006             ci =  buffer _connect:handle:buffer-field( "_connect-cacheInfo" ):buffer-value( i )
     1007             cl =  buffer _connect:handle:buffer-field( "_connect-cacheLineNumber" ):buffer-value( i )
     1008           no-error.
     1009   
     1010           if ci = ? then leave getStack.
     1011           create tt_blocker.
     1012           assign
     1013             tt_blocker.xid      = i
     1014             tt_blocker.stackNum = i
     1015             tt_blocker.lineNum  = cl
     1016             tt_blocker.procName = ci
     1017           .      
     1018         end.
     1019   
     1020   &ENDIF
     1021   
     1022       end.
     1023   
     1024    ***/
     1025   
     1026     add2ds( temp-table tt_blocked:default-buffer-handle ).
     1027   
     1028   /***
     1029     add2ds( temp-table tt_blocker:default-buffer-handle ).
     1030     add2ds( temp-table tt_blocker_Info:default-buffer-handle ).
     1031    ***/
     1032   
     1033     return.
     1034   
     1035   end.
     1036   
     1037   *** Encrypted Source ***
     1038   *** Encrypted Source ***
     1039   *** Encrypted Source ***
     1040   *** Encrypted Source ***
     1041   *** Encrypted Source ***
     1042   *** Encrypted Source ***
     1043   *** Encrypted Source ***
     1044   *** Encrypted Source ***
     1045   *** Encrypted Source ***
     1046   *** Encrypted Source ***
     1047   *** Encrypted Source ***
     1048   *** Encrypted Source ***
     1049   *** Encrypted Source ***
     1050   *** Encrypted Source ***
     1051   *** Encrypted Source ***
     1052   *** Encrypted Source ***
     1053   *** Encrypted Source ***
     1054   *** Encrypted Source ***
     1055   *** Encrypted Source ***
     1056   *** Encrypted Source ***
     1057   *** Encrypted Source ***
     1058   *** Encrypted Source ***
     1059   *** Encrypted Source ***
     1060   *** Encrypted Source ***
     1061   *** Encrypted Source ***
     1062   *** Encrypted Source ***
     1063   *** Encrypted Source ***
     1064   *** Encrypted Source ***
     1065   *** Encrypted Source ***
     1066   *** Encrypted Source ***
     1067   *** Encrypted Source ***
     1068   *** Encrypted Source ***
     1069   *** Encrypted Source ***
     1070   *** Encrypted Source ***
     1071   *** Encrypted Source ***
     1072   *** Encrypted Source ***
     1073   *** Encrypted Source ***
     1074    
     1075   
     1076   return.
