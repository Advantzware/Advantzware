        1   /*******************************************************************************
        2    *******************************************************************************
        3    **                                                                           **
        4    **                                                                           **
        5    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
        6    **  http://www.greenfieldtech.com                                            **
        7    **                                                                           **
        8    **  ProTop is free software; you can redistribute it and/or modify it        **
        9    **  under the terms of the GNU General Public License (GPL) as published     **
       10    **  by the Free Software Foundation; either version 2 of the License, or     **
       11    **  at your option) any later version.                                       **
       12    **                                                                           **
       13    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       14    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       15    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       16    **  for more details.                                                        **
       17    **                                                                           **
       18    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       19    **  of use and alternative licensing options for this software.              **
       20    **                                                                           **
       21    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       22    **                                                                           **
       23    **  See http://www.fsf.org for more information about the GPL.               **
       24    **                                                                           **
       25    **                                                                           **
       26    *******************************************************************************
       27    *******************************************************************************
       28    *
       29    * df.p
       30    *
       31    * Free disk space
       32    *
       33    * Author:
       34    *
       35    *      Tom Bascom, Greenfield Technologies
       36    *      http://www.greenfieldtech.com
       37    *      November 2, 2003
       38    *
       39    */
       40   
       41   
       42   /*******************************************************************************
       43    *******************************************************************************
       44    **                                                                           **
       45    **                                                                           **
       46    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       47    **  http://www.greenfieldtech.com                                            **
       48    **                                                                           **
       49    **  ProTop is free software; you can redistribute it and/or modify it        **
       50    **  under the terms of the GNU General Public License (GPL) as published     **
       51    **  by the Free Software Foundation; either version 2 of the License, or     **
       52    **  at your option) any later version.                                       **
       53    **                                                                           **
       54    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       55    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       56    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       57    **  for more details.                                                        **
       58    **                                                                           **
       59    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       60    **  of use and alternative licensing options for this software.              **
       61    **                                                                           **
       62    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       63    **                                                                           **
       64    **  See http://www.fsf.org for more information about the GPL.               **
       65    **                                                                           **
       66    **                                                                           **
       67    *******************************************************************************
       68    *******************************************************************************
       69    *
       70    * protop.i
       71    *
       72    * Header file for protop family of programs
       73    *
       74    *
       75    * Known Bugs & Issues:
       76    *
       77    *
       78    * To Do:
       79    *
       80    *
       81    * Author:
       82    *
       83    *      Tom Bascom, Greenfield Technologies
       84    *      http://www.greenfieldtech.com
       85    *      August 28, 2003
       86    *
       87    */
       88   
       89   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       90   &global-define  FASTLOCK        true
       91   &ELSE
       92   &global-define  FASTLOCK        false
       93   &ENDIF
       94   
       95   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       96   &global-define  OE11            "yes"
       97   &global-define  xDEBUGTT        false
       98   &ENDIF
       99   
      100   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
      101   &global-define  NOSERIALIZE     serialize-hidden
      102   &ENDIF
      103   
      104   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
      105   &global-define  BIGINT          int64
      106   &ELSE
      107   &global-define  BIGINT          decimal
      108   &ENDIF
      109   
      110   
      111   /* lib/v9.i
      112    *
      113    */
      114   
      115   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
      116   &global-define  CPYLOB  "no"
      117   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
      118   &global-define  LNGCR   character
      119   &global-define  DTZ     integer
      120   &global-define  BIGINT  decimal
      121   &ELSE
      122   &global-define  OE10    "yes"
      123   &global-define  NOW     now
      124   &global-define  LNGCR   longchar
      125   &global-define  DTZ     datetime-tz
      126   &global-define  BIGINT  int64
      127   &ENDIF
      128    
      129   
      130   /* use extended _connect fields: -client, -cache*
      131    */
      132   
      133   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      134   &global-define  CONNECTX        "yes"
      135   &ELSE
      136   &global-define  CONNECTX        "no"
      137   &ENDIF
      138   
      139   define stream inStrm.
      140   
      141   define new global shared variable dbgMode as integer no-undo initial 1.
      142   
      143   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      144    *
      145    * someday everyone will have OO and I will replace these with a gsv class
      146    * or something of that ilk
      147    *
      148    */
      149   
      150   define new global shared variable pt_shortname   as character no-undo.
      151   define new global shared variable pt_uniqName    as character no-undo.
      152   define new global shared variable pt_server      as character no-undo.
      153   define new global shared variable pt_resrcType   as character no-undo.
      154   
      155   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      156   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      157   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      158   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      159   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      160   
      161   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      162   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      163   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      164   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      165   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      166   define new global shared variable pt_ioFileName  as character no-undo.
      167   define new global shared variable pt_dfCmd       as character no-undo.
      168   
      169   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      170   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      171   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      172   
      173   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      174   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      175   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      176   
      177   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      178   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      179   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      180   
      181   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      182   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      183   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      184   
      185   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      186   
      187   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      188   
      189   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      190   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      191   
      192   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      193    * 
      194    */
      195   
      196   define new global shared variable stime as integer no-undo.                     /* start time                           */
      197   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      198   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      199   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      200   
      201   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      202   
      203                                                                                   /* corresponding to base checkpoint#    */
      204   /** Global Shared Temp Table Definitions
      205    **
      206    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      207    ** And a shared temp-table is logically the same as a db table so who really cares?
      208    **
      209    **/
      210   
      211   /* cache _File and _Index records so that we don't keep hitting the db to translate
      212    */
      213   
      214   define new global shared temp-table tt_tbl no-undo
      215     field xid      as integer                                             /* _File._File-Num              */
      216     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      217     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      218     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      219     field tblname  as character                                           /* _File._File-Name             */
      220     index xid-idx is unique primary xid.
      221   
      222   define new global shared temp-table tt_idx no-undo
      223     field xid      as integer                                             /* _Index._Idx-Num              */
      224     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      225     field idxname  as character                                           /* _Index._Idx-Name             */
      226     field idxnote  as character
      227     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      228     field tblnum   as integer                                             /* _File._File-Num              */
      229     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      230     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      231     field tblname  as character                                           /* _File._File-Name             */
      232     index xid-idx is unique primary xid.
      233   
      234   define new global shared temp-table tt_areaExtent no-undo
      235     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      236     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      237   
      238     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      239     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      240     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      241   
      242     index ae-idx is unique primary areaNum extNum.
      243   
      244   define new global shared temp-table tt_area no-undo
      245     field xid      as integer    format ">>>9"
      246     field SANum    as integer    format ">>>9"        label "#"
      247     field areaPool as character  format "x(2)"        label "BX"
      248   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      249     field SAName   as character  format "x(30)"       label "Area Name"
      250     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      251     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      252     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      253     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      254     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      255     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      256     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      257   
      258     field blkszkb as integer     format ">>9"         label "BSZ"
      259     field rpb     as integer     format ">>9"         label "RPB"
      260     field clstrsz as integer     format ">>9"         label "CSZ"
      261   
      262     field numTbls as integer     format ">>>>9"       label "#Tbls"
      263     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      264     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      265   
      266     field numExts as integer     format ">>>>9"       label "#Exts"
      267     field hasVar  as logical     format "Yes/No"      label "Var?"
      268   
      269     field xnote   as character   format "x"           label "*"
      270   
      271     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      272     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      273   
      274     index pctAlloc-idx is primary pctAlloc descending
      275     index pctLastX-idx pctLastX pctAlloc descending
      276     index allocGB-idx allocGB descending
      277     index totGB-idx totGB descending
      278     index xid-idx is unique xid
      279     index SANum-idx is unique SANum
      280     index SAName-idx is unique SAName
      281   .
      282   
      283   *** Encrypted Source ***
      284   *** Encrypted Source ***
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319   *** Encrypted Source ***
      320   *** Encrypted Source ***
      321   *** Encrypted Source ***
      322   *** Encrypted Source ***
      323   *** Encrypted Source ***
      324   *** Encrypted Source ***
      325   *** Encrypted Source ***
      326   *** Encrypted Source ***
      327   *** Encrypted Source ***
      328   *** Encrypted Source ***
      329   *** Encrypted Source ***
      330   *** Encrypted Source ***
      331   *** Encrypted Source ***
      332   *** Encrypted Source ***
      333   *** Encrypted Source ***
      334   *** Encrypted Source ***
      335   *** Encrypted Source ***
      336   *** Encrypted Source ***
      337   *** Encrypted Source ***
      338   *** Encrypted Source ***
      339   *** Encrypted Source ***
      340   *** Encrypted Source ***
      341   *** Encrypted Source ***
      342   *** Encrypted Source ***
      343   *** Encrypted Source ***
      344   *** Encrypted Source ***
      345   *** Encrypted Source ***
      346   *** Encrypted Source ***
      347   *** Encrypted Source ***
      348   *** Encrypted Source ***
      349   *** Encrypted Source ***
      350   *** Encrypted Source ***
      351   *** Encrypted Source ***
      352   *** Encrypted Source ***
      353    
      354   
      355   /*******************************************************************************
      356    *******************************************************************************
      357    **                                                                           **
      358    **                                                                           **
      359    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      360    **  http://www.greenfieldtech.com                                            **
      361    **                                                                           **
      362    **  ProTop is free software; you can redistribute it and/or modify it        **
      363    **  under the terms of the GNU General Public License (GPL) as published     **
      364    **  by the Free Software Foundation; either version 2 of the License, or     **
      365    **  at your option) any later version.                                       **
      366    **                                                                           **
      367    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      368    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      369    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      370    **  for more details.                                                        **
      371    **                                                                           **
      372    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      373    **  of use and alternative licensing options for this software.              **
      374    **                                                                           **
      375    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      376    **                                                                           **
      377    **  See http://www.fsf.org for more information about the GPL.               **
      378    **                                                                           **
      379    **                                                                           **
      380    *******************************************************************************
      381    *******************************************************************************
      382    *
      383    * protoplib.i
      384    *
      385    * ProTop infrastructure library definitions
      386    *
      387    */
      388   
      389   function uDateTime returns integer () in super.
      390   function string2uDateTime returns integer( input p_text as character ) in super.
      391   function searchDir returns character ( input xDir as character ) in super.
      392   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      393   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      394   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      395   function myPID returns character () in super.
      396   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      397   
      398   /* end protoplib.i */
      399    
      400   
      401   /*******************************************************************************
      402    *******************************************************************************
      403    **                                                                           **
      404    **                                                                           **
      405    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      406    **  http://www.greenfieldtech.com                                            **
      407    **                                                                           **
      408    **  ProTop is free software; you can redistribute it and/or modify it        **
      409    **  under the terms of the GNU General Public License (GPL) as published     **
      410    **  by the Free Software Foundation; either version 2 of the License, or     **
      411    **  at your option) any later version.                                       **
      412    **                                                                           **
      413    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      414    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      415    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      416    **  for more details.                                                        **
      417    **                                                                           **
      418    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      419    **  of use and alternative licensing options for this software.              **
      420    **                                                                           **
      421    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      422    **                                                                           **
      423    **  See http://www.fsf.org for more information about the GPL.               **
      424    **                                                                           **
      425    **                                                                           **
      426    *******************************************************************************
      427    *******************************************************************************
      428    *
      429    * vstlib.i
      430    *
      431    * VST library definitions
      432    *
      433    */
      434   
      435   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      436   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      437   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      438   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      439   
      440   function connectFlags returns character ( input cnxId as integer ) in super.
      441   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      442   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      443   
      444   function isAIEnabled returns logical () in super.
      445   function isReplSource returns logical () in super.
      446   function isReplTarget returns logical () in super.
      447   function isBackupRunning returns logical () in super.
      448   function isWorkgroup returns logical () in super.
      449   
      450   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      451   
      452   /* end vstlib.i */
      453    
      454   
      455   function add2ds returns logical ( input h as handle ) in super.
      456   function getTempTableHandle returns handle ( input n as character ) in super.
      457   
      458   /* end protop.i */
      459    
      460   
      461   /*******************************************************************************
      462    *******************************************************************************
      463    **                                                                           **
      464    **                                                                           **
      465    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      466    **  http://www.greenfieldtech.com                                            **
      467    **                                                                           **
      468    **  ProTop is free software; you can redistribute it and/or modify it        **
      469    **  under the terms of the GNU General Public License (GPL) as published     **
      470    **  by the Free Software Foundation; either version 2 of the License, or     **
      471    **  at your option) any later version.                                       **
      472    **                                                                           **
      473    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      474    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      475    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      476    **  for more details.                                                        **
      477    **                                                                           **
      478    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      479    **  of use and alternative licensing options for this software.              **
      480    **                                                                           **
      481    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      482    **                                                                           **
      483    **  See http://www.fsf.org for more information about the GPL.               **
      484    **                                                                           **
      485    **                                                                           **
      486    *******************************************************************************
      487    *******************************************************************************
      488    *
      489    * protoplib.i
      490    *
      491    * ProTop infrastructure library definitions
      492    *
      493    */
      494   
      495   function uDateTime returns integer () in super.
      496   function string2uDateTime returns integer( input p_text as character ) in super.
      497   function searchDir returns character ( input xDir as character ) in super.
      498   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      499   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      500   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      501   function myPID returns character () in super.
      502   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      503   
      504   /* end protoplib.i */
      505    
      506   
      507   define output parameter dcDescription as character no-undo initial "df".
      508   
      509   define temp-table tt_diskFree no-undo
      510     field xid        as integer
      511     field xvalid     as logical
      512     field mnt        as character label "Mount"      format "x(20)"
      513     field fs-size    as decimal   label "Size (GB)"  format ">>>>>9.99"
      514     field fs-free    as decimal   label "Free (GB)"  format ">>>>>9.99"
      515     field fsPctUsed  as decimal   label "%Used"      format ">>9.99%"
      516   
      517     field inode-num  as decimal   label "#Inodes"    format ">>>>>>>>>9"
      518     field inode-free as decimal   label "InodesFree" format ">>>>>>>>>9"
      519     field inPctUsed  as decimal   label "%Inodes"    format ">>9.99%"
      520   
      521     field fs-type    as character label "FS Type"    format "x(8)" 
      522     field fs-opts    as character label "Mount Options" format "x(36)" 
      523     field dev        as character label "Device"     format "x(30)"
      524     field threshold  as integer extent 2 serialize-hidden
      525     field fs-grow    as decimal extent 5 serialize-hidden
      526   
      527     index xid-idx is unique xid
      528     index mnt-idx is unique mnt
      529     index fsPctUsed-idx is primary fsPctUsed descending
      530     index fs-type-idx fs-type
      531     index dev-idx     dev
      532     index fs-opts-idx fs-opts
      533     index fs-size-idx fs-size descending
      534     index fs-free-idx fs-free descending
      535   .
      536   
      537   
      538   /* lib/dumpTT.i
      539    *
      540    * simplified to a single line -- include should be eliminated.
      541    *
      542    */
      543   
      544   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 &THEN
      545   /*** +++
      546   file-info:file-name = "./ptdefs".
      547   if file-info:full-pathname <> ? and index( file-info:file-type, "d" ) > 0 and index( file-info:file-type, "w" ) > 0 then
      548     do:
      549   
      550       file-info:file-name = "./ptdefs/{1}.xsd".
      551   
      552       if true /* file-info:full-pathname = ? or file-info:file-size = 0 */ then
      553         do:
      554   
      555           temp-table {1}:write-xmlschema(
      556             "file",
      557   /*        substitute( "ptdefs/&1.xsd", "{1}" ), */
      558   /*        "./ptdefs/{1}.xsd", */
      559             ( if opsys = "unix" then "./ptdefs/{1}.xsd" else ".~\ptdefs~\{1}.xsd" ),
      560             true
      561   
      562         &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2
      563         &THEN
      564             , ?, ?, ?
      565         &ENDIF
      566   
      567       ).
      568   
      569       end.
      570   
      571     end.
      572    +++ ***/
      573   &ENDIF
      574    
      575   
      576   define temp-table tt_df_cfg no-undo
      577     field order       as integer
      578     field xtype       as character
      579     field pattern     as character
      580     field threshold   as decimal
      581   .
      582   
      583   define variable zid    as integer no-undo.
      584   define variable osName as character no-undo.
      585   
      586   
      587   /* what does this do?
      588    *
      589    * if tt_df_cfg is empty then nothing
      590    *
      591    */
      592   
      593   function checkPattern returns logical ( input xmnt as character, input-output thold as decimal ):
      594   
      595     define variable ok as logical no-undo.
      596   
      597       check_pattern: do:
      598   
      599         find tt_df_cfg no-lock where tt_df_cfg.xtype = "default" no-error.
      600         if available tt_df_cfg then thold = tt_df_cfg.threshold.
      601   
      602         ok = yes.
      603   
      604         for each tt_df_cfg no-lock where tt_df_cfg.xtype = "include" by tt_df_cfg.order:
      605           if xmnt matches tt_df_cfg.pattern then
      606             do:
      607               if tt_df_cfg.threshold > 0 then thold = tt_df_cfg.threshold.
      608               leave check_pattern.
      609             end.
      610         end.
      611   
      612         for each tt_df_cfg no-lock where tt_df_cfg.xtype = "exclude" by tt_df_cfg.order:
      613           if xmnt matches tt_df_cfg.pattern then
      614             do:
      615               ok = no.
      616               leave check_pattern.
      617             end.
      618         end.
      619   
      620       end.
      621   
      622     return ok.
      623   
      624   end.
      625   
      626   procedure getMountAIX:
      627   
      628     define variable xmnt    as character no-undo format "x(80)".
      629     define variable xdev    as character no-undo format "x(80)".
      630     define variable fstype  as character no-undo format "x(80)".
      631     define variable mntopts as character no-undo format "x(80)".
      632   
      633     define variable xxx     as character no-undo.
      634     define variable xtra    as character no-undo extent 32.
      635     define variable i as integer no-undo.
      636   
      637     input stream inStrm through value( "mount" ).
      638     import stream inStrm ^.
      639     import stream inStrm ^.
      640   
      641     repeat:
      642   
      643       xtra = "".
      644   
      645       import stream inStrm xdev xmnt fstype xtra.
      646   
      647       i = 4.
      648       if not xdev begins "/" then
      649         assign
      650           xxx  = xdev
      651           xdev = xmnt
      652           xmnt = fstype
      653           fstype = xtra[1]
      654           i = i + 1.
      655         .
      656   
      657       mntopts = "".
      658       do while i < 32 and xtra[i] <> "":
      659         mntopts = mntopts + trim( xtra[i] ) + ",".
      660         i = i + 1.
      661       end.
      662       mntopts = substring( mntopts, 1, length( mntopts ) - 1 ).
      663   
      664       find tt_diskFree where tt_diskFree.mnt = xmnt no-error.
      665       if available tt_diskFree then
      666         assign
      667           tt_diskFree.fs-type = fstype
      668           tt_diskFree.fs-opts = mntopts
      669         .
      670   
      671     end.
      672     input stream inStrm close.
      673   
      674   end.
      675   
      676   procedure getMountSunOS:
      677   
      678     define variable xmnt    as character no-undo format "x(80)".
      679     define variable xdev    as character no-undo format "x(80)".
      680     define variable fstype  as character no-undo format "x(80)".
      681     define variable mntopts as character no-undo format "x(80)".
      682   
      683     /*      device       device       mount      FS      fsck    mount      mount
      684      *      to mount     to fsck      point      type    pass    at boot    options
      685      */
      686   
      687     input stream inStrm through value( "mount -p" ).
      688     repeat:
      689   
      690       import stream inStrm xdev ^ xmnt fstype ^ ^ mntopts.
      691   
      692       find tt_diskFree where tt_diskFree.dev = xdev no-error.
      693       if available tt_diskFree then
      694         assign
      695           tt_diskFree.fs-type = fstype
      696           tt_diskFree.fs-opts = mntopts
      697         .
      698   
      699     end.
      700     input stream inStrm close.
      701   
      702   end.
      703   
      704   procedure getMountHP-UX:
      705   
      706     define variable xmnt    as character no-undo format "x(80)".
      707     define variable xdev    as character no-undo format "x(80)".
      708     define variable fstype  as character no-undo format "x(80)".
      709     define variable mntopts as character no-undo format "x(80)".
      710   
      711     input stream inStrm through value( "/etc/mount -p" ).
      712     repeat:
      713   
      714       import stream inStrm xdev xmnt fstype mntopts ^ ^.
      715   
      716       find tt_diskFree where tt_diskFree.dev = xdev no-error.
      717       if available tt_diskFree then
      718         assign
      719           tt_diskFree.fs-type = fstype
      720           tt_diskFree.fs-opts = mntopts
      721         .
      722   
      723     end.
      724     input stream inStrm close.
      725   
      726   end.
      727   
      728   procedure getMountWindows:
      729   
      730     /* nothing to do -- mount info is included with df info via the wmic command */
      731   
      732     return.
      733   
      734   end.
      735   
      736   procedure getMountLinux:
      737   
      738     define variable xmnt    as character no-undo format "x(80)".
      739     define variable xdev    as character no-undo format "x(80)".
      740     define variable fstype  as character no-undo format "x(80)".
      741     define variable mntopts as character no-undo format "x(80)".
      742   
      743     input stream inStrm through value( "mount" ).
      744     repeat:
      745   
      746       import stream inStrm xdev ^ xmnt ^ fstype mntopts.
      747   
      748       find tt_diskFree where tt_diskFree.dev = xdev no-error.
      749       if available tt_diskFree then
      750         assign
      751           tt_diskFree.fs-type = fstype
      752           tt_diskFree.fs-opts = mntopts
      753         .
      754   
      755     end.
      756     input stream inStrm close.
      757   
      758   end.
      759   
      760   
      761   /* proenv>wmic logicaldisk get compressed,deviceid,drivetype,filesystem,freespace,name,size,status,statusinfo,volumename,volumeserialnumber /format:csv
      762    *
      763    * Node,Compressed,DeviceID,DriveType,FileSystem,FreeSpace,Name,Size,Status,StatusInfo,VolumeName,VolumeSerialNumber
      764    * TOM-PC,FALSE,C:,3,NTFS,79466725376,C:,199750578176,,,,D2909E2F
      765    * TOM-PC,,D:,5,,,D:,,,,,
      766    * TOM-PC,FALSE,E:,3,NTFS,600009228288,E:,600124157952,,,New Volume,3C0CB4B6
      767    * TOM-PC,,F:,2,,,F:,,,,,
      768    * TOM-PC,FALSE,Z:,4,NTFS,687177990144,Z:,747827625984,,,share,2E0D04E7
      769    */
      770   
      771   procedure getDFWindows:
      772   
      773     define variable inline   as character no-undo extent 20.              /* used by df commands that split lines         */
      774     define variable xmnt     as character no-undo format "x(80)".
      775     define variable xdev     as character no-undo format "x(80)".
      776     define variable xfs-size as decimal   no-undo format ">>>>>>>>9".
      777     define variable xfs-free as decimal   no-undo format ">>>>>>>>9".
      778   
      779     define variable xinodes  as decimal   no-undo format ">>>>>>>>9".
      780     define variable xifree   as decimal   no-undo format ">>>>>>>>9".
      781   
      782     define variable ok as logical no-undo.
      783     define variable thold as decimal no-undo.
      784   
      785     define variable xline as character no-undo.
      786   
      787     define variable fsCompressed as character no-undo format "x(80)".
      788     define variable deviceid     as character no-undo format "x(80)".
      789     define variable drivetype    as character no-undo format "x(80)".
      790     define variable filesystem   as character no-undo format "x(80)".
      791     define variable freeSpace    as character no-undo format "x(80)".
      792     define variable fsName       as character no-undo format "x(80)".
      793     define variable fsSize       as character no-undo format "x(80)".
      794     define variable fsStatus     as character no-undo format "x(80)".
      795     define variable fsStatusinfo as character no-undo format "x(80)".
      796     define variable volumeName   as character no-undo format "x(80)".
      797     define variable volumeSerial as character no-undo format "x(80)".
      798   
      799     define variable dfcmd as character no-undo initial "wmic logicaldisk get compressed,deviceid,drivetype,filesystem,freespace,name,size,status,statusinfo,volumename,volumeserialnumber /format:csv".
      800   
      801     if pt_dfCmd <> "" then dfcmd = pt_dfCmd.
      802   
      803     input stream inStrm through value( dfcmd ).
      804   
      805     repeat:
      806   
      807       assign
      808         inline   = ""
      809         xmnt     = ""
      810         xdev     = ""
      811         xfs-size =  0
      812         xfs-free =  0
      813         thold    = 90
      814   
      815         fsCompressed = ""
      816         deviceid     = ""
      817         drivetype    = ""
      818         filesystem   = ""
      819         freeSpace    = ""
      820         fsName       = ""
      821         fsSize       = ""
      822         fsStatus     = ""
      823         fsStatusInfo = ""
      824         volumeName   = ""
      825         volumeSerial = ""
      826       .
      827   
      828       import stream inStrm delimiter "," ^ fsCompressed deviceid drivetype filesystem freespace fsName fsSize fsStatus fsStatusInfo volumeName volumeSerial.
      829   
      830       if filesystem = "" or fsSize = "" or ( filesystem = "filesystem" and fsSize = "size" ) then next.
      831   
      832       assign
      833         xdev     = deviceId
      834         xfs-size = ( decimal( fsSize ) / 1024 )
      835         xfs-free = ( decimal( freeSpace ) / 1024 )
      836       .
      837   
      838       if xmnt = "" and volumeName   <> "" then xmnt = volumeName.
      839       if xmnt = "" and volumeSerial <> "" then xmnt = volumeSerial.
      840       if xmnt = "" and fsName       <> "" then xmnt = fsName.
      841   
      842       xmnt = trim( xmnt ).
      843   
      844       if xmnt = "" then xmnt = xdev.
      845   
      846       if checkPattern( xmnt, thold ) then run update_diskFree( xmnt, xdev, xfs-size, xfs-free, thold, xinodes, xifree ).
      847   
      848       find tt_diskFree where tt_diskFree.dev = deviceid no-error.
      849   
      850       if available tt_diskFree then
      851         do:
      852   
      853           tt_diskFree.fs-type = filesystem.
      854   
      855           case drivetype:
      856             when "0" then tt_diskFree.fs-opts = "Unknown,".
      857             when "2" then tt_diskFree.fs-opts = "Removable,".
      858             when "3" then tt_diskFree.fs-opts = "Local,".
      859             when "4" then tt_diskFree.fs-opts = "Network,".
      860             when "5" then tt_diskFree.fs-opts = "CD,".
      861             when "6" then tt_diskFree.fs-opts = "RAM,".
      862             otherwise tt_diskFree.fs-opts = substitute( "Type &1,", trim( driveType )).
      863           end.
      864   
      865           if fsCompressed <> "false" then tt_diskFree.fs-opts = tt_diskFree.fs-opts + "Compressed,".
      866           if fsStatus     <> ""      then tt_diskFree.fs-opts = tt_diskFree.fs-opts + fsStatus + ",".
      867           if fsStatusInfo <> ""      then tt_diskFree.fs-opts = tt_diskFree.fs-opts + fsStatusInfo + ",".
      868   
      869           tt_diskFree.fs-opts = trim( tt_diskFree.fs-opts, "," ).
      870   
      871         end.
      872   
      873     end.
      874   
      875     input stream inStrm close.
      876   
      877     return.
      878   
      879   end.
      880   
      881   
      882   /*      $ bdf
      883    *      Filesystem          kbytes    used   avail %used Mounted on
      884    *      /dev/vg00/lvol3    1048576  602280  442904   58% /
      885    *      /dev/vg00/lvol1    1776056   82304 1516144    5% /stand
      886    *      /dev/vg00/lvol8    34078720 7331080 26541696   22% /var
      887    *      /dev/vg00/lvol7    4194304 2500712 1682064   60% /usr
      888    *      /dev/dvl/dvl       261095424 178366480 82082640   68% /train
      889    *      /dev/vg00/lvol6    4194304 1494216 2679016   36% /tmp
      890    *      /dev/rep_ai/rep_ai 20480000 2415310 16935658   12% /rep_ai
      891    *      /dev/rep/rep       261095424 204975432 55681576   79% /rep
      892    *      /dev/vg00/lvol5    8388608 3786096 4568040   45% /opt
      893    *      /dev/olbkup/olbkup 358350848 315188008 42825704   88% /onlinebkup
      894    *      /dev/vg00/lvol4    4194304   52968 4109008    1% /home2
      895    *      /dev/home/home     105906176 86823350 17890167   83% /home
      896    *      /dev/db08train/train8
      897    *                         153501696 135933835 16469873   89% /dvl
      898    *      /dev/db/prod       518324224 396028815 114652987   78% /db
      899    *      /dev/apps_p/apps_p 71671808  578222 66654040    1% /apps_p
      900    *      /dev/apps/apps     156237824 95440200 57001214   63% /apps
      901    *      /dev/prodai/prodai 56098816 5392408 50310288   10% /ai
      902    *      /dev/FY2012/FY2012 204151665 170145384 13591114   93% /FY2012
      903    *      /dev/FY2011/FY2011 209649664 189100095 19288130   91% /FY2011
      904    *      /dev/FY2010/FY2011 209649664 195166776 14375480   93% /FY2010
      905    *      DevFS                    3       3       0  100% /dev/deviceFileSystem
      906    */
      907   
      908   procedure getDFHP-UX:
      909   
      910     define variable inline   as character no-undo extent 20.              /* used by df commands that split lines         */
      911     define variable xmnt     as character no-undo format "x(80)".
      912     define variable xdev     as character no-undo format "x(80)".
      913     define variable xfs-size as decimal   no-undo format ">>>>>>>>9".
      914     define variable xfs-free as decimal   no-undo format ">>>>>>>>9".
      915   
      916     define variable xinodes  as decimal   no-undo format ">>>>>>>>9".
      917     define variable xifree   as decimal   no-undo format ">>>>>>>>9".
      918   
      919     define variable ok as logical no-undo.
      920     define variable thold as decimal no-undo.
      921   
      922     define variable dfcmd as character no-undo initial "bdf -l | cat".
      923   
      924     if pt_dfCmd <> "" then dfcmd = pt_dfCmd.
      925   
      926     input stream inStrm through value( dfcmd ).
      927   
      928     import stream inStrm ^.       /* eat the header line  */
      929   
      930     repeat:
      931   
      932       assign
      933         inline   = ""
      934         xmnt     = ""
      935         xdev     = ""
      936         xfs-size =  0
      937         xfs-free =  0
      938         thold    = 90
      939       .
      940   
      941       import stream inStrm inline no-error.
      942       xdev = inline[1].
      943       if inline[2] > "" then
      944         assign
      945           xmnt     = inline[6]
      946           xfs-size =  decimal( inline[2] )
      947           xfs-free =  decimal( inline[4] )
      948         no-error.
      949        else
      950         do:
      951           import stream inStrm inline no-error.
      952           assign
      953             xmnt     = inline[5]
      954             xfs-size =  decimal( inline[1] )
      955             xfs-free =  decimal( inline[3] )
      956           no-error.
      957         end.
      958   
      959       if xmnt = "" or error-status:num-messages > 0 then next.
      960   
      961       if checkPattern( xmnt, thold ) then run update_diskFree( xmnt, xdev, xfs-size, xfs-free, thold, xinodes, xifree ).
      962   
      963     end.
      964   
      965     input stream inStrm close.
      966   
      967     return.
      968   
      969   end.
      970   
      971   /*      $ df -k
      972    *      Filesystem            kbytes    used   avail capacity  Mounted on
      973    *      /dev/vx/dsk/rootvol  4131384 1036087 3053984    26%    /
      974    *      /proc                      0       0       0     0%    /proc
      975    *      fd                         0       0       0     0%    /dev/fd
      976    *      mnttab                     0       0       0     0%    /etc/mnttab
      977    *      swap                 6795056      32 6795024     1%    /var/run
      978    *      swap                 6797904    2880 6795024     1%    /tmp
      979    *      /dev/vx/dsk/array/db5
      980    *                           8388608 5290184 2904831    65%    /db5
      981    *      /dev/vx/dsk/array/db6
      982    *                           8388608 5290232 2904786    65%    /db6
      983    *      /dev/vx/dsk/array/db7
      984    *                           8388608 5290224 2904794    65%    /db7
      985    *      /dev/vx/dsk/array/db2
      986    *                           8388608 5290240 2904779    65%    /db2
      987    *      /dev/vx/dsk/array/db1
      988    *                           8388608 5290240 2904779    65%    /db1
      989    *      /dev/vx/dsk/array/hsto
      990    *                           8388608 1498501 6489451    19%    /hsto
      991    *      /dev/vx/dsk/array/db3
      992    *                           8388608 5290200 2904816    65%    /db3
      993    *      /dev/vx/dsk/array/admin
      994    *                           8388608 7756342  593207    93%    /admin
      995    *      /dev/vx/dsk/array/db4
      996    *                           8388608 5290232 2904786    65%    /db4
      997    *      /dev/vx/dsk/array/db8
      998    *                           8388608 7704088  641796    93%    /db8
      999    *      /dev/vx/dsk/array/progress
     1000    *                           1048576  633763  388902    62%    /progress
     1001    *      /dev/vx/dsk/datadg/ai1
     1002    *                           2097152  279119 1704411    15%    /ai1
     1003    *      /dev/vx/dsk/datadg/bi2
     1004    *                           2097152  476808 1519075    24%    /bi2
     1005    *      /dev/vx/dsk/datadg/bi1
     1006    *                           2097152  543144 1456885    28%    /bi1
     1007    *      /dev/vx/dsk/datadg/ai2
     1008    *                           2097152  148175 1827171     8%    /ai2
     1009    *      /dev/vx/dsk/datadg/dupcalls
     1010    *                           4194304 2436960 1647549    60%    /dup_calls
     1011    *      /dev/vx/dsk/datadg/misc
     1012    *                           16777216  193343 15547963     2%    /misc
     1013    *      /dev/vx/dsk/datadg/backup
     1014    *                           83886080 72892339 10306665    88%    /backup
     1015    *      /dev/vx/dsk/crash    4608000    2233 4317914     1%    /var/crash
     1016    *      /dev/vx/dsk/local    2097152  253963 1728043    13%    /usr/local
     1017    *      /dev/vx/dsk/users    2097152 1732470  341943    84%    /usr/users
     1018    */
     1019   
     1020   procedure getDFSunOS:
     1021   
     1022     define variable inline   as character no-undo extent 20.
     1023     define variable xmnt     as character no-undo format "x(80)".
     1024     define variable xdev     as character no-undo format "x(80)".
     1025     define variable xfs-size as decimal   no-undo format ">>>>>>>>9".
     1026     define variable xfs-free as decimal   no-undo format ">>>>>>>>9".
     1027   
     1028     define variable xinodes  as decimal   no-undo format ">>>>>>>>9".
     1029     define variable xifree   as decimal   no-undo format ">>>>>>>>9".
     1030   
     1031     define variable ok as logical no-undo.
     1032     define variable thold as decimal no-undo.
     1033   
     1034     define variable dfcmd as character no-undo initial "df -k | cat".
     1035   
     1036     if pt_dfCmd <> "" then dfcmd = pt_dfCmd.
     1037   
     1038     input stream inStrm through value( dfcmd ).
     1039   
     1040     import stream inStrm ^.       /* eat the header line  */
     1041   
     1042     repeat:
     1043   
     1044       assign
     1045         inline   = ""
     1046         xmnt     = ""
     1047         xdev     = ""
     1048         xfs-size =  0
     1049         xfs-free =  0
     1050         thold    = 90
     1051       .
     1052   
     1053       import stream inStrm inline no-error.
     1054       xdev = inline[1].
     1055       if inline[2] > "" then
     1056         assign
     1057           xmnt     = inline[6]
     1058           xfs-size =  decimal( inline[2] )
     1059           xfs-free =  decimal( inline[4] )
     1060         no-error.
     1061        else
     1062         do:
     1063           import stream inStrm inline no-error.
     1064           assign
     1065             xmnt     = inline[5]
     1066             xfs-size =  decimal( inline[1] )
     1067             xfs-free =  decimal( inline[3] )
     1068           no-error.
     1069         end.
     1070   
     1071       if xmnt = "" or error-status:num-messages > 0 then next.
     1072   
     1073       if checkPattern( xmnt, thold ) then run update_diskFree( xmnt, xdev, xfs-size, xfs-free, thold, xinodes, xifree ).
     1074   
     1075     end.
     1076   
     1077     input stream inStrm close.
     1078   
     1079     return.
     1080   
     1081   end.
     1082   
     1083   /* AIX
     1084    *
     1085    *      > df -k
     1086    *      Filesystem    1024-blocks      Free %Used    Iused %Iused Mounted on
     1087    *      /dev/hd4          2097152   1378156   35%    19749     6% /
     1088    *      /dev/hd2          3670016   1497904   60%    44736    12% /usr
     1089    *      /dev/hd9var       2097152   1360740   36%    13139     5% /var
     1090    *      /dev/hd3          2883584   2869456    1%      216     1% /tmp
     1091    *      /dev/hd1          7340032   4688428   37%    24000     3% /home
     1092    */
     1093   
     1094   procedure getDFAIX:
     1095   
     1096     define variable inline   as character no-undo extent 20.              /* used by df commands that split lines         */
     1097     define variable xmnt     as character no-undo format "x(80)".
     1098     define variable xdev     as character no-undo format "x(80)".
     1099     define variable xfs-size as decimal   no-undo format ">>>>>>>>9".
     1100     define variable xfs-free as decimal   no-undo format ">>>>>>>>9".
     1101   
     1102     define variable xinodes  as decimal   no-undo format ">>>>>>>>9".
     1103     define variable xiused   as decimal   no-undo format ">>>>>>>>9".
     1104     define variable xifree   as decimal   no-undo format ">>>>>>>>9".
     1105     define variable xipct    as decimal   no-undo format ">>>>>>>9%".
     1106   
     1107     define variable ok as logical no-undo.
     1108     define variable thold as decimal no-undo.
     1109   
     1110     define variable dfcmd as character no-undo initial "df -k | cat".
     1111   
     1112     if pt_dfCmd <> "" then dfcmd = pt_dfCmd.
     1113   
     1114     input stream inStrm through value( dfcmd ).
     1115   
     1116     import stream inStrm ^.       /* eat the header line  */
     1117   
     1118     repeat:
     1119   
     1120       assign
     1121         inline   = ""
     1122         xmnt     = ""
     1123         xdev     = ""
     1124         xfs-size =  0
     1125         xfs-free =  0
     1126         xinodes  =  0
     1127         xiused   =  0
     1128         xifree   =  0
     1129         xipct    =  0
     1130         thold    = 90
     1131       .
     1132   
     1133       import stream inStrm inline no-error.
     1134       xdev = inline[1].
     1135       if inline[2] > "" then
     1136         assign
     1137           xmnt     = inline[7]
     1138           xfs-size =  decimal( inline[2] )
     1139           xfs-free =  decimal( inline[3] )
     1140           xiused   =  decimal( inline[5] )
     1141           xipct    =  decimal( replace( inline[6], "%", "" ))
     1142         no-error.
     1143        else
     1144         do:
     1145           import stream inStrm inline no-error.
     1146           assign
     1147             xmnt     = inline[6]
     1148             xfs-size =  decimal( inline[1] )
     1149             xfs-free =  decimal( inline[2] )
     1150             xiused   =  decimal( inline[4] )
     1151             xipct    =  decimal( replace( inline[5], "%", "" ))
     1152           no-error.
     1153         end.
     1154   
     1155       xipct   = xipct / 100.
     1156       xinodes = (( 100 - xipct ) * xiused ) + xiused.
     1157       xifree  = xinodes - xiused.
     1158   
     1159       if xmnt = "" or error-status:num-messages > 0 then next.
     1160   
     1161       if checkPattern( xmnt, thold ) then run update_diskFree( xmnt, xdev, xfs-size, xfs-free, thold, xinodes, xifree ).
     1162   
     1163     end.
     1164   
     1165     input stream inStrm close.
     1166   
     1167     return.
     1168   
     1169   end.
     1170   
     1171   /* Linux
     1172    *
     1173    *
     1174    *      $ df -Pl
     1175    *      Filesystem           1K-blocks      Used Available Use% Mounted on
     1176    *      /dev/hda3             36369516  27146564   7375480  79% /
     1177    *      tmpfs                   257304       144    257160   1% /dev/shm
     1178    *      /dev/hdb1             38468908  33462384   3052392  92% /data
     1179    *      /dev/hdd1              4194616     85084   4109532   3% /tmp1
     1180    *      /dev/hdd2              3968884    569516   3197756  16% /tmp2
     1181    *
     1182    *   "l" means "local" and will thus suppress things like:
     1183    *
     1184    *      //192.168.1.23/share 730300416  17121280 713179136   3% /ts
     1185    *
     1186    *   which is good because NFS mounts will "hang" if the server cannot be reached
     1187    *
     1188    */
     1189   
     1190   procedure getDFLinux:
     1191   
     1192     define variable inline   as character no-undo extent 20.              /* used by df commands that split lines         */
     1193     define variable xmnt     as character no-undo format "x(80)".
     1194     define variable xdev     as character no-undo format "x(80)".
     1195     define variable xfs-size as decimal   no-undo format ">>>>>>>>9".
     1196     define variable xfs-free as decimal   no-undo format ">>>>>>>>9".
     1197   
     1198     define variable xinodes  as decimal   no-undo format ">>>>>>>>9".
     1199     define variable xifree   as decimal   no-undo format ">>>>>>>>9".
     1200   
     1201     define variable ok as logical no-undo.
     1202     define variable thold as decimal no-undo.
     1203   
     1204     for each tt_diskFree:
     1205       tt_diskFree.xvalid = no.
     1206     end.
     1207   
     1208     define variable dfcmd as character no-undo initial "df -Pl".
     1209   
     1210     if pt_dfCmd <> "" then dfcmd = pt_dfCmd.
     1211   
     1212     input stream inStrm through value( dfcmd ).
     1213   
     1214     import stream inStrm ^.       /* eat the header line  */
     1215   
     1216     repeat:
     1217   
     1218       assign
     1219         inline   = ""
     1220         xmnt     = ""
     1221         xdev     = ""
     1222         xfs-size =  0
     1223         xfs-free =  0
     1224         thold    = 90
     1225       .
     1226   
     1227       import stream inStrm inline no-error.
     1228       xdev = inline[1].
     1229       if inline[2] > "" then
     1230         assign
     1231           xmnt     = inline[6]
     1232           xfs-size =  decimal( inline[2] )
     1233           xfs-free =  decimal( inline[4] )
     1234         no-error.
     1235        else               /* the line is split */
     1236         do:
     1237           import stream inStrm inline no-error.
     1238           assign
     1239             xmnt     = inline[5]
     1240             xfs-size =  decimal( inline[1] )
     1241             xfs-free =  decimal( inline[3] )
     1242           no-error.
     1243         end.
     1244   
     1245       if xmnt = "" or error-status:num-messages > 0 then next.
     1246   
     1247       if checkPattern( xmnt, thold ) then run update_diskFree( xmnt, xdev, xfs-size, xfs-free, thold, xinodes, xifree ).
     1248   
     1249     end.
     1250   
     1251     input stream inStrm close.
     1252   
     1253     /* phase 2 - get the inode info...
     1254      */
     1255   
     1256     dfcmd = "df -iPl".
     1257   
     1258     input stream inStrm through value( dfcmd ).
     1259   
     1260     import stream inStrm ^.       /* eat the header line  */
     1261   
     1262     repeat:
     1263   
     1264       assign
     1265         inline   = ""
     1266         xmnt     = ""
     1267         xdev     = ""
     1268         xinodes  =  0
     1269         xifree   =  0
     1270       .
     1271   
     1272       import stream inStrm inline no-error.
     1273       xdev = inline[1].
     1274       if inline[2] > "" then
     1275         assign
     1276           xmnt     = inline[6]
     1277           xinodes  =  decimal( inline[2] )
     1278           xifree   =  decimal( inline[4] )
     1279         no-error.
     1280        else               /* the line is split */
     1281         do:
     1282           import stream inStrm inline no-error.
     1283           assign
     1284             xmnt     = inline[5]
     1285             xinodes  =  decimal( inline[1] )
     1286             xifree   =  decimal( inline[3] )
     1287           no-error.
     1288         end.
     1289   
     1290       if xmnt = "" or error-status:num-messages > 0 then next.
     1291   
     1292       run update_inodes( xmnt, xdev, xinodes, xifree ).
     1293   
     1294     end.
     1295   
     1296     input stream inStrm close.
     1297   
     1298     return.
     1299   
     1300   end.
     1301   
     1302   procedure update_diskFree:
     1303   
     1304     define input parameter p_mnt      as character no-undo.
     1305     define input parameter p_dev      as character no-undo.
     1306     define input parameter p_fs-size  as decimal   no-undo.
     1307     define input parameter p_fs-free  as decimal   no-undo.
     1308     define input parameter p_thold    as decimal   no-undo.
     1309     define input parameter p_inodes   as decimal   no-undo.
     1310     define input parameter p_ifree    as decimal   no-undo.
     1311   
     1312     find tt_diskFree where tt_diskFree.mnt = p_mnt no-error.
     1313   
     1314     /* message p_mnt available( tt_diskFree ) view-as alert-box.
     1315      */
     1316   
     1317     if available tt_diskFree then
     1318       do:
     1319   
     1320         assign
     1321           tt_diskFree.xvalid       = yes                          /* is this xid active?          */
     1322           tt_diskFree.mnt          = p_mnt
     1323           tt_diskFree.dev          = p_dev
     1324           tt_diskFree.threshold[1] = p_thold
     1325           tt_diskFree.fs-size      = p_fs-size / ( 1024 * 1024 )
     1326           tt_diskFree.fs-free      = p_fs-free / ( 1024 * 1024 )
     1327           tt_diskFree.fs-grow[3]   = p_fs-free
     1328           tt_diskFree.inode-num    = p_inodes
     1329           tt_diskFree.inode-free   = p_ifree
     1330           tt_diskFree.inPctUsed    = (( p_inodes - p_ifree ) / p_inodes ) * 100
     1331         .
     1332   
     1333       end.
     1334      else
     1335       do:
     1336   
     1337         create tt_diskFree.
     1338         assign
     1339           zid = zid + 1
     1340           tt_diskFree.xid          = zid
     1341           tt_diskFree.xvalid       = yes                          /* is this xid active?          */
     1342           tt_diskFree.mnt          = p_mnt
     1343           tt_diskFree.dev          = p_dev
     1344           tt_diskFree.threshold[1] = p_thold
     1345           tt_diskFree.fs-size      = p_fs-size / ( 1024 * 1024 )
     1346           tt_diskFree.fs-free      = p_fs-free / ( 1024 * 1024 )
     1347           
     1348   /*******************************************************************************
     1349    *******************************************************************************
     1350    **                                                                           **
     1351    **                                                                           **
     1352    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
     1353    **  http://www.greenfieldtech.com                                            **
     1354    **                                                                           **
     1355    **  ProTop is free software; you can redistribute it and/or modify it        **
     1356    **  under the terms of the GNU General Public License (GPL) as published     **
     1357    **  by the Free Software Foundation; either version 2 of the License, or     **
     1358    **  at your option) any later version.                                       **
     1359    **                                                                           **
     1360    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
     1361    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
     1362    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
     1363    **  for more details.                                                        **
     1364    **                                                                           **
     1365    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
     1366    **  of use and alternative licensing options for this software.              **
     1367    **                                                                           **
     1368    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
     1369    **                                                                           **
     1370    **  See http://www.fsf.org for more information about the GPL.               **
     1371    **                                                                           **
     1372    **                                                                           **
     1373    *******************************************************************************
     1374    *******************************************************************************
     1375    *
     1376    * init-xrec.i
     1377    *
     1378    * {1} = base field
     1379    * {2} = value to initialze array with
     1380    *
     1381    * [1] = base
     1382    * [2] = last (previous cumulative value)
     1383    * [3] = this
     1384    * [4] = cumulative
     1385    * [5] = interval
     1386    *
     1387    */
     1388   
     1389   tt_diskFree.fs-grow[1] = p_fs-free
     1390   tt_diskFree.fs-grow[2] = p_fs-free
     1391   tt_diskFree.fs-grow[3] = p_fs-free
     1392    
     1393           tt_diskFree.inode-num    = p_inodes
     1394           tt_diskFree.inode-free   = p_ifree
     1395           tt_diskFree.inPctUsed    = (( p_inodes - p_ifree ) / p_inodes ) * 100
     1396         .
     1397   
     1398       end.
     1399   
     1400     if tt_diskFree.inPctUsed = ? then tt_diskFree.inPctUsed = 0.
     1401   
     1402     return.
     1403   
     1404   end.
     1405   
     1406   procedure update_inodes:
     1407   
     1408     define input parameter p_mnt      as character no-undo.
     1409     define input parameter p_dev      as character no-undo.
     1410     define input parameter p_inodes   as decimal   no-undo.
     1411     define input parameter p_ifree    as decimal   no-undo.
     1412   
     1413     find tt_diskFree where tt_diskFree.mnt = p_mnt no-error.
     1414   
     1415     /* message p_mnt available( tt_diskFree ) view-as alert-box.
     1416      */
     1417   
     1418     if available tt_diskFree then
     1419       do:
     1420   
     1421         assign
     1422           tt_diskFree.xvalid       = yes                          /* is this xid active?          */
     1423           tt_diskFree.mnt          = p_mnt
     1424           tt_diskFree.dev          = p_dev
     1425           tt_diskFree.inode-num    = p_inodes
     1426           tt_diskFree.inode-free   = p_ifree
     1427           tt_diskFree.inPctUsed    = (( p_inodes - p_ifree ) / p_inodes ) * 100
     1428         .
     1429   
     1430       end.
     1431      else
     1432       do:
     1433   
     1434         create tt_diskFree.
     1435         assign
     1436           zid = zid + 1
     1437           tt_diskFree.xid          = zid
     1438           tt_diskFree.xvalid       = yes                          /* is this xid active?          */
     1439           tt_diskFree.mnt          = p_mnt
     1440           tt_diskFree.dev          = p_dev
     1441           tt_diskFree.inode-num    = p_inodes
     1442           tt_diskFree.inode-free   = p_ifree
     1443           tt_diskFree.inPctUsed    = (( p_inodes - p_ifree ) / p_inodes ) * 100
     1444         .
     1445   
     1446       end.
     1447   
     1448     if tt_diskFree.inPctUsed = ? then tt_diskFree.inPctUsed = 0.
     1449   
     1450     return.
     1451   
     1452   end.
     1453   
     1454   procedure age_diskFree:
     1455   
     1456     for each tt_diskFree:
     1457       assign
     1458         
     1459   /*******************************************************************************
     1460    *******************************************************************************
     1461    **                                                                           **
     1462    **                                                                           **
     1463    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
     1464    **  http://www.greenfieldtech.com                                            **
     1465    **                                                                           **
     1466    **  ProTop is free software; you can redistribute it and/or modify it        **
     1467    **  under the terms of the GNU General Public License (GPL) as published     **
     1468    **  by the Free Software Foundation; either version 2 of the License, or     **
     1469    **  at your option) any later version.                                       **
     1470    **                                                                           **
     1471    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
     1472    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
     1473    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
     1474    **  for more details.                                                        **
     1475    **                                                                           **
     1476    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
     1477    **  of use and alternative licensing options for this software.              **
     1478    **                                                                           **
     1479    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
     1480    **                                                                           **
     1481    **  See http://www.fsf.org for more information about the GPL.               **
     1482    **                                                                           **
     1483    **                                                                           **
     1484    *******************************************************************************
     1485    *******************************************************************************
     1486    *
     1487    * upd-xrec.i
     1488    *
     1489    * {1} = base field
     1490    * {2} = value to update metrics with
     1491    *
     1492    * [1] = base
     1493    * [2] = last (previous cumulative value)
     1494    * [3] = this
     1495    * [4] = cumulative
     1496    * [5] = interval
     1497    *
     1498    */
     1499   
     1500   tt_diskFree.fs-grow[3] = tt_diskFree.fs-grow[3]
     1501   tt_diskFree.fs-grow[4] = tt_diskFree.fs-grow[3] - tt_diskFree.fs-grow[1]
     1502   tt_diskFree.fs-grow[5] = tt_diskFree.fs-grow[3] - tt_diskFree.fs-grow[2]
     1503   tt_diskFree.fs-grow[2] = tt_diskFree.fs-grow[3]
     1504    
     1505         tt_diskFree.fsPctUsed  = 100 * (( tt_diskFree.fs-size - tt_diskFree.fs-free ) / tt_diskFree.fs-size )
     1506         tt_diskFree.fsPctUsed  = ( if tt_diskFree.fsPctUsed = ? then 0 else tt_diskFree.fsPctUsed )
     1507       .
     1508     end.
     1509   
     1510     return.
     1511   
     1512   end.
     1513   
     1514   /* initialize
     1515    *
     1516    */
     1517   
     1518   procedure mon-init:
     1519   
     1520     define variable t as decimal no-undo.
     1521     define variable xorder as character no-undo.
     1522     define variable xthold as character no-undo.
     1523   
     1524     define variable cfgFileName as character no-undo.
     1525   
     1526     empty temp-table tt_diskFree.
     1527     empty temp-table tt_df_cfg.
     1528   
     1529     if opsys = "WIN32" then
     1530       osName = "Windows".
     1531      else
     1532       do:
     1533         input stream inStrm through value( "uname -a" ).
     1534         import stream inStrm osName.
     1535         input stream inStrm close.
     1536       end.
     1537   
     1538     run findCfgName( "df", input-output cfgFileName ).
     1539   
     1540     file-info:file-name = cfgFileName.
     1541     if file-info:full-pathname = ? then return.
     1542   
     1543     input stream inStrm from value( file-info:full-pathname ).
     1544   
     1545     repeat on endkey undo, leave:
     1546   
     1547       assign
     1548         xorder = ""
     1549         xthold = ""
     1550       .
     1551   
     1552       create tt_df_cfg.
     1553       import stream inStrm
     1554         xorder
     1555         tt_df_cfg.xtype
     1556         tt_df_cfg.pattern
     1557         xthold
     1558       .
     1559   
     1560       if xorder begins "#" or xorder = "" then
     1561         do:
     1562           delete tt_df_cfg.
     1563           next.
     1564         end.
     1565   
     1566       assign
     1567         tt_df_cfg.order = integer( xorder )
     1568         tt_df_cfg.threshold = decimal( xthold )
     1569       .
     1570   
     1571     end.
     1572   
     1573     delete tt_df_cfg.     /* delete the last line read -- it is always bogus.     */
     1574    
     1575     input stream inStrm close.
     1576   
     1577     find tt_df_cfg no-lock where tt_df_cfg.xtype = "default" no-error.
     1578     if available tt_df_cfg then
     1579       do:
     1580         t = tt_df_cfg.threshold.
     1581         for each tt_df_cfg exclusive-lock:
     1582           if tt_df_cfg.threshold = 0 or tt_df_cfg.threshold = ? then tt_df_cfg.threshold = t.
     1583         end.
     1584       end.
     1585   
     1586     /* do NOT shell out and get "df" info at startup!
     1587      *
     1588      * if a filesystem is "hung" in the kernel then doing this will also hang ProTop and
     1589      * it will not be obvious where the problem is -- this is very difficult to track
     1590      * down!
     1591      *
     1592      *
     1593      *  run value( "getDF" + osName ).
     1594      *  run value( "getMount" + osName ).
     1595      *
     1596      */
     1597   
     1598     return.
     1599   
     1600   end.
     1601   
     1602   /* update
     1603    *
     1604    */
     1605   
     1606   procedure mon-update:
     1607   
     1608     define input parameter argList as character no-undo.
     1609   
     1610     run value( "getDF" + osName ).
     1611     run value( "getMount" + osName ).
     1612   
     1613     run age_diskFree.
     1614   
     1615     publish "resizeBrowse" ( "df", zid ).
     1616   
     1617     add2ds( temp-table tt_diskFree:default-buffer-handle ).
     1618   
     1619     return.
     1620   
     1621   end.
     1622   
     1623   return.
