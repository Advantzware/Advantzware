        1   /*******************************************************************************
        2    *******************************************************************************
        3    **                                                                           **
        4    **                                                                           **
        5    **  Copyright 2003-2012 Tom Bascom, Greenfield Technologies                  **
        6    **  http://www.greenfieldtech.com                                            **
        7    **                                                                           **
        8    **  ProTop is free software; you can redistribute it and/or modify it        **
        9    **  under the terms of the GNU General Public License (GPL) as published     **
       10    **  by the Free Software Foundation; either version 2 of the License, or     **
       11    **  at your option) any later version.                                       **
       12    **                                                                           **
       13    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       14    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       15    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       16    **  for more details.                                                        **
       17    **                                                                           **
       18    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       19    **  of use and alternative licensing options for this software.              **
       20    **                                                                           **
       21    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       22    **                                                                           **
       23    **  See http://www.fsf.org for more information about the GPL.               **
       24    **                                                                           **
       25    **                                                                           **
       26    *******************************************************************************
       27    *******************************************************************************
       28    *
       29    * brokers.p
       30    *
       31    *
       32    * broker configuration
       33    *
       34    *
       35    * Author:
       36    *
       37    *      Tom Bascom, Greenfield Technologies
       38    *      http://www.greenfieldtech.com
       39    *      September 5, 2003
       40    *
       41    */
       42   
       43   
       44   /*******************************************************************************
       45    *******************************************************************************
       46    **                                                                           **
       47    **                                                                           **
       48    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       49    **  http://www.greenfieldtech.com                                            **
       50    **                                                                           **
       51    **  ProTop is free software; you can redistribute it and/or modify it        **
       52    **  under the terms of the GNU General Public License (GPL) as published     **
       53    **  by the Free Software Foundation; either version 2 of the License, or     **
       54    **  at your option) any later version.                                       **
       55    **                                                                           **
       56    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       57    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       58    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       59    **  for more details.                                                        **
       60    **                                                                           **
       61    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       62    **  of use and alternative licensing options for this software.              **
       63    **                                                                           **
       64    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       65    **                                                                           **
       66    **  See http://www.fsf.org for more information about the GPL.               **
       67    **                                                                           **
       68    **                                                                           **
       69    *******************************************************************************
       70    *******************************************************************************
       71    *
       72    * protop.i
       73    *
       74    * Header file for protop family of programs
       75    *
       76    *
       77    * Known Bugs & Issues:
       78    *
       79    *
       80    * To Do:
       81    *
       82    *
       83    * Author:
       84    *
       85    *      Tom Bascom, Greenfield Technologies
       86    *      http://www.greenfieldtech.com
       87    *      August 28, 2003
       88    *
       89    */
       90   
       91   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
       92   &global-define  FASTLOCK        true
       93   &ELSE
       94   &global-define  FASTLOCK        false
       95   &ENDIF
       96   
       97   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
       98   &global-define  OE11            "yes"
       99   &global-define  xDEBUGTT        false
      100   &ENDIF
      101   
      102   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
      103   &global-define  NOSERIALIZE     serialize-hidden
      104   &ENDIF
      105   
      106   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
      107   &global-define  BIGINT          int64
      108   &ELSE
      109   &global-define  BIGINT          decimal
      110   &ENDIF
      111   
      112   
      113   /* lib/v9.i
      114    *
      115    */
      116   
      117   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
      118   &global-define  CPYLOB  "no"
      119   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
      120   &global-define  LNGCR   character
      121   &global-define  DTZ     integer
      122   &global-define  BIGINT  decimal
      123   &ELSE
      124   &global-define  OE10    "yes"
      125   &global-define  NOW     now
      126   &global-define  LNGCR   longchar
      127   &global-define  DTZ     datetime-tz
      128   &global-define  BIGINT  int64
      129   &ENDIF
      130    
      131   
      132   /* use extended _connect fields: -client, -cache*
      133    */
      134   
      135   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      136   &global-define  CONNECTX        "yes"
      137   &ELSE
      138   &global-define  CONNECTX        "no"
      139   &ENDIF
      140   
      141   define stream inStrm.
      142   
      143   define new global shared variable dbgMode as integer no-undo initial 1.
      144   
      145   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      146    *
      147    * someday everyone will have OO and I will replace these with a gsv class
      148    * or something of that ilk
      149    *
      150    */
      151   
      152   define new global shared variable pt_shortname   as character no-undo.
      153   define new global shared variable pt_uniqName    as character no-undo.
      154   define new global shared variable pt_server      as character no-undo.
      155   define new global shared variable pt_resrcType   as character no-undo.
      156   
      157   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      158   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      159   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      160   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      161   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      162   
      163   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      164   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      165   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      166   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      167   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      168   define new global shared variable pt_ioFileName  as character no-undo.
      169   define new global shared variable pt_dfCmd       as character no-undo.
      170   
      171   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      172   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      173   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      174   
      175   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      176   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      177   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      178   
      179   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      180   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      181   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      182   
      183   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      184   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      185   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      186   
      187   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      188   
      189   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      190   
      191   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      192   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      193   
      194   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      195    * 
      196    */
      197   
      198   define new global shared variable stime as integer no-undo.                     /* start time                           */
      199   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      200   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      201   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      202   
      203   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      204   
      205                                                                                   /* corresponding to base checkpoint#    */
      206   /** Global Shared Temp Table Definitions
      207    **
      208    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      209    ** And a shared temp-table is logically the same as a db table so who really cares?
      210    **
      211    **/
      212   
      213   /* cache _File and _Index records so that we don't keep hitting the db to translate
      214    */
      215   
      216   define new global shared temp-table tt_tbl no-undo
      217     field xid      as integer                                             /* _File._File-Num              */
      218     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      219     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      220     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      221     field tblname  as character                                           /* _File._File-Name             */
      222     index xid-idx is unique primary xid.
      223   
      224   define new global shared temp-table tt_idx no-undo
      225     field xid      as integer                                             /* _Index._Idx-Num              */
      226     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      227     field idxname  as character                                           /* _Index._Idx-Name             */
      228     field idxnote  as character
      229     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      230     field tblnum   as integer                                             /* _File._File-Num              */
      231     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      232     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      233     field tblname  as character                                           /* _File._File-Name             */
      234     index xid-idx is unique primary xid.
      235   
      236   define new global shared temp-table tt_areaExtent no-undo
      237     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      238     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      239   
      240     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      241     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      242     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      243   
      244     index ae-idx is unique primary areaNum extNum.
      245   
      246   define new global shared temp-table tt_area no-undo
      247     field xid      as integer    format ">>>9"
      248     field SANum    as integer    format ">>>9"        label "#"
      249     field areaPool as character  format "x(2)"        label "BX"
      250   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      251     field SAName   as character  format "x(30)"       label "Area Name"
      252     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      253     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      254     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      255     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      256     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      257     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      258     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      259   
      260     field blkszkb as integer     format ">>9"         label "BSZ"
      261     field rpb     as integer     format ">>9"         label "RPB"
      262     field clstrsz as integer     format ">>9"         label "CSZ"
      263   
      264     field numTbls as integer     format ">>>>9"       label "#Tbls"
      265     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      266     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      267   
      268     field numExts as integer     format ">>>>9"       label "#Exts"
      269     field hasVar  as logical     format "Yes/No"      label "Var?"
      270   
      271     field xnote   as character   format "x"           label "*"
      272   
      273     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      274     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      275   
      276     index pctAlloc-idx is primary pctAlloc descending
      277     index pctLastX-idx pctLastX pctAlloc descending
      278     index allocGB-idx allocGB descending
      279     index totGB-idx totGB descending
      280     index xid-idx is unique xid
      281     index SANum-idx is unique SANum
      282     index SAName-idx is unique SAName
      283   .
      284   
      285   *** Encrypted Source ***
      286   *** Encrypted Source ***
      287   *** Encrypted Source ***
      288   *** Encrypted Source ***
      289   *** Encrypted Source ***
      290   *** Encrypted Source ***
      291   *** Encrypted Source ***
      292   *** Encrypted Source ***
      293   *** Encrypted Source ***
      294   *** Encrypted Source ***
      295   *** Encrypted Source ***
      296   *** Encrypted Source ***
      297   *** Encrypted Source ***
      298   *** Encrypted Source ***
      299   *** Encrypted Source ***
      300   *** Encrypted Source ***
      301   *** Encrypted Source ***
      302   *** Encrypted Source ***
      303   *** Encrypted Source ***
      304   *** Encrypted Source ***
      305   *** Encrypted Source ***
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319   *** Encrypted Source ***
      320   *** Encrypted Source ***
      321   *** Encrypted Source ***
      322   *** Encrypted Source ***
      323   *** Encrypted Source ***
      324   *** Encrypted Source ***
      325   *** Encrypted Source ***
      326   *** Encrypted Source ***
      327   *** Encrypted Source ***
      328   *** Encrypted Source ***
      329   *** Encrypted Source ***
      330   *** Encrypted Source ***
      331   *** Encrypted Source ***
      332   *** Encrypted Source ***
      333   *** Encrypted Source ***
      334   *** Encrypted Source ***
      335   *** Encrypted Source ***
      336   *** Encrypted Source ***
      337   *** Encrypted Source ***
      338   *** Encrypted Source ***
      339   *** Encrypted Source ***
      340   *** Encrypted Source ***
      341   *** Encrypted Source ***
      342   *** Encrypted Source ***
      343   *** Encrypted Source ***
      344   *** Encrypted Source ***
      345   *** Encrypted Source ***
      346   *** Encrypted Source ***
      347   *** Encrypted Source ***
      348   *** Encrypted Source ***
      349   *** Encrypted Source ***
      350   *** Encrypted Source ***
      351   *** Encrypted Source ***
      352   *** Encrypted Source ***
      353   *** Encrypted Source ***
      354   *** Encrypted Source ***
      355    
      356   
      357   /*******************************************************************************
      358    *******************************************************************************
      359    **                                                                           **
      360    **                                                                           **
      361    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      362    **  http://www.greenfieldtech.com                                            **
      363    **                                                                           **
      364    **  ProTop is free software; you can redistribute it and/or modify it        **
      365    **  under the terms of the GNU General Public License (GPL) as published     **
      366    **  by the Free Software Foundation; either version 2 of the License, or     **
      367    **  at your option) any later version.                                       **
      368    **                                                                           **
      369    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      370    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      371    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      372    **  for more details.                                                        **
      373    **                                                                           **
      374    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      375    **  of use and alternative licensing options for this software.              **
      376    **                                                                           **
      377    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      378    **                                                                           **
      379    **  See http://www.fsf.org for more information about the GPL.               **
      380    **                                                                           **
      381    **                                                                           **
      382    *******************************************************************************
      383    *******************************************************************************
      384    *
      385    * protoplib.i
      386    *
      387    * ProTop infrastructure library definitions
      388    *
      389    */
      390   
      391   function uDateTime returns integer () in super.
      392   function string2uDateTime returns integer( input p_text as character ) in super.
      393   function searchDir returns character ( input xDir as character ) in super.
      394   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      395   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      396   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      397   function myPID returns character () in super.
      398   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      399   
      400   /* end protoplib.i */
      401    
      402   
      403   /*******************************************************************************
      404    *******************************************************************************
      405    **                                                                           **
      406    **                                                                           **
      407    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      408    **  http://www.greenfieldtech.com                                            **
      409    **                                                                           **
      410    **  ProTop is free software; you can redistribute it and/or modify it        **
      411    **  under the terms of the GNU General Public License (GPL) as published     **
      412    **  by the Free Software Foundation; either version 2 of the License, or     **
      413    **  at your option) any later version.                                       **
      414    **                                                                           **
      415    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      416    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      417    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      418    **  for more details.                                                        **
      419    **                                                                           **
      420    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      421    **  of use and alternative licensing options for this software.              **
      422    **                                                                           **
      423    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      424    **                                                                           **
      425    **  See http://www.fsf.org for more information about the GPL.               **
      426    **                                                                           **
      427    **                                                                           **
      428    *******************************************************************************
      429    *******************************************************************************
      430    *
      431    * vstlib.i
      432    *
      433    * VST library definitions
      434    *
      435    */
      436   
      437   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      438   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      439   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      440   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      441   
      442   function connectFlags returns character ( input cnxId as integer ) in super.
      443   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      444   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      445   
      446   function isAIEnabled returns logical () in super.
      447   function isReplSource returns logical () in super.
      448   function isReplTarget returns logical () in super.
      449   function isBackupRunning returns logical () in super.
      450   function isWorkgroup returns logical () in super.
      451   
      452   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      453   
      454   /* end vstlib.i */
      455    
      456   
      457   function add2ds returns logical ( input h as handle ) in super.
      458   function getTempTableHandle returns handle ( input n as character ) in super.
      459   
      460   /* end protop.i */
      461    
      462   
      463   /*******************************************************************************
      464    *******************************************************************************
      465    **                                                                           **
      466    **                                                                           **
      467    **  Copyright 2003-2012 Tom Bascom, Greenfield Technologies                  **
      468    **  http://www.greenfieldtech.com                                            **
      469    **                                                                           **
      470    **  ProTop is free software; you can redistribute it and/or modify it        **
      471    **  under the terms of the GNU General Public License (GPL) as published     **
      472    **  by the Free Software Foundation; either version 2 of the License, or     **
      473    **  at your option) any later version.                                       **
      474    **                                                                           **
      475    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      476    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      477    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      478    **  for more details.                                                        **
      479    **                                                                           **
      480    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      481    **  of use and alternative licensing options for this software.              **
      482    **                                                                           **
      483    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      484    **                                                                           **
      485    **  See http://www.fsf.org for more information about the GPL.               **
      486    **                                                                           **
      487    **                                                                           **
      488    *******************************************************************************
      489    *******************************************************************************
      490    *
      491    * tick.i
      492    *
      493    *
      494    * common routine to handle "clock ticks"
      495    *
      496    *
      497    * Author:
      498    *
      499    *      Tom Bascom, Greenfield Technologies
      500    *      http://www.greenfieldtech.com
      501    *      January 21, 2012
      502    *
      503    */
      504   
      505   
      506   /* lib/v9.i
      507    *
      508    */
      509   
      510   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
      511   &global-define  CPYLOB  "no"
      512   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
      513   &global-define  LNGCR   character
      514   &global-define  DTZ     integer
      515   &global-define  BIGINT  decimal
      516   &ELSE
      517   &global-define  OE10    "yes"
      518   &global-define  NOW     now
      519   &global-define  LNGCR   longchar
      520   &global-define  DTZ     datetime-tz
      521   &global-define  BIGINT  int64
      522   &ENDIF
      523    
      524   
      525   define new global shared variable rawMode  as integer no-undo initial 5.
      526   define new global shared variable timeMode as integer no-undo initial 2.
      527   
      528   define new global shared variable x as integer no-undo initial 5.
      529   define new global shared variable z as decimal no-undo.
      530   
      531   define variable y as decimal no-undo.
      532   
      533   define variable initTick as integer no-undo.
      534   define variable prevTick as integer no-undo.
      535   
      536   
      537   procedure updTick:
      538   
      539   &IF DEFINED( OE10 ) &THEN
      540     if initTick = 0 then initTick = mtime.
      541     assign
      542       x = rawMode /* ( if rawMode then 4 else 5 ) */
      543       z = mtime - prevTick
      544       z = ( if z >= 0 then z else 86400000 - prevTick + mtime )   /* handle rolling over midnight */
      545       z = z / 1000
      546       y = mtime - initTick
      547       y = y / 1000
      548       prevTick = mtime
      549     .
      550   &ELSE
      551     if initTick = 0 then initTick = etime.
      552     assign
      553       x = rawMode /* ( if rawMode then 4 else 5 ) */
      554       z = etime - prevTick
      555       z = ( if z >= 0 then z else 5000 )   /* etime doesn't rollover at midnite -- but a mistaken etime(yes) somewhere would be bad... */
      556       z = z / 1000
      557       y = etime - initTick
      558       y = y / 1000
      559       prevTick = etime
      560     .
      561   &ENDIF
      562   
      563     /* if rawMode <> 5 then z = 1. */
      564   
      565     if timeMode = 1 then z = 1.
      566   
      567     return.
      568   
      569   end.
      570   
      571   /* end tick.i */
      572    
      573   
      574   define output parameter dcDescription as character no-undo initial "BrokerConfig".
      575   
      576   define temp-table tt_brokerConfig no-undo
      577     field xid           as integer   format ">>9"             label "Id"
      578     field brokerType    as character format "x(5)"            label "Type"
      579     field brokerIPver   as character format "x(5)"            label "IPver"
      580     field brokerPID     as integer   format ">>>>>>>9"        label "PID"
      581     field brokerPort    as integer   format ">>>>9"           label "-S"
      582     field brokermin     as integer   format ">>>>9"           label "-minport"
      583     field brokermax     as integer   format ">>>>9"           label "-maxport"
      584     field brokerPCT     as integer   format ">>>>9"           label "-PendCx"
      585     field brokerMm      as integer   format ">>>>9"           label "-Mm"
      586     field brokerMpb     as integer   format ">>>>9"           label "-Mpb"
      587     field brokerMa      as integer   format ">>>>9"           label "-Ma"
      588     field brokerMi      as integer   format ">>>>9"           label "-Mi"
      589   
      590     field brokerCnx     as integer   format ">>>>9"           label "Cnx"
      591     field brokerCnxPct  as decimal   format  ">>9%"           label "Cnx%"
      592   
      593     field brokerSQLttlg as character format "x(6)"            label "SQLTrc"
      594     field brokerSQLwup  as character format "x(6)"            label "SQLWUp"
      595   
      596     field brokerSQLcurs as integer format ">>>>>>>9"          label "SQLcurs"
      597     field brokerSQLstck as integer format ">>>>>>>9"          label "SQLstck"
      598     field brokerSQLstmt as integer format ">>>>>>>9"          label "SQLstmt"
      599     field brokerSQLtmpb as integer format ">>>>>>>9"          label "SQLtmpb"
      600     field brokerSQLtmpd as integer format ">>>>>>>9"          label "SQLtmpd"
      601     field brokerSQLtmpz as integer format ">>>>>>>9"          label "SQLtmpz"
      602   
      603     index brokerType-idx is unique primary brokerType xid
      604     index xid-idx        is unique xid
      605   .
      606   
      607   
      608   /* lib/dumpTT.i
      609    *
      610    * simplified to a single line -- include should be eliminated.
      611    *
      612    */
      613   
      614   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 &THEN
      615   /*** +++
      616   file-info:file-name = "./ptdefs".
      617   if file-info:full-pathname <> ? and index( file-info:file-type, "d" ) > 0 and index( file-info:file-type, "w" ) > 0 then
      618     do:
      619   
      620       file-info:file-name = "./ptdefs/{1}.xsd".
      621   
      622       if true /* file-info:full-pathname = ? or file-info:file-size = 0 */ then
      623         do:
      624   
      625           temp-table {1}:write-xmlschema(
      626             "file",
      627   /*        substitute( "ptdefs/&1.xsd", "{1}" ), */
      628   /*        "./ptdefs/{1}.xsd", */
      629             ( if opsys = "unix" then "./ptdefs/{1}.xsd" else ".~\ptdefs~\{1}.xsd" ),
      630             true
      631   
      632         &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2
      633         &THEN
      634             , ?, ?, ?
      635         &ENDIF
      636   
      637       ).
      638   
      639       end.
      640   
      641     end.
      642    +++ ***/
      643   &ENDIF
      644    
      645   
      646   /* offsets for particular parameters -- these may vary by release
      647    */
      648   
      649   define variable svt   as integer no-undo.
      650   define variable mpb   as integer no-undo.
      651   define variable mm    as integer no-undo.
      652   define variable ma    as integer no-undo.
      653   define variable mi    as integer no-undo.
      654   define variable minp  as integer no-undo.
      655   define variable maxp  as integer no-undo.
      656   define variable ipv   as integer no-undo.
      657   define variable pct   as integer no-undo.
      658   
      659   define variable sqlttl as integer no-undo.
      660   define variable sqlwu  as integer no-undo.
      661   define variable sqlc   as integer no-undo.
      662   define variable sqls   as integer no-undo.
      663   define variable sqlsc  as integer no-undo.
      664   define variable sqltsb as integer no-undo.
      665   define variable sqltsd as integer no-undo.
      666   define variable sqltsp as integer no-undo.
      667   
      668   define buffer broker for _servers.
      669   
      670   
      671   define variable hasSrvParam as logical no-undo.
      672   
      673   procedure chkSrvParam:
      674   
      675     find _file no-lock where _file-name = "_servers" no-error.
      676     if available _file then find _field no-lock of _file where _field-name = "_srvParam-name" no-error.
      677     hasSrvParam = available( _field ).
      678   
      679   end.
      680   
      681   
      682   procedure mon-init:
      683   
      684     define variable i as integer   no-undo.
      685     define variable p as character no-undo.
      686   
      687     run chkSrvParam.
      688   
      689     if hasSrvParam = yes then
      690       do:
      691   
      692         find first _servers no-lock where _servers._server-type = "login" no-error.
      693         if available _servers then
      694           do i = 1 to 64:
      695   
      696             p = buffer _servers:handle:buffer-field( "_srvParam-name" ):buffer-value(i).
      697   
      698             case p:
      699   
      700               when "-ServerType"      then svt  = i.
      701               when "-Mpb"             then mpb  = i.
      702               when "-Mm"              then mm   = i.
      703               when "-Ma"              then ma   = i.
      704               when "-Mi"              then mi   = i.
      705               when "-minport"         then minp = i.
      706               when "-maxport"         then maxp = i.
      707               when "-ipver"           then ipv  = i.
      708               when "-PendConnTimeout" then pct  = i.
      709   
      710               when "-SQLTruncateTooLarge"  then sqlttl = i.
      711               when "-SQLWidthUpdate"       then sqlwu  = i.
      712               when "-SQLCursors"           then sqlc   = i.
      713               when "-SQLStack"             then sqls   = i.
      714               when "-SQLStmtCache"         then sqlsc  = i.
      715               when "-SQLTempStoreBuff"     then sqltsb = i.
      716               when "-SQLTempStoreDisk"     then sqltsd = i.
      717               when "-SQLTempStorePageSize" then sqltsp = i.
      718   
      719             end.
      720   
      721           end.
      722   
      723       end.
      724   
      725     return.
      726   
      727   end.
      728   
      729   
      730   procedure mon-update:
      731   
      732     define input parameter argList as character no-undo.
      733   
      734     define variable numBrokers as integer no-undo.
      735   
      736     run updTick.
      737   
      738     empty temp-table tt_brokerConfig.
      739   
      740     for each broker no-lock where broker._server-type = "login":
      741   
      742       numBrokers = numBrokers + 1.
      743   
      744       create tt_brokerConfig.
      745       assign
      746         xid         = broker._server-Id
      747         brokerPort  = broker._server-portnum
      748         brokerPID   = broker._server-pid
      749       .
      750   
      751       if hasSrvParam = yes then
      752         do:
      753   
      754           if svt  > 0 then brokerType  = buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(svt).
      755           if ipv  > 0 then brokerIPver = buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(ipv).
      756   
      757           if pct  > 0 then brokerPCT = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(pct) ) no-error.
      758           if mm   > 0 then brokerMm  = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(mm) ) no-error.
      759           if mpb  > 0 then brokerMpb = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(mpb) ) no-error.
      760           if ma   > 0 then brokerMa  = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(ma) ) no-error.
      761           if mi   > 0 then brokerMi  = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(mi) ) no-error.
      762           if minp > 0 then brokermin = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(minp) ) no-error.
      763           if maxp > 0 then brokermax = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(maxp) ) no-error.
      764   
      765           if sqlttl > 0 then brokerSQLttlg = buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(sqlttl).
      766           if sqlwu  > 0 then brokerSQLwup  = buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(sqlwu).
      767   
      768           if sqlc   > 0 then brokerSQLcurs = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(sqlc) ) no-error.
      769           if sqls   > 0 then brokerSQLstck = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(sqls) ) no-error.
      770           if sqlsc  > 0 then brokerSQLstmt = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(sqlsc) ) no-error.
      771           if sqltsb > 0 then brokerSQLtmpb = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(sqltsb) ) no-error.
      772           if sqltsd > 0 then brokerSQLtmpd = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(sqltsd) ) no-error.
      773           if sqltsp > 0 then brokerSQLtmpz = integer( buffer broker:handle:buffer-field( "_srvParam-value" ):buffer-value(sqltsp) ) no-error.
      774   
      775           brokerCnx = 0.  /* don't count self */
      776           for each _servers no-lock where integer( buffer _servers:handle:buffer-field( "_server-broker-pid" ):buffer-value ) = brokerPID:
      777             brokerCnx = brokerCnx + integer( buffer _servers:handle:buffer-field( "_server-currUsers" ):buffer-value ).
      778           end.
      779           brokerCnxPct = 100 * ( brokerCnx / ( brokerMpb * brokerMa )).
      780   
      781         end.
      782   
      783       if brokerPort <= 0 then brokerType = "SHM".
      784   
      785     end.
      786   
      787     publish "resizeBrowse" ( "brokerConfig", numBrokers ).
      788   
      789     add2ds( temp-table tt_brokerConfig:default-buffer-handle ).
      790   
      791     return.
      792   
      793   end.
      794   
      795   
      796   subscribe to "getBrokerType" anywhere run-procedure "getBrokerType".
      797   
      798   procedure getBrokerType:
      799   
      800     define input  parameter serverId   as integer   no-undo. 
      801     define output parameter brokerType as character no-undo. 
      802   
      803     brokerType = ?.
      804   
      805     if svt > 0 then
      806       do:
      807         find _servers no-lock where _servers._server-id = serverId no-error.
      808         if available _servers then
      809           brokerType  = buffer _servers:handle:buffer-field( "_srvParam-value" ):buffer-value(svt).
      810       end.
      811   
      812     return.
      813   
      814   end.
      815   
      816   return.
