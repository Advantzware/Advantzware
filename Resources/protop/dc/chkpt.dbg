        1   /*******************************************************************************
        2    *******************************************************************************
        3    **                                                                           **
        4    **                                                                           **
        5    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
        6    **  http://www.greenfieldtech.com                                            **
        7    **                                                                           **
        8    **  ProTop is free software; you can redistribute it and/or modify it        **
        9    **  under the terms of the GNU General Public License (GPL) as published     **
       10    **  by the Free Software Foundation; either version 2 of the License, or     **
       11    **  at your option) any later version.                                       **
       12    **                                                                           **
       13    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       14    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       15    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       16    **  for more details.                                                        **
       17    **                                                                           **
       18    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       19    **  of use and alternative licensing options for this software.              **
       20    **                                                                           **
       21    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       22    **                                                                           **
       23    **  See http://www.fsf.org for more information about the GPL.               **
       24    **                                                                           **
       25    **                                                                           **
       26    *******************************************************************************
       27    *******************************************************************************
       28    *
       29    * chkpt.p
       30    *
       31    *
       32    * Checkpoint History.
       33    *
       34    *
       35    * Author:
       36    *
       37    *      Tom Bascom, Greenfield Technologies
       38    *      http://www.greenfieldtech.com
       39    *      October 27, 2004
       40    *
       41    */
       42   
       43   /***
       44   
       45   Field name                      Data type       Description
       46   _Checkpoint-ApwQ                INT64           Number of buffers written by the APW queue and replaced on the least recently used (LRU) chain by APWs
       47   _Checkpoint-Bi-Writes           INT64           The number of BI buffers written to disk at checkpoint end
       48   _Checkpoint-Bi-Write-Time       DECIMAL         Time in seconds to write the BI buffers at checkpoint end
       49   _Checkpoint-Buffers             INT64           The number of database buffers checkpointed
       50   _Checkpoint-Cluster             INT64           The checkpoint current BI cluster number
       51   _Checkpoint-CptQ                INT64           Number of buffers written from the checkpoint queue by the APWs
       52   _Checkpoint-DB-Write-Time       DECIMAL         Time in seconds to write the buffers from the database buffer pool at checkpoint end
       53   _Checkpoint-Dirty               INT64           Number of modified buffers scheduled to be written
       54   _Checkpoint-Duration            DECIMAL         The time to do the housekeeping of the checkpoint. This includes the time to write the active recovery log buffers to disk, write any outstanding dirty buffers marked at the previous checkpoint, scan the database buffer pools for dirty buffers marking them as needing to be written to disk prior to the start of the next check point (putting them on the checkpoint queue) and to perform the file system synchronization (_Checkpoint-SyncTime)
       55   _Checkpoint-Flush               INT64           Number of database buffers written at the end of the checkpoint
       56   _Checkpoint-Len                 CHARACTER       The time required to complete the checkpoint. The checkpoint is not considered completed until all dirty buffers on the checkpoint queue have been written out. This is either done over time by the APWs between checkpoints or is forced at the next checkpoint (buffers flushed at checkpoint)
       57   _Checkpoint-Number              INT64           The number of this checkpoint
       58   _Checkpoint-Scan                INT64           Number of buffers written by the APWs during the scan cycle
       59   _Checkpoint-SyncTime            DECIMAL         The time to perform the file system synchronization of the checkpoint. (fdatasync() on UNIX systems, FlushFileBuffers() on Windows systems)
       60   _Checkpoint-Time                CHARACTER       Time the checkpoint began
       61   
       62    ***/
       63   
       64   
       65   /*******************************************************************************
       66    *******************************************************************************
       67    **                                                                           **
       68    **                                                                           **
       69    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
       70    **  http://www.greenfieldtech.com                                            **
       71    **                                                                           **
       72    **  ProTop is free software; you can redistribute it and/or modify it        **
       73    **  under the terms of the GNU General Public License (GPL) as published     **
       74    **  by the Free Software Foundation; either version 2 of the License, or     **
       75    **  at your option) any later version.                                       **
       76    **                                                                           **
       77    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
       78    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
       79    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
       80    **  for more details.                                                        **
       81    **                                                                           **
       82    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
       83    **  of use and alternative licensing options for this software.              **
       84    **                                                                           **
       85    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
       86    **                                                                           **
       87    **  See http://www.fsf.org for more information about the GPL.               **
       88    **                                                                           **
       89    **                                                                           **
       90    *******************************************************************************
       91    *******************************************************************************
       92    *
       93    * protop.i
       94    *
       95    * Header file for protop family of programs
       96    *
       97    *
       98    * Known Bugs & Issues:
       99    *
      100    *
      101    * To Do:
      102    *
      103    *
      104    * Author:
      105    *
      106    *      Tom Bascom, Greenfield Technologies
      107    *      http://www.greenfieldtech.com
      108    *      August 28, 2003
      109    *
      110    */
      111   
      112   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.4 &THEN
      113   &global-define  FASTLOCK        true
      114   &ELSE
      115   &global-define  FASTLOCK        false
      116   &ENDIF
      117   
      118   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 11.0 &THEN
      119   &global-define  OE11            "yes"
      120   &global-define  xDEBUGTT        false
      121   &ENDIF
      122   
      123   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2 AND PROVERSION >= "10.2B" &THEN
      124   &global-define  NOSERIALIZE     serialize-hidden
      125   &ENDIF
      126   
      127   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1B" &THEN
      128   &global-define  BIGINT          int64
      129   &ELSE
      130   &global-define  BIGINT          decimal
      131   &ENDIF
      132   
      133   
      134   /* lib/v9.i
      135    *
      136    */
      137   
      138   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) < 10.0 &THEN
      139   &global-define  CPYLOB  "no"
      140   &global-define  NOW     substitute( "&1 &2", today, string( time, "hh:mm:ss" ))
      141   &global-define  LNGCR   character
      142   &global-define  DTZ     integer
      143   &global-define  BIGINT  decimal
      144   &ELSE
      145   &global-define  OE10    "yes"
      146   &global-define  NOW     now
      147   &global-define  LNGCR   longchar
      148   &global-define  DTZ     datetime-tz
      149   &global-define  BIGINT  int64
      150   &ENDIF
      151    
      152   
      153   /* use extended _connect fields: -client, -cache*
      154    */
      155   
      156   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 AND PROVERSION >= "10.1C" &THEN
      157   &global-define  CONNECTX        "yes"
      158   &ELSE
      159   &global-define  CONNECTX        "no"
      160   &ENDIF
      161   
      162   define stream inStrm.
      163   
      164   define new global shared variable dbgMode as integer no-undo initial 1.
      165   
      166   /* The values for these are defined in etc/protop.cfg and set by lib/protop-cfg.p
      167    *
      168    * someday everyone will have OO and I will replace these with a gsv class
      169    * or something of that ilk
      170    *
      171    */
      172   
      173   define new global shared variable pt_shortname   as character no-undo.
      174   define new global shared variable pt_uniqName    as character no-undo.
      175   define new global shared variable pt_server      as character no-undo.
      176   define new global shared variable pt_resrcType   as character no-undo.
      177   
      178   define new global shared variable pt_tmpdir      as character no-undo initial "/tmp".
      179   define new global shared variable pt_logdir      as character no-undo initial "/tmp".
      180   define new global shared variable pt_rptdir      as character no-undo initial "/tmp".
      181   define new global shared variable pt_logname     as character no-undo initial "&5.&2.&3".
      182   define new global shared variable pt_mailcmd     as character no-undo initial 'mailx "-s &1" '.
      183   
      184   define new global shared variable pt_votrx       as integer   no-undo initial 1800.
      185   define new global shared variable pt_lktbllim    as integer   no-undo initial 0.
      186   define new global shared variable pt_bkupstale   as integer   no-undo initial 26.
      187   define new global shared variable pt_bogomips    as integer   no-undo initial 1000000.
      188   define new global shared variable pt_ioresp      as integer   no-undo initial 100.
      189   define new global shared variable pt_ioFileName  as character no-undo.
      190   define new global shared variable pt_dfCmd       as character no-undo.
      191   
      192   define new global shared variable pt_AICheckInterval   as integer no-undo initial 60.
      193   define new global shared variable pt_PICACheckInterval as integer no-undo initial 60.
      194   define new global shared variable pt_appsrvStuck       as integer no-undo initial 120.
      195   
      196   define new global shared variable pt_bibkupAlert as integer   no-undo.          /* alert on long bi backup phase                */
      197   define new global shared variable pt_bibkupAlarm as integer   no-undo.          /* alarm on long bi backup phase                */
      198   define new global shared variable pt_bibkupPage  as integer   no-undo.          /* page  on long bi backup phase                */
      199   
      200   define new global shared variable pt_bkupAlert   as integer   no-undo.          /* alert on long db backup                      */
      201   define new global shared variable pt_bkupAlarm   as integer   no-undo.          /* alarm on long db backup                      */
      202   define new global shared variable pt_bkupPage    as integer   no-undo.          /* page  on long db backup                      */
      203   
      204   define new global shared variable pt_userLock    as logical   no-undo.          /* enable _userLock  data?                      */
      205   define new global shared variable pt_doZippy     as logical   no-undo.          /* enable "user experience" (aka "zippy")?      */
      206   define new global shared variable pt_useRFUtil   as logical   no-undo.          /* use rfutil to gather after-imaging status?   */
      207   
      208   define new global shared variable pt_updAreaData as integer   no-undo.          /* how often should we report storage area xref details from dbanalys? */
      209   
      210   define new global shared variable pt_zoomTo      as integer no-undo.            /* new zoomed monInt                            */
      211   
      212   define new global shared variable ptDBName     as character no-undo.                    /* the db logical name          */
      213   define new global shared variable rowLimit     as integer   no-undo initial 100.        /* 50?                          */
      214   
      215   /* do-sumSample() manipulates these -- ugly, ugly, ugly... (obsolete?)
      216    * 
      217    */
      218   
      219   define new global shared variable stime as integer no-undo.                     /* start time                           */
      220   define new global shared variable ltime as integer no-undo.                     /* last time                            */
      221   define new global shared variable xtime as integer no-undo.                     /* total time                           */
      222   define new global shared variable itime as integer no-undo.                     /* iteration time                       */
      223   
      224   define new global shared variable chkp-base   as integer no-undo initial ?.     /* cover for the lack of a VST field    */
      225   
      226                                                                                   /* corresponding to base checkpoint#    */
      227   /** Global Shared Temp Table Definitions
      228    **
      229    ** Yup, they're shared.  But this stuff makes no sense across session boundaries anyway.
      230    ** And a shared temp-table is logically the same as a db table so who really cares?
      231    **
      232    **/
      233   
      234   /* cache _File and _Index records so that we don't keep hitting the db to translate
      235    */
      236   
      237   define new global shared temp-table tt_tbl no-undo
      238     field xid      as integer                                             /* _File._File-Num              */
      239     field tstatid  as integer                                             /* _TableStat._TableStat-Id     */
      240     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      241     field tblPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      242     field tblname  as character                                           /* _File._File-Name             */
      243     index xid-idx is unique primary xid.
      244   
      245   define new global shared temp-table tt_idx no-undo
      246     field xid      as integer                                             /* _Index._Idx-Num              */
      247     field istatid  as integer                                             /* _IndexStat._IndexStat-Id     */
      248     field idxname  as character                                           /* _Index._Idx-Name             */
      249     field idxnote  as character
      250     field idxRoot  as int64                                           /* _Storage-Object._Object-Root */
      251     field tblnum   as integer                                             /* _File._File-Num              */
      252     field areaNum  as integer                                             /* _Storage-Object._Area-Number */
      253     field idxPool  as character                                           /* get-bits( _object-attrib, 7, 1 ) = 1 */
      254     field tblname  as character                                           /* _File._File-Name             */
      255     index xid-idx is unique primary xid.
      256   
      257   define new global shared temp-table tt_areaExtent no-undo
      258     field areaNum  as integer                                             /* _areaExtent._Area-Number     */
      259     field extNum   as integer                                             /* _areaExtent._Extent-Number   */
      260   
      261     field extSize  as decimal                                             /* _areaExtent._Extent-Size     */
      262     field extType  as integer                                             /* _areaExtent._Extent-Type     */
      263     field extPath  as character                                           /* _areaExtent._Extent-Path     */
      264   
      265     index ae-idx is unique primary areaNum extNum.
      266   
      267   define new global shared temp-table tt_area no-undo
      268     field xid      as integer    format ">>>9"
      269     field SANum    as integer    format ">>>9"        label "#"
      270     field areaPool as character  format "x(2)"        label "BX"
      271   /*field areaStatus-Id as {&BIGINT} format ">>>9"    label "Id" */
      272     field SAName   as character  format "x(30)"       label "Area Name"
      273     field allocGB  as decimal    format ">>>>>9.99"   label "Allocated"
      274     field varGB    as decimal    format ">>>>>9.99"   label "Variable"
      275     field totGB    as decimal    format ">>>>>>9.99"  label "Tot GB"
      276     field hiGB     as decimal    format ">>>>>9.99"   label "Hi Water" serialize-hidden
      277     field freeGB   as decimal    format ">>>>>9.99"   label "Free GB"
      278     field pctAlloc as decimal    format ">>>>>9%"     label "%Alloc"
      279     field pctLastX as decimal    format ">>>>9%"      label "%LastX"
      280   
      281     field blkszkb as integer     format ">>9"         label "BSZ"
      282     field rpb     as integer     format ">>9"         label "RPB"
      283     field clstrsz as integer     format ">>9"         label "CSZ"
      284   
      285     field numTbls as integer     format ">>>>9"       label "#Tbls"
      286     field numIdxs as integer     format ">>>>9"       label "#Idxs"
      287     field numLOBs as integer     format ">>>>9"       label "#LOBs"
      288   
      289     field numExts as integer     format ">>>>9"       label "#Exts"
      290     field hasVar  as logical     format "Yes/No"      label "Var?"
      291   
      292     field xnote   as character   format "x"           label "*"
      293   
      294     field areaMaxPct as decimal  format ">>9.999%"    label "Max%"
      295     field idx3264    as decimal  format ">>9.999%"    label "Bug%"
      296   
      297     index pctAlloc-idx is primary pctAlloc descending
      298     index pctLastX-idx pctLastX pctAlloc descending
      299     index allocGB-idx allocGB descending
      300     index totGB-idx totGB descending
      301     index xid-idx is unique xid
      302     index SANum-idx is unique SANum
      303     index SAName-idx is unique SAName
      304   .
      305   
      306   *** Encrypted Source ***
      307   *** Encrypted Source ***
      308   *** Encrypted Source ***
      309   *** Encrypted Source ***
      310   *** Encrypted Source ***
      311   *** Encrypted Source ***
      312   *** Encrypted Source ***
      313   *** Encrypted Source ***
      314   *** Encrypted Source ***
      315   *** Encrypted Source ***
      316   *** Encrypted Source ***
      317   *** Encrypted Source ***
      318   *** Encrypted Source ***
      319   *** Encrypted Source ***
      320   *** Encrypted Source ***
      321   *** Encrypted Source ***
      322   *** Encrypted Source ***
      323   *** Encrypted Source ***
      324   *** Encrypted Source ***
      325   *** Encrypted Source ***
      326   *** Encrypted Source ***
      327   *** Encrypted Source ***
      328   *** Encrypted Source ***
      329   *** Encrypted Source ***
      330   *** Encrypted Source ***
      331   *** Encrypted Source ***
      332   *** Encrypted Source ***
      333   *** Encrypted Source ***
      334   *** Encrypted Source ***
      335   *** Encrypted Source ***
      336   *** Encrypted Source ***
      337   *** Encrypted Source ***
      338   *** Encrypted Source ***
      339   *** Encrypted Source ***
      340   *** Encrypted Source ***
      341   *** Encrypted Source ***
      342   *** Encrypted Source ***
      343   *** Encrypted Source ***
      344   *** Encrypted Source ***
      345   *** Encrypted Source ***
      346   *** Encrypted Source ***
      347   *** Encrypted Source ***
      348   *** Encrypted Source ***
      349   *** Encrypted Source ***
      350   *** Encrypted Source ***
      351   *** Encrypted Source ***
      352   *** Encrypted Source ***
      353   *** Encrypted Source ***
      354   *** Encrypted Source ***
      355   *** Encrypted Source ***
      356   *** Encrypted Source ***
      357   *** Encrypted Source ***
      358   *** Encrypted Source ***
      359   *** Encrypted Source ***
      360   *** Encrypted Source ***
      361   *** Encrypted Source ***
      362   *** Encrypted Source ***
      363   *** Encrypted Source ***
      364   *** Encrypted Source ***
      365   *** Encrypted Source ***
      366   *** Encrypted Source ***
      367   *** Encrypted Source ***
      368   *** Encrypted Source ***
      369   *** Encrypted Source ***
      370   *** Encrypted Source ***
      371   *** Encrypted Source ***
      372   *** Encrypted Source ***
      373   *** Encrypted Source ***
      374   *** Encrypted Source ***
      375   *** Encrypted Source ***
      376    
      377   
      378   /*******************************************************************************
      379    *******************************************************************************
      380    **                                                                           **
      381    **                                                                           **
      382    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      383    **  http://www.greenfieldtech.com                                            **
      384    **                                                                           **
      385    **  ProTop is free software; you can redistribute it and/or modify it        **
      386    **  under the terms of the GNU General Public License (GPL) as published     **
      387    **  by the Free Software Foundation; either version 2 of the License, or     **
      388    **  at your option) any later version.                                       **
      389    **                                                                           **
      390    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      391    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      392    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      393    **  for more details.                                                        **
      394    **                                                                           **
      395    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      396    **  of use and alternative licensing options for this software.              **
      397    **                                                                           **
      398    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      399    **                                                                           **
      400    **  See http://www.fsf.org for more information about the GPL.               **
      401    **                                                                           **
      402    **                                                                           **
      403    *******************************************************************************
      404    *******************************************************************************
      405    *
      406    * protoplib.i
      407    *
      408    * ProTop infrastructure library definitions
      409    *
      410    */
      411   
      412   function uDateTime returns integer () in super.
      413   function string2uDateTime returns integer( input p_text as character ) in super.
      414   function searchDir returns character ( input xDir as character ) in super.
      415   function unsignMe returns decimal ( input s as decimal, input i as integer ) in super.
      416   function hr returns decimal ( input lr as decimal, input osr as decimal, output hr-str as character, output hr as decimal, output mr as decimal ) in super.
      417   function do-SumSample returns logical ( output p_index as integer, output p_time  as integer ) in super.
      418   function myPID returns character () in super.
      419   function hilite returns logical ( input b as handle, input p_metric as character, input p_value as character, output p_attr as character ) in super.
      420   
      421   /* end protoplib.i */
      422    
      423   
      424   /*******************************************************************************
      425    *******************************************************************************
      426    **                                                                           **
      427    **                                                                           **
      428    **  Copyright 2003-2006 Tom Bascom, Greenfield Technologies                  **
      429    **  http://www.greenfieldtech.com                                            **
      430    **                                                                           **
      431    **  ProTop is free software; you can redistribute it and/or modify it        **
      432    **  under the terms of the GNU General Public License (GPL) as published     **
      433    **  by the Free Software Foundation; either version 2 of the License, or     **
      434    **  at your option) any later version.                                       **
      435    **                                                                           **
      436    **  ProTop is distributed in the hope that it will be useful, but WITHOUT    **
      437    **  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or    **
      438    **  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License     **
      439    **  for more details.                                                        **
      440    **                                                                           **
      441    **  See TERMS.TXT for more information regarding the Terms and Conditions    **
      442    **  of use and alternative licensing options for this software.              **
      443    **                                                                           **
      444    **  A copy of the GPL is in GPL.TXT which was provided with this package.    **
      445    **                                                                           **
      446    **  See http://www.fsf.org for more information about the GPL.               **
      447    **                                                                           **
      448    **                                                                           **
      449    *******************************************************************************
      450    *******************************************************************************
      451    *
      452    * vstlib.i
      453    *
      454    * VST library definitions
      455    *
      456    */
      457   
      458   function aiInfo returns character ( input vAiFile as character, output vAiGenNum as integer ) in super.
      459   function chkai returns integer ( output ai_exts as integer, output ai_full as integer, output ai_empty as integer ) in super.
      460   function chkarea returns integer ( input threshold as decimal, output worst as decimal ) in super.
      461   function chkptNum returns integer ( input-output oldbi as integer ) in super.
      462   
      463   function connectFlags returns character ( input cnxId as integer ) in super.
      464   function connectName returns character ( input cnxId as integer, input cnxFlags as character ) in super.
      465   function lastStatement returns character( input cnxId as integer, output lineNum as integer, output procName as character ) in super.
      466   
      467   function isAIEnabled returns logical () in super.
      468   function isReplSource returns logical () in super.
      469   function isReplTarget returns logical () in super.
      470   function isBackupRunning returns logical () in super.
      471   function isWorkgroup returns logical () in super.
      472   
      473   function getStartupX returns character ( input v as character, input p1 as character, input p2 as character ) in super.
      474   
      475   /* end vstlib.i */
      476    
      477   
      478   function add2ds returns logical ( input h as handle ) in super.
      479   function getTempTableHandle returns handle ( input n as character ) in super.
      480   
      481   /* end protop.i */
      482    
      483   
      484   define output parameter dcDescription as character no-undo initial "Checkpoints".
      485   
      486   define temp-table tt_checkpt no-undo
      487     field xid       as integer
      488     field id        as integer   format "->>>>>>>9"     label "Chkpt#"
      489     field ckptClstr as decimal   format ">>>>>>>>9"     label "Cluster"
      490     field st        as character format "x(22)"         label " Start"
      491     field fini      as character format "x(8)"          label "  Finish"
      492     field cpLenSec  as integer                                            /* will not be displayed - dynscreen automatically supresses */
      493     field cpLen     as character format "x(8)"          label "  Length"
      494     field dirty     as decimal   format ">>>>>>9"       label "Dirty"
      495     field cptq      as decimal   format ">>>>>>9"       label "ChkPtQ"
      496     field scan      as decimal   format ">>>>>>9"       label "Scan"
      497     field apwq      as decimal   format ">>>>>>9"       label "APW Q"
      498     field flush     as decimal   format ">>>>>>>9"      label "Flushed"
      499   
      500     field duration  as decimal   format  ">>>>>9.99"    label "Duration"
      501     field syncTime  as decimal   format  ">>>>>9.99"    label "Sync Time"
      502   
      503     field biWrt     as decimal   format ">>>>>>9"       label "BIWr"
      504     field biWrtTm   as decimal   format ">>>>9.99"      label "BIWrTm"
      505     field DBWrt     as decimal   format ">>>>>>9"       label "DBWr"
      506     field DBWrtTm   as decimal   format ">>>>9.99"      label "DBWrTm"
      507   
      508     index  id-idx is unique primary id descending
      509   .
      510   
      511   
      512   /* lib/dumpTT.i
      513    *
      514    * simplified to a single line -- include should be eliminated.
      515    *
      516    */
      517   
      518   &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.1 &THEN
      519   /*** +++
      520   file-info:file-name = "./ptdefs".
      521   if file-info:full-pathname <> ? and index( file-info:file-type, "d" ) > 0 and index( file-info:file-type, "w" ) > 0 then
      522     do:
      523   
      524       file-info:file-name = "./ptdefs/{1}.xsd".
      525   
      526       if true /* file-info:full-pathname = ? or file-info:file-size = 0 */ then
      527         do:
      528   
      529           temp-table {1}:write-xmlschema(
      530             "file",
      531   /*        substitute( "ptdefs/&1.xsd", "{1}" ), */
      532   /*        "./ptdefs/{1}.xsd", */
      533             ( if opsys = "unix" then "./ptdefs/{1}.xsd" else ".~\ptdefs~\{1}.xsd" ),
      534             true
      535   
      536         &IF DECIMAL(SUBSTRING(PROVERSION,1,INDEX(PROVERSION,".") + 1)) >= 10.2
      537         &THEN
      538             , ?, ?, ?
      539         &ENDIF
      540   
      541       ).
      542   
      543       end.
      544   
      545     end.
      546    +++ ***/
      547   &ENDIF
      548    
      549   
      550   define variable xseq#        as integer no-undo.
      551   
      552   define variable bh           as handle no-undo.
      553   define variable bf           as handle no-undo.
      554   
      555   define variable hasSyncTime  as logical no-undo.
      556   
      557   procedure chkSyncTime:
      558   
      559     hasSyncTime = no.
      560     find dictdb._File  no-lock where _File-Name = "_Checkpoint".
      561     find dictdb._Field no-lock where _Field._File-recid = recid( _File ) and _Field-Name = "_Checkpoint-SyncTime" no-error.
      562     if available _Field then hasSyncTime = yes.
      563   
      564     return.
      565   
      566   end.
      567   
      568   function fixDateString returns character ( input dx as character ):
      569   
      570     define variable d as character no-undo.
      571     define variable m as character no-undo.
      572     define variable y as character no-undo.
      573     define variable t as character no-undo.
      574   
      575     /* The date-time field in _checkpoint looks like: Mon Jan 14 03:33:08 2013 */
      576   
      577     assign
      578       m = string( lookup( substring( dx, 5, 3 ), "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec" ), "99" )
      579       d = string( integer( trim( substring( dx, 9, 2 ))), "99" )
      580       y = substring( dx, 21 )
      581       t = substring( dx, 12, 8 )
      582     .
      583   
      584     if       session:date-format = "ymd" then return substitute( "&1-&2-&3 &4", y, m, d, t ).
      585      else if session:date-format = "mdy" then return substitute( "&1-&2-&3 &4", m, d, y, t ).
      586      else if session:date-format = "dmy" then return substitute( "&1-&2-&3 &4", d, m, y, t ).
      587      else
      588       do:
      589         message "Unsupported session:date-format" session:date-format view-as alert-box.
      590         quit.
      591       end.
      592   
      593   end.
      594   
      595   procedure mon-init:
      596   
      597     empty temp-table tt_checkpt.
      598   
      599     xseq# = 0.
      600   
      601     run chkSyncTime.
      602   
      603     return.
      604   
      605   end.
      606   
      607   
      608   procedure mon-update:
      609   
      610     define input parameter argList as character no-undo.
      611   
      612   &IF DEFINED( OE10 ) &THEN
      613   
      614     define variable cpStart  as datetime no-undo.
      615     define variable cpFinish as datetime no-undo.
      616     define variable cpLength as integer  no-undo.
      617   
      618     empty temp-table tt_checkpt.                  /* snapshot... it would be nice to capture the history, something to work on    */
      619   
      620     find dictdb._ActSummary no-lock.
      621     find dictdb._BuffStatus no-lock.
      622   
      623     for each dictdb._Checkpoint no-lock where _Checkpoint-Time <> ?:
      624   
      625       find tt_checkpt where tt_checkpt.id = _checkpoint._checkpoint-id no-error.
      626   
      627       if not available tt_checkpt then
      628         do:
      629           create tt_checkpt.
      630           assign
      631             xseq# = xseq# + 1
      632             tt_checkpt.xid = xseq#
      633           .
      634         end.
      635   
      636       assign
      637         cpStart  = ?
      638         cpFinish = ?
      639         cpLength = 0
      640         cpStart  = datetime( fixDateString( _Checkpoint._Checkpoint-Time )) when _Checkpoint._Checkpoint-Time > ""
      641         cpFinish = datetime( fixDateString( _Checkpoint._Checkpoint-Len ))  when _Checkpoint._Checkpoint-Len > ""
      642         cpLength = abs( interval( cpFinish, cpStart, "seconds" )) when _Checkpoint._Checkpoint-Time > ""
      643   /*    tt_checkpt.id    = _Summary-Chkpts - ( _Checkpoint._Checkpoint-Id - 2 ) */
      644         tt_checkpt.id    = _BfStatus-LastCkpNum - ( _Checkpoint._Checkpoint-Id - 1 )
      645         tt_checkpt.st    = " " + substring( _Checkpoint._Checkpoint-Time, 5, 20 ) when _Checkpoint._Checkpoint-Time > ""
      646         tt_checkpt.fini  = substring( _Checkpoint._Checkpoint-Len, 12, 8 ) when _Checkpoint._Checkpoint-Len > ""
      647         tt_checkpt.cpLenSec = cpLength
      648         tt_checkpt.cpLen = string( cpLength, "hh:mm:ss" )
      649         tt_checkpt.dirty = _Checkpoint._Checkpoint-Dirty
      650         tt_checkpt.cptq  = _Checkpoint._Checkpoint-CptQ
      651         tt_checkpt.scan  = _Checkpoint._Checkpoint-Scan
      652         tt_checkpt.apwq  = _Checkpoint._Checkpoint-ApwQ
      653         tt_checkpt.flush = _Checkpoint._Checkpoint-Flush
      654       .
      655   
      656       if hasSyncTime = yes then
      657         do:
      658           bh = buffer _Checkpoint:handle.
      659           bf = bh:buffer-field( "_Checkpoint-Duration" ).
      660           if bf <> ? and bf:buffer-value() <> "" and bf:buffer-value() <> ? then tt_checkpt.duration = bf:buffer-value().
      661           bf = bh:buffer-field( "_Checkpoint-SyncTime" ).
      662           if bf <> ? and bf:buffer-value() <> "" and bf:buffer-value() <> ? then tt_checkpt.syncTime = bf:buffer-value().
      663         end.
      664   
      665       assign
      666         tt_checkpt.ckptClstr = buffer _Checkpoint:handle:buffer-field( "_Checkpoint-Cluster" ):buffer-value
      667         tt_checkpt.biWrt     = buffer _Checkpoint:handle:buffer-field( "_Checkpoint-bi-writes" ):buffer-value
      668         tt_checkpt.biWrtTm   = buffer _Checkpoint:handle:buffer-field( "_Checkpoint-bi-write-time" ):buffer-value
      669         tt_checkpt.dbWrt     = buffer _Checkpoint:handle:buffer-field( "_Checkpoint-buffers" ):buffer-value
      670         tt_checkpt.dbWrtTm   = buffer _Checkpoint:handle:buffer-field( "_Checkpoint-b-write-time" ):buffer-value
      671       no-error.
      672   
      673       if tt_checkpt.fini = ? then tt_checkpt.fini = "".
      674   
      675     end.
      676   
      677     add2ds( temp-table tt_checkpt:default-buffer-handle ).
      678   
      679   &ENDIF
      680   
      681     return.
      682   
      683   end.
      684   
      685   return.
